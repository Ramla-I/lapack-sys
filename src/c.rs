//! The C bindings (LAPACKE).

#![allow(non_camel_case_types)]

use libc::{c_char, c_double, c_float, c_int};

use {c_double_complex, c_float_complex};

pub const LAPACK_ROW_MAJOR: c_int = 101;
pub const LAPACK_COL_MAJOR: c_int = 102;

pub const LAPACK_WORK_MEMORY_ERROR: c_int = -1010;
pub const LAPACK_TRANSPOSE_MEMORY_ERROR: c_int = -1011;

pub type LAPACK_S_SELECT2 = Option<extern "C" fn(*const c_float, *const c_float) -> c_int>;
pub type LAPACK_S_SELECT3 = Option<extern "C" fn(*const c_float, *const c_float, *const c_float)
                                                 -> c_int>;

pub type LAPACK_D_SELECT2 = Option<extern "C" fn(*const c_double, *const c_double) -> c_int>;
pub type LAPACK_D_SELECT3 = Option<extern "C" fn(*const c_double, *const c_double, *const c_double)
                                                 -> c_int>;

pub type LAPACK_C_SELECT1 = Option<extern "C" fn(*const c_float_complex) -> c_int>;
pub type LAPACK_C_SELECT2 = Option<extern "C" fn(*const c_float_complex, *const c_float_complex)
                                                 -> c_int>;

pub type LAPACK_Z_SELECT1 = Option<extern "C" fn(*const c_double_complex) -> c_int>;
pub type LAPACK_Z_SELECT2 = Option<extern "C" fn(*const c_double_complex, *const c_double_complex)
                                                 -> c_int>;

extern "C" {
    pub fn LAPACKE_sbdsdc(matrix_layout: c_int, uplo: c_char, compq: c_char, n: c_int,
                          d: *mut c_float, e: *mut c_float, u: *mut c_float, ldu: c_int,
                          vt: *mut c_float, ldvt: c_int, q: *mut c_float, iq: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dbdsdc(matrix_layout: c_int, uplo: c_char, compq: c_char, n: c_int,
                          d: *mut c_double, e: *mut c_double, u: *mut c_double, ldu: c_int,
                          vt: *mut c_double, ldvt: c_int, q: *mut c_double, iq: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_sbdsqr(matrix_layout: c_int, uplo: c_char, n: c_int, ncvt: c_int, nru: c_int,
                          ncc: c_int, d: *mut c_float, e: *mut c_float, vt: *mut c_float,
                          ldvt: c_int, u: *mut c_float, ldu: c_int, c: *mut c_float, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_dbdsqr(matrix_layout: c_int, uplo: c_char, n: c_int, ncvt: c_int, nru: c_int,
                          ncc: c_int, d: *mut c_double, e: *mut c_double, vt: *mut c_double,
                          ldvt: c_int, u: *mut c_double, ldu: c_int, c: *mut c_double, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_cbdsqr(matrix_layout: c_int, uplo: c_char, n: c_int, ncvt: c_int, nru: c_int,
                          ncc: c_int, d: *mut c_float, e: *mut c_float, vt: *mut c_float_complex,
                          ldvt: c_int, u: *mut c_float_complex, ldu: c_int,
                          c: *mut c_float_complex, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_zbdsqr(matrix_layout: c_int, uplo: c_char, n: c_int, ncvt: c_int, nru: c_int,
                          ncc: c_int, d: *mut c_double, e: *mut c_double,
                          vt: *mut c_double_complex, ldvt: c_int, u: *mut c_double_complex,
                          ldu: c_int, c: *mut c_double_complex, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_sbdsvdx(matrix_layout: c_int, uplo: c_char, jobz: c_char, range: c_char,
                           n: c_int, d: *mut c_float, e: *mut c_float, vl: c_int, vu: c_int,
                           il: c_int, iu: c_int, ns: c_int, s: *mut c_float, z: *mut c_float,
                           ldz: c_int, superb: *mut c_int)
                           -> c_int;
    pub fn LAPACKE_dbdsvdx(matrix_layout: c_int, uplo: c_char, jobz: c_char, range: c_char,
                           n: c_int, d: *mut c_double, e: *mut c_double, vl: c_int, vu: c_int,
                           il: c_int, iu: c_int, ns: c_int, s: *mut c_double, z: *mut c_double,
                           ldz: c_int, superb: *mut c_int)
                           -> c_int;
    pub fn LAPACKE_sdisna(job: c_char, m: c_int, n: c_int, d: *const c_float, sep: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_ddisna(job: c_char, m: c_int, n: c_int, d: *const c_double, sep: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sgbbrd(matrix_layout: c_int, vect: c_char, m: c_int, n: c_int, ncc: c_int,
                          kl: c_int, ku: c_int, ab: *mut c_float, ldab: c_int, d: *mut c_float,
                          e: *mut c_float, q: *mut c_float, ldq: c_int, pt: *mut c_float,
                          ldpt: c_int, c: *mut c_float, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_dgbbrd(matrix_layout: c_int, vect: c_char, m: c_int, n: c_int, ncc: c_int,
                          kl: c_int, ku: c_int, ab: *mut c_double, ldab: c_int, d: *mut c_double,
                          e: *mut c_double, q: *mut c_double, ldq: c_int, pt: *mut c_double,
                          ldpt: c_int, c: *mut c_double, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_cgbbrd(matrix_layout: c_int, vect: c_char, m: c_int, n: c_int, ncc: c_int,
                          kl: c_int, ku: c_int, ab: *mut c_float_complex, ldab: c_int,
                          d: *mut c_float, e: *mut c_float, q: *mut c_float_complex, ldq: c_int,
                          pt: *mut c_float_complex, ldpt: c_int, c: *mut c_float_complex,
                          ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_zgbbrd(matrix_layout: c_int, vect: c_char, m: c_int, n: c_int, ncc: c_int,
                          kl: c_int, ku: c_int, ab: *mut c_double_complex, ldab: c_int,
                          d: *mut c_double, e: *mut c_double, q: *mut c_double_complex, ldq: c_int,
                          pt: *mut c_double_complex, ldpt: c_int, c: *mut c_double_complex,
                          ldc: c_int)
                          -> c_int;

    pub fn LAPACKE_sgbcon(matrix_layout: c_int, norm: c_char, n: c_int, kl: c_int, ku: c_int,
                          ab: *const c_float, ldab: c_int, ipiv: *const c_int, anorm: c_float,
                          rcond: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgbcon(matrix_layout: c_int, norm: c_char, n: c_int, kl: c_int, ku: c_int,
                          ab: *const c_double, ldab: c_int, ipiv: *const c_int, anorm: c_double,
                          rcond: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgbcon(matrix_layout: c_int, norm: c_char, n: c_int, kl: c_int, ku: c_int,
                          ab: *const c_float_complex, ldab: c_int, ipiv: *const c_int,
                          anorm: c_float, rcond: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zgbcon(matrix_layout: c_int, norm: c_char, n: c_int, kl: c_int, ku: c_int,
                          ab: *const c_double_complex, ldab: c_int, ipiv: *const c_int,
                          anorm: c_double, rcond: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sgbequ(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                          ab: *const c_float, ldab: c_int, r: *mut c_float, c: *mut c_float,
                          rowcnd: *mut c_float, colcnd: *mut c_float, amax: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgbequ(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                          ab: *const c_double, ldab: c_int, r: *mut c_double, c: *mut c_double,
                          rowcnd: *mut c_double, colcnd: *mut c_double, amax: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgbequ(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                          ab: *const c_float_complex, ldab: c_int, r: *mut c_float,
                          c: *mut c_float, rowcnd: *mut c_float, colcnd: *mut c_float,
                          amax: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zgbequ(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                          ab: *const c_double_complex, ldab: c_int, r: *mut c_double,
                          c: *mut c_double, rowcnd: *mut c_double, colcnd: *mut c_double,
                          amax: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sgbequb(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                           ab: *const c_float, ldab: c_int, r: *mut c_float, c: *mut c_float,
                           rowcnd: *mut c_float, colcnd: *mut c_float, amax: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_dgbequb(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                           ab: *const c_double, ldab: c_int, r: *mut c_double, c: *mut c_double,
                           rowcnd: *mut c_double, colcnd: *mut c_double, amax: *mut c_double)
                           -> c_int;
    pub fn LAPACKE_cgbequb(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                           ab: *const c_float_complex, ldab: c_int, r: *mut c_float,
                           c: *mut c_float, rowcnd: *mut c_float, colcnd: *mut c_float,
                           amax: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_zgbequb(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                           ab: *const c_double_complex, ldab: c_int, r: *mut c_double,
                           c: *mut c_double, rowcnd: *mut c_double, colcnd: *mut c_double,
                           amax: *mut c_double)
                           -> c_int;

    pub fn LAPACKE_sgbrfs(matrix_layout: c_int, trans: c_char, n: c_int, kl: c_int, ku: c_int,
                          nrhs: c_int, ab: *const c_float, ldab: c_int, afb: *const c_float,
                          ldafb: c_int, ipiv: *const c_int, b: *const c_float, ldb: c_int,
                          x: *mut c_float, ldx: c_int, ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgbrfs(matrix_layout: c_int, trans: c_char, n: c_int, kl: c_int, ku: c_int,
                          nrhs: c_int, ab: *const c_double, ldab: c_int, afb: *const c_double,
                          ldafb: c_int, ipiv: *const c_int, b: *const c_double, ldb: c_int,
                          x: *mut c_double, ldx: c_int, ferr: *mut c_double, berr: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgbrfs(matrix_layout: c_int, trans: c_char, n: c_int, kl: c_int, ku: c_int,
                          nrhs: c_int, ab: *const c_float_complex, ldab: c_int,
                          afb: *const c_float_complex, ldafb: c_int, ipiv: *const c_int,
                          b: *const c_float_complex, ldb: c_int, x: *mut c_float_complex,
                          ldx: c_int, ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zgbrfs(matrix_layout: c_int, trans: c_char, n: c_int, kl: c_int, ku: c_int,
                          nrhs: c_int, ab: *const c_double_complex, ldab: c_int,
                          afb: *const c_double_complex, ldafb: c_int, ipiv: *const c_int,
                          b: *const c_double_complex, ldb: c_int, x: *mut c_double_complex,
                          ldx: c_int, ferr: *mut c_double, berr: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sgbrfsx(matrix_layout: c_int, trans: c_char, equed: c_char, n: c_int, kl: c_int,
                           ku: c_int, nrhs: c_int, ab: *const c_float, ldab: c_int,
                           afb: *const c_float, ldafb: c_int, ipiv: *const c_int,
                           r: *const c_float, c: *const c_float, b: *const c_float, ldb: c_int,
                           x: *mut c_float, ldx: c_int, rcond: *mut c_float, berr: *mut c_float,
                           n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                           err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_dgbrfsx(matrix_layout: c_int, trans: c_char, equed: c_char, n: c_int, kl: c_int,
                           ku: c_int, nrhs: c_int, ab: *const c_double, ldab: c_int,
                           afb: *const c_double, ldafb: c_int, ipiv: *const c_int,
                           r: *const c_double, c: *const c_double, b: *const c_double, ldb: c_int,
                           x: *mut c_double, ldx: c_int, rcond: *mut c_double, berr: *mut c_double,
                           n_err_bnds: c_int, err_bnds_norm: *mut c_double,
                           err_bnds_comp: *mut c_double, nparams: c_int, params: *mut c_double)
                           -> c_int;
    pub fn LAPACKE_cgbrfsx(matrix_layout: c_int, trans: c_char, equed: c_char, n: c_int, kl: c_int,
                           ku: c_int, nrhs: c_int, ab: *const c_float_complex, ldab: c_int,
                           afb: *const c_float_complex, ldafb: c_int, ipiv: *const c_int,
                           r: *const c_float, c: *const c_float, b: *const c_float_complex,
                           ldb: c_int, x: *mut c_float_complex, ldx: c_int, rcond: *mut c_float,
                           berr: *mut c_float, n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                           err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_zgbrfsx(matrix_layout: c_int, trans: c_char, equed: c_char, n: c_int, kl: c_int,
                           ku: c_int, nrhs: c_int, ab: *const c_double_complex, ldab: c_int,
                           afb: *const c_double_complex, ldafb: c_int, ipiv: *const c_int,
                           r: *const c_double, c: *const c_double, b: *const c_double_complex,
                           ldb: c_int, x: *mut c_double_complex, ldx: c_int, rcond: *mut c_double,
                           berr: *mut c_double, n_err_bnds: c_int, err_bnds_norm: *mut c_double,
                           err_bnds_comp: *mut c_double, nparams: c_int, params: *mut c_double)
                           -> c_int;

    pub fn LAPACKE_sgbsv(matrix_layout: c_int, n: c_int, kl: c_int, ku: c_int, nrhs: c_int,
                         ab: *mut c_float, ldab: c_int, ipiv: *mut c_int, b: *mut c_float,
                         ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_dgbsv(matrix_layout: c_int, n: c_int, kl: c_int, ku: c_int, nrhs: c_int,
                         ab: *mut c_double, ldab: c_int, ipiv: *mut c_int, b: *mut c_double,
                         ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_cgbsv(matrix_layout: c_int, n: c_int, kl: c_int, ku: c_int, nrhs: c_int,
                         ab: *mut c_float_complex, ldab: c_int, ipiv: *mut c_int,
                         b: *mut c_float_complex, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_zgbsv(matrix_layout: c_int, n: c_int, kl: c_int, ku: c_int, nrhs: c_int,
                         ab: *mut c_double_complex, ldab: c_int, ipiv: *mut c_int,
                         b: *mut c_double_complex, ldb: c_int)
                         -> c_int;

    pub fn LAPACKE_sgbsvx(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int, kl: c_int,
                          ku: c_int, nrhs: c_int, ab: *mut c_float, ldab: c_int, afb: *mut c_float,
                          ldafb: c_int, ipiv: *mut c_int, equed: *mut c_char, r: *mut c_float,
                          c: *mut c_float, b: *mut c_float, ldb: c_int, x: *mut c_float,
                          ldx: c_int, rcond: *mut c_float, ferr: *mut c_float, berr: *mut c_float,
                          rpivot: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgbsvx(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int, kl: c_int,
                          ku: c_int, nrhs: c_int, ab: *mut c_double, ldab: c_int,
                          afb: *mut c_double, ldafb: c_int, ipiv: *mut c_int, equed: *mut c_char,
                          r: *mut c_double, c: *mut c_double, b: *mut c_double, ldb: c_int,
                          x: *mut c_double, ldx: c_int, rcond: *mut c_double, ferr: *mut c_double,
                          berr: *mut c_double, rpivot: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgbsvx(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int, kl: c_int,
                          ku: c_int, nrhs: c_int, ab: *mut c_float_complex, ldab: c_int,
                          afb: *mut c_float_complex, ldafb: c_int, ipiv: *mut c_int,
                          equed: *mut c_char, r: *mut c_float, c: *mut c_float,
                          b: *mut c_float_complex, ldb: c_int, x: *mut c_float_complex, ldx: c_int,
                          rcond: *mut c_float, ferr: *mut c_float, berr: *mut c_float,
                          rpivot: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zgbsvx(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int, kl: c_int,
                          ku: c_int, nrhs: c_int, ab: *mut c_double_complex, ldab: c_int,
                          afb: *mut c_double_complex, ldafb: c_int, ipiv: *mut c_int,
                          equed: *mut c_char, r: *mut c_double, c: *mut c_double,
                          b: *mut c_double_complex, ldb: c_int, x: *mut c_double_complex,
                          ldx: c_int, rcond: *mut c_double, ferr: *mut c_double,
                          berr: *mut c_double, rpivot: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sgbsvxx(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int, kl: c_int,
                           ku: c_int, nrhs: c_int, ab: *mut c_float, ldab: c_int,
                           afb: *mut c_float, ldafb: c_int, ipiv: *mut c_int, equed: *mut c_char,
                           r: *mut c_float, c: *mut c_float, b: *mut c_float, ldb: c_int,
                           x: *mut c_float, ldx: c_int, rcond: *mut c_float, rpvgrw: *mut c_float,
                           berr: *mut c_float, n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                           err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_dgbsvxx(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int, kl: c_int,
                           ku: c_int, nrhs: c_int, ab: *mut c_double, ldab: c_int,
                           afb: *mut c_double, ldafb: c_int, ipiv: *mut c_int, equed: *mut c_char,
                           r: *mut c_double, c: *mut c_double, b: *mut c_double, ldb: c_int,
                           x: *mut c_double, ldx: c_int, rcond: *mut c_double,
                           rpvgrw: *mut c_double, berr: *mut c_double, n_err_bnds: c_int,
                           err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                           nparams: c_int, params: *mut c_double)
                           -> c_int;
    pub fn LAPACKE_cgbsvxx(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int, kl: c_int,
                           ku: c_int, nrhs: c_int, ab: *mut c_float_complex, ldab: c_int,
                           afb: *mut c_float_complex, ldafb: c_int, ipiv: *mut c_int,
                           equed: *mut c_char, r: *mut c_float, c: *mut c_float,
                           b: *mut c_float_complex, ldb: c_int, x: *mut c_float_complex,
                           ldx: c_int, rcond: *mut c_float, rpvgrw: *mut c_float,
                           berr: *mut c_float, n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                           err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_zgbsvxx(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int, kl: c_int,
                           ku: c_int, nrhs: c_int, ab: *mut c_double_complex, ldab: c_int,
                           afb: *mut c_double_complex, ldafb: c_int, ipiv: *mut c_int,
                           equed: *mut c_char, r: *mut c_double, c: *mut c_double,
                           b: *mut c_double_complex, ldb: c_int, x: *mut c_double_complex,
                           ldx: c_int, rcond: *mut c_double, rpvgrw: *mut c_double,
                           berr: *mut c_double, n_err_bnds: c_int, err_bnds_norm: *mut c_double,
                           err_bnds_comp: *mut c_double, nparams: c_int, params: *mut c_double)
                           -> c_int;

    pub fn LAPACKE_sgbtrf(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                          ab: *mut c_float, ldab: c_int, ipiv: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dgbtrf(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                          ab: *mut c_double, ldab: c_int, ipiv: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_cgbtrf(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                          ab: *mut c_float_complex, ldab: c_int, ipiv: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zgbtrf(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                          ab: *mut c_double_complex, ldab: c_int, ipiv: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_sgbtrs(matrix_layout: c_int, trans: c_char, n: c_int, kl: c_int, ku: c_int,
                          nrhs: c_int, ab: *const c_float, ldab: c_int, ipiv: *const c_int,
                          b: *mut c_float, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_dgbtrs(matrix_layout: c_int, trans: c_char, n: c_int, kl: c_int, ku: c_int,
                          nrhs: c_int, ab: *const c_double, ldab: c_int, ipiv: *const c_int,
                          b: *mut c_double, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_cgbtrs(matrix_layout: c_int, trans: c_char, n: c_int, kl: c_int, ku: c_int,
                          nrhs: c_int, ab: *const c_float_complex, ldab: c_int, ipiv: *const c_int,
                          b: *mut c_float_complex, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_zgbtrs(matrix_layout: c_int, trans: c_char, n: c_int, kl: c_int, ku: c_int,
                          nrhs: c_int, ab: *const c_double_complex, ldab: c_int,
                          ipiv: *const c_int, b: *mut c_double_complex, ldb: c_int)
                          -> c_int;

    pub fn LAPACKE_sgebak(matrix_layout: c_int, job: c_char, side: c_char, n: c_int, ilo: c_int,
                          ihi: c_int, scale: *const c_float, m: c_int, v: *mut c_float, ldv: c_int)
                          -> c_int;
    pub fn LAPACKE_dgebak(matrix_layout: c_int, job: c_char, side: c_char, n: c_int, ilo: c_int,
                          ihi: c_int, scale: *const c_double, m: c_int, v: *mut c_double,
                          ldv: c_int)
                          -> c_int;
    pub fn LAPACKE_cgebak(matrix_layout: c_int, job: c_char, side: c_char, n: c_int, ilo: c_int,
                          ihi: c_int, scale: *const c_float, m: c_int, v: *mut c_float_complex,
                          ldv: c_int)
                          -> c_int;
    pub fn LAPACKE_zgebak(matrix_layout: c_int, job: c_char, side: c_char, n: c_int, ilo: c_int,
                          ihi: c_int, scale: *const c_double, m: c_int, v: *mut c_double_complex,
                          ldv: c_int)
                          -> c_int;

    pub fn LAPACKE_sgebal(matrix_layout: c_int, job: c_char, n: c_int, a: *mut c_float, lda: c_int,
                          ilo: *mut c_int, ihi: *mut c_int, scale: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgebal(matrix_layout: c_int, job: c_char, n: c_int, a: *mut c_double,
                          lda: c_int, ilo: *mut c_int, ihi: *mut c_int, scale: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgebal(matrix_layout: c_int, job: c_char, n: c_int, a: *mut c_float_complex,
                          lda: c_int, ilo: *mut c_int, ihi: *mut c_int, scale: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zgebal(matrix_layout: c_int, job: c_char, n: c_int, a: *mut c_double_complex,
                          lda: c_int, ilo: *mut c_int, ihi: *mut c_int, scale: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sgebrd(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float, lda: c_int,
                          d: *mut c_float, e: *mut c_float, tauq: *mut c_float, taup: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgebrd(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double, lda: c_int,
                          d: *mut c_double, e: *mut c_double, tauq: *mut c_double,
                          taup: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgebrd(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                          lda: c_int, d: *mut c_float, e: *mut c_float, tauq: *mut c_float_complex,
                          taup: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zgebrd(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                          lda: c_int, d: *mut c_double, e: *mut c_double,
                          tauq: *mut c_double_complex, taup: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_sgecon(matrix_layout: c_int, norm: c_char, n: c_int, a: *const c_float,
                          lda: c_int, anorm: c_float, rcond: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgecon(matrix_layout: c_int, norm: c_char, n: c_int, a: *const c_double,
                          lda: c_int, anorm: c_double, rcond: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgecon(matrix_layout: c_int, norm: c_char, n: c_int, a: *const c_float_complex,
                          lda: c_int, anorm: c_float, rcond: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zgecon(matrix_layout: c_int, norm: c_char, n: c_int, a: *const c_double_complex,
                          lda: c_int, anorm: c_double, rcond: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sgeequ(matrix_layout: c_int, m: c_int, n: c_int, a: *const c_float, lda: c_int,
                          r: *mut c_float, c: *mut c_float, rowcnd: *mut c_float,
                          colcnd: *mut c_float, amax: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgeequ(matrix_layout: c_int, m: c_int, n: c_int, a: *const c_double, lda: c_int,
                          r: *mut c_double, c: *mut c_double, rowcnd: *mut c_double,
                          colcnd: *mut c_double, amax: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgeequ(matrix_layout: c_int, m: c_int, n: c_int, a: *const c_float_complex,
                          lda: c_int, r: *mut c_float, c: *mut c_float, rowcnd: *mut c_float,
                          colcnd: *mut c_float, amax: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zgeequ(matrix_layout: c_int, m: c_int, n: c_int, a: *const c_double_complex,
                          lda: c_int, r: *mut c_double, c: *mut c_double, rowcnd: *mut c_double,
                          colcnd: *mut c_double, amax: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sgeequb(matrix_layout: c_int, m: c_int, n: c_int, a: *const c_float, lda: c_int,
                           r: *mut c_float, c: *mut c_float, rowcnd: *mut c_float,
                           colcnd: *mut c_float, amax: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_dgeequb(matrix_layout: c_int, m: c_int, n: c_int, a: *const c_double,
                           lda: c_int, r: *mut c_double, c: *mut c_double, rowcnd: *mut c_double,
                           colcnd: *mut c_double, amax: *mut c_double)
                           -> c_int;
    pub fn LAPACKE_cgeequb(matrix_layout: c_int, m: c_int, n: c_int, a: *const c_float_complex,
                           lda: c_int, r: *mut c_float, c: *mut c_float, rowcnd: *mut c_float,
                           colcnd: *mut c_float, amax: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_zgeequb(matrix_layout: c_int, m: c_int, n: c_int, a: *const c_double_complex,
                           lda: c_int, r: *mut c_double, c: *mut c_double, rowcnd: *mut c_double,
                           colcnd: *mut c_double, amax: *mut c_double)
                           -> c_int;

    pub fn LAPACKE_sgees(matrix_layout: c_int, jobvs: c_char, sort: c_char,
                         select: LAPACK_S_SELECT2, n: c_int, a: *mut c_float, lda: c_int,
                         sdim: *mut c_int, wr: *mut c_float, wi: *mut c_float, vs: *mut c_float,
                         ldvs: c_int)
                         -> c_int;
    pub fn LAPACKE_dgees(matrix_layout: c_int, jobvs: c_char, sort: c_char,
                         select: LAPACK_D_SELECT2, n: c_int, a: *mut c_double, lda: c_int,
                         sdim: *mut c_int, wr: *mut c_double, wi: *mut c_double, vs: *mut c_double,
                         ldvs: c_int)
                         -> c_int;
    pub fn LAPACKE_cgees(matrix_layout: c_int, jobvs: c_char, sort: c_char,
                         select: LAPACK_C_SELECT1, n: c_int, a: *mut c_float_complex, lda: c_int,
                         sdim: *mut c_int, w: *mut c_float_complex, vs: *mut c_float_complex,
                         ldvs: c_int)
                         -> c_int;
    pub fn LAPACKE_zgees(matrix_layout: c_int, jobvs: c_char, sort: c_char,
                         select: LAPACK_Z_SELECT1, n: c_int, a: *mut c_double_complex, lda: c_int,
                         sdim: *mut c_int, w: *mut c_double_complex, vs: *mut c_double_complex,
                         ldvs: c_int)
                         -> c_int;

    pub fn LAPACKE_sgeesx(matrix_layout: c_int, jobvs: c_char, sort: c_char,
                          select: LAPACK_S_SELECT2, sense: c_char, n: c_int, a: *mut c_float,
                          lda: c_int, sdim: *mut c_int, wr: *mut c_float, wi: *mut c_float,
                          vs: *mut c_float, ldvs: c_int, rconde: *mut c_float,
                          rcondv: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgeesx(matrix_layout: c_int, jobvs: c_char, sort: c_char,
                          select: LAPACK_D_SELECT2, sense: c_char, n: c_int, a: *mut c_double,
                          lda: c_int, sdim: *mut c_int, wr: *mut c_double, wi: *mut c_double,
                          vs: *mut c_double, ldvs: c_int, rconde: *mut c_double,
                          rcondv: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgeesx(matrix_layout: c_int, jobvs: c_char, sort: c_char,
                          select: LAPACK_C_SELECT1, sense: c_char, n: c_int,
                          a: *mut c_float_complex, lda: c_int, sdim: *mut c_int,
                          w: *mut c_float_complex, vs: *mut c_float_complex, ldvs: c_int,
                          rconde: *mut c_float, rcondv: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zgeesx(matrix_layout: c_int, jobvs: c_char, sort: c_char,
                          select: LAPACK_Z_SELECT1, sense: c_char, n: c_int,
                          a: *mut c_double_complex, lda: c_int, sdim: *mut c_int,
                          w: *mut c_double_complex, vs: *mut c_double_complex, ldvs: c_int,
                          rconde: *mut c_double, rcondv: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sgeev(matrix_layout: c_int, jobvl: c_char, jobvr: c_char, n: c_int,
                         a: *mut c_float, lda: c_int, wr: *mut c_float, wi: *mut c_float,
                         vl: *mut c_float, ldvl: c_int, vr: *mut c_float, ldvr: c_int)
                         -> c_int;
    pub fn LAPACKE_dgeev(matrix_layout: c_int, jobvl: c_char, jobvr: c_char, n: c_int,
                         a: *mut c_double, lda: c_int, wr: *mut c_double, wi: *mut c_double,
                         vl: *mut c_double, ldvl: c_int, vr: *mut c_double, ldvr: c_int)
                         -> c_int;
    pub fn LAPACKE_cgeev(matrix_layout: c_int, jobvl: c_char, jobvr: c_char, n: c_int,
                         a: *mut c_float_complex, lda: c_int, w: *mut c_float_complex,
                         vl: *mut c_float_complex, ldvl: c_int, vr: *mut c_float_complex,
                         ldvr: c_int)
                         -> c_int;
    pub fn LAPACKE_zgeev(matrix_layout: c_int, jobvl: c_char, jobvr: c_char, n: c_int,
                         a: *mut c_double_complex, lda: c_int, w: *mut c_double_complex,
                         vl: *mut c_double_complex, ldvl: c_int, vr: *mut c_double_complex,
                         ldvr: c_int)
                         -> c_int;

    pub fn LAPACKE_sgeevx(matrix_layout: c_int, balanc: c_char, jobvl: c_char, jobvr: c_char,
                          sense: c_char, n: c_int, a: *mut c_float, lda: c_int, wr: *mut c_float,
                          wi: *mut c_float, vl: *mut c_float, ldvl: c_int, vr: *mut c_float,
                          ldvr: c_int, ilo: *mut c_int, ihi: *mut c_int, scale: *mut c_float,
                          abnrm: *mut c_float, rconde: *mut c_float, rcondv: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgeevx(matrix_layout: c_int, balanc: c_char, jobvl: c_char, jobvr: c_char,
                          sense: c_char, n: c_int, a: *mut c_double, lda: c_int, wr: *mut c_double,
                          wi: *mut c_double, vl: *mut c_double, ldvl: c_int, vr: *mut c_double,
                          ldvr: c_int, ilo: *mut c_int, ihi: *mut c_int, scale: *mut c_double,
                          abnrm: *mut c_double, rconde: *mut c_double, rcondv: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgeevx(matrix_layout: c_int, balanc: c_char, jobvl: c_char, jobvr: c_char,
                          sense: c_char, n: c_int, a: *mut c_float_complex, lda: c_int,
                          w: *mut c_float_complex, vl: *mut c_float_complex, ldvl: c_int,
                          vr: *mut c_float_complex, ldvr: c_int, ilo: *mut c_int, ihi: *mut c_int,
                          scale: *mut c_float, abnrm: *mut c_float, rconde: *mut c_float,
                          rcondv: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zgeevx(matrix_layout: c_int, balanc: c_char, jobvl: c_char, jobvr: c_char,
                          sense: c_char, n: c_int, a: *mut c_double_complex, lda: c_int,
                          w: *mut c_double_complex, vl: *mut c_double_complex, ldvl: c_int,
                          vr: *mut c_double_complex, ldvr: c_int, ilo: *mut c_int, ihi: *mut c_int,
                          scale: *mut c_double, abnrm: *mut c_double, rconde: *mut c_double,
                          rcondv: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sgehrd(matrix_layout: c_int, n: c_int, ilo: c_int, ihi: c_int, a: *mut c_float,
                          lda: c_int, tau: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgehrd(matrix_layout: c_int, n: c_int, ilo: c_int, ihi: c_int, a: *mut c_double,
                          lda: c_int, tau: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgehrd(matrix_layout: c_int, n: c_int, ilo: c_int, ihi: c_int,
                          a: *mut c_float_complex, lda: c_int, tau: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zgehrd(matrix_layout: c_int, n: c_int, ilo: c_int, ihi: c_int,
                          a: *mut c_double_complex, lda: c_int, tau: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_sgejsv(matrix_layout: c_int, joba: c_char, jobu: c_char, jobv: c_char,
                          jobr: c_char, jobt: c_char, jobp: c_char, m: c_int, n: c_int,
                          a: *mut c_float, lda: c_int, sva: *mut c_float, u: *mut c_float,
                          ldu: c_int, v: *mut c_float, ldv: c_int, stat: *mut c_float,
                          istat: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dgejsv(matrix_layout: c_int, joba: c_char, jobu: c_char, jobv: c_char,
                          jobr: c_char, jobt: c_char, jobp: c_char, m: c_int, n: c_int,
                          a: *mut c_double, lda: c_int, sva: *mut c_double, u: *mut c_double,
                          ldu: c_int, v: *mut c_double, ldv: c_int, stat: *mut c_double,
                          istat: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_cgejsv(matrix_layout: c_int, joba: c_char, jobu: c_char, jobv: c_char,
                          jobr: c_char, jobt: c_char, jobp: c_char, m: c_int, n: c_int,
                          a: *mut c_float_complex, lda: c_int, sva: *mut c_float,
                          u: *mut c_float_complex, ldu: c_int, v: *mut c_float_complex, ldv: c_int,
                          stat: *mut c_float, istat: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zgejsv(matrix_layout: c_int, joba: c_char, jobu: c_char, jobv: c_char,
                          jobr: c_char, jobt: c_char, jobp: c_char, m: c_int, n: c_int,
                          a: *mut c_double_complex, lda: c_int, sva: *mut c_double,
                          u: *mut c_double_complex, ldu: c_int, v: *mut c_double_complex,
                          ldv: c_int, stat: *mut c_double, istat: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_sgelq2(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float, lda: c_int,
                          tau: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgelq2(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double, lda: c_int,
                          tau: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgelq2(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                          lda: c_int, tau: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zgelq2(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                          lda: c_int, tau: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_sgelqf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float, lda: c_int,
                          tau: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgelqf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double, lda: c_int,
                          tau: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgelqf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                          lda: c_int, tau: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zgelqf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                          lda: c_int, tau: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_sgels(matrix_layout: c_int, trans: c_char, m: c_int, n: c_int, nrhs: c_int,
                         a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_dgels(matrix_layout: c_int, trans: c_char, m: c_int, n: c_int, nrhs: c_int,
                         a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_cgels(matrix_layout: c_int, trans: c_char, m: c_int, n: c_int, nrhs: c_int,
                         a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_zgels(matrix_layout: c_int, trans: c_char, m: c_int, n: c_int, nrhs: c_int,
                         a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                         ldb: c_int)
                         -> c_int;

    pub fn LAPACKE_sgelsd(matrix_layout: c_int, m: c_int, n: c_int, nrhs: c_int, a: *mut c_float,
                          lda: c_int, b: *mut c_float, ldb: c_int, s: *mut c_float, rcond: c_float,
                          rank: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dgelsd(matrix_layout: c_int, m: c_int, n: c_int, nrhs: c_int, a: *mut c_double,
                          lda: c_int, b: *mut c_double, ldb: c_int, s: *mut c_double,
                          rcond: c_double, rank: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_cgelsd(matrix_layout: c_int, m: c_int, n: c_int, nrhs: c_int,
                          a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex, ldb: c_int,
                          s: *mut c_float, rcond: c_float, rank: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zgelsd(matrix_layout: c_int, m: c_int, n: c_int, nrhs: c_int,
                          a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                          ldb: c_int, s: *mut c_double, rcond: c_double, rank: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_sgelss(matrix_layout: c_int, m: c_int, n: c_int, nrhs: c_int, a: *mut c_float,
                          lda: c_int, b: *mut c_float, ldb: c_int, s: *mut c_float, rcond: c_float,
                          rank: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dgelss(matrix_layout: c_int, m: c_int, n: c_int, nrhs: c_int, a: *mut c_double,
                          lda: c_int, b: *mut c_double, ldb: c_int, s: *mut c_double,
                          rcond: c_double, rank: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_cgelss(matrix_layout: c_int, m: c_int, n: c_int, nrhs: c_int,
                          a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex, ldb: c_int,
                          s: *mut c_float, rcond: c_float, rank: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zgelss(matrix_layout: c_int, m: c_int, n: c_int, nrhs: c_int,
                          a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                          ldb: c_int, s: *mut c_double, rcond: c_double, rank: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_sgelsy(matrix_layout: c_int, m: c_int, n: c_int, nrhs: c_int, a: *mut c_float,
                          lda: c_int, b: *mut c_float, ldb: c_int, jpvt: *mut c_int,
                          rcond: c_float, rank: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dgelsy(matrix_layout: c_int, m: c_int, n: c_int, nrhs: c_int, a: *mut c_double,
                          lda: c_int, b: *mut c_double, ldb: c_int, jpvt: *mut c_int,
                          rcond: c_double, rank: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_cgelsy(matrix_layout: c_int, m: c_int, n: c_int, nrhs: c_int,
                          a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex, ldb: c_int,
                          jpvt: *mut c_int, rcond: c_float, rank: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zgelsy(matrix_layout: c_int, m: c_int, n: c_int, nrhs: c_int,
                          a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                          ldb: c_int, jpvt: *mut c_int, rcond: c_double, rank: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_sgeqlf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float, lda: c_int,
                          tau: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgeqlf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double, lda: c_int,
                          tau: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgeqlf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                          lda: c_int, tau: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zgeqlf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                          lda: c_int, tau: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_sgeqp3(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float, lda: c_int,
                          jpvt: *mut c_int, tau: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgeqp3(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double, lda: c_int,
                          jpvt: *mut c_int, tau: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgeqp3(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                          lda: c_int, jpvt: *mut c_int, tau: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zgeqp3(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                          lda: c_int, jpvt: *mut c_int, tau: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_sgeqpf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float, lda: c_int,
                          jpvt: *mut c_int, tau: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgeqpf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double, lda: c_int,
                          jpvt: *mut c_int, tau: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgeqpf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                          lda: c_int, jpvt: *mut c_int, tau: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zgeqpf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                          lda: c_int, jpvt: *mut c_int, tau: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_sgeqr2(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float, lda: c_int,
                          tau: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgeqr2(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double, lda: c_int,
                          tau: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgeqr2(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                          lda: c_int, tau: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zgeqr2(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                          lda: c_int, tau: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_sgeqrf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float, lda: c_int,
                          tau: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgeqrf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double, lda: c_int,
                          tau: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgeqrf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                          lda: c_int, tau: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zgeqrf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                          lda: c_int, tau: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_sgeqrfp(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float, lda: c_int,
                           tau: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_dgeqrfp(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double, lda: c_int,
                           tau: *mut c_double)
                           -> c_int;
    pub fn LAPACKE_cgeqrfp(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                           lda: c_int, tau: *mut c_float_complex)
                           -> c_int;
    pub fn LAPACKE_zgeqrfp(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                           lda: c_int, tau: *mut c_double_complex)
                           -> c_int;

    pub fn LAPACKE_sgerfs(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                          a: *const c_float, lda: c_int, af: *const c_float, ldaf: c_int,
                          ipiv: *const c_int, b: *const c_float, ldb: c_int, x: *mut c_float,
                          ldx: c_int, ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgerfs(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                          a: *const c_double, lda: c_int, af: *const c_double, ldaf: c_int,
                          ipiv: *const c_int, b: *const c_double, ldb: c_int, x: *mut c_double,
                          ldx: c_int, ferr: *mut c_double, berr: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgerfs(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                          a: *const c_float_complex, lda: c_int, af: *const c_float_complex,
                          ldaf: c_int, ipiv: *const c_int, b: *const c_float_complex, ldb: c_int,
                          x: *mut c_float_complex, ldx: c_int, ferr: *mut c_float,
                          berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zgerfs(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                          a: *const c_double_complex, lda: c_int, af: *const c_double_complex,
                          ldaf: c_int, ipiv: *const c_int, b: *const c_double_complex, ldb: c_int,
                          x: *mut c_double_complex, ldx: c_int, ferr: *mut c_double,
                          berr: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sgerfsx(matrix_layout: c_int, trans: c_char, equed: c_char, n: c_int,
                           nrhs: c_int, a: *const c_float, lda: c_int, af: *const c_float,
                           ldaf: c_int, ipiv: *const c_int, r: *const c_float, c: *const c_float,
                           b: *const c_float, ldb: c_int, x: *mut c_float, ldx: c_int,
                           rcond: *mut c_float, berr: *mut c_float, n_err_bnds: c_int,
                           err_bnds_norm: *mut c_float, err_bnds_comp: *mut c_float,
                           nparams: c_int, params: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_dgerfsx(matrix_layout: c_int, trans: c_char, equed: c_char, n: c_int,
                           nrhs: c_int, a: *const c_double, lda: c_int, af: *const c_double,
                           ldaf: c_int, ipiv: *const c_int, r: *const c_double, c: *const c_double,
                           b: *const c_double, ldb: c_int, x: *mut c_double, ldx: c_int,
                           rcond: *mut c_double, berr: *mut c_double, n_err_bnds: c_int,
                           err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                           nparams: c_int, params: *mut c_double)
                           -> c_int;
    pub fn LAPACKE_cgerfsx(matrix_layout: c_int, trans: c_char, equed: c_char, n: c_int,
                           nrhs: c_int, a: *const c_float_complex, lda: c_int,
                           af: *const c_float_complex, ldaf: c_int, ipiv: *const c_int,
                           r: *const c_float, c: *const c_float, b: *const c_float_complex,
                           ldb: c_int, x: *mut c_float_complex, ldx: c_int, rcond: *mut c_float,
                           berr: *mut c_float, n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                           err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_zgerfsx(matrix_layout: c_int, trans: c_char, equed: c_char, n: c_int,
                           nrhs: c_int, a: *const c_double_complex, lda: c_int,
                           af: *const c_double_complex, ldaf: c_int, ipiv: *const c_int,
                           r: *const c_double, c: *const c_double, b: *const c_double_complex,
                           ldb: c_int, x: *mut c_double_complex, ldx: c_int, rcond: *mut c_double,
                           berr: *mut c_double, n_err_bnds: c_int, err_bnds_norm: *mut c_double,
                           err_bnds_comp: *mut c_double, nparams: c_int, params: *mut c_double)
                           -> c_int;

    pub fn LAPACKE_sgerqf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float, lda: c_int,
                          tau: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgerqf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double, lda: c_int,
                          tau: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgerqf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                          lda: c_int, tau: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zgerqf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                          lda: c_int, tau: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_sgesdd(matrix_layout: c_int, jobz: c_char, m: c_int, n: c_int, a: *mut c_float,
                          lda: c_int, s: *mut c_float, u: *mut c_float, ldu: c_int,
                          vt: *mut c_float, ldvt: c_int)
                          -> c_int;
    pub fn LAPACKE_dgesdd(matrix_layout: c_int, jobz: c_char, m: c_int, n: c_int, a: *mut c_double,
                          lda: c_int, s: *mut c_double, u: *mut c_double, ldu: c_int,
                          vt: *mut c_double, ldvt: c_int)
                          -> c_int;
    pub fn LAPACKE_cgesdd(matrix_layout: c_int, jobz: c_char, m: c_int, n: c_int,
                          a: *mut c_float_complex, lda: c_int, s: *mut c_float,
                          u: *mut c_float_complex, ldu: c_int, vt: *mut c_float_complex,
                          ldvt: c_int)
                          -> c_int;
    pub fn LAPACKE_zgesdd(matrix_layout: c_int, jobz: c_char, m: c_int, n: c_int,
                          a: *mut c_double_complex, lda: c_int, s: *mut c_double,
                          u: *mut c_double_complex, ldu: c_int, vt: *mut c_double_complex,
                          ldvt: c_int)
                          -> c_int;

    pub fn LAPACKE_sgesv(matrix_layout: c_int, n: c_int, nrhs: c_int, a: *mut c_float, lda: c_int,
                         ipiv: *mut c_int, b: *mut c_float, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_dgesv(matrix_layout: c_int, n: c_int, nrhs: c_int, a: *mut c_double, lda: c_int,
                         ipiv: *mut c_int, b: *mut c_double, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_cgesv(matrix_layout: c_int, n: c_int, nrhs: c_int, a: *mut c_float_complex,
                         lda: c_int, ipiv: *mut c_int, b: *mut c_float_complex, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_zgesv(matrix_layout: c_int, n: c_int, nrhs: c_int, a: *mut c_double_complex,
                         lda: c_int, ipiv: *mut c_int, b: *mut c_double_complex, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_dsgesv(matrix_layout: c_int, n: c_int, nrhs: c_int, a: *mut c_double,
                          lda: c_int, ipiv: *mut c_int, b: *mut c_double, ldb: c_int,
                          x: *mut c_double, ldx: c_int, iter: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zcgesv(matrix_layout: c_int, n: c_int, nrhs: c_int, a: *mut c_double_complex,
                          lda: c_int, ipiv: *mut c_int, b: *mut c_double_complex, ldb: c_int,
                          x: *mut c_double_complex, ldx: c_int, iter: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_sgesvd(matrix_layout: c_int, jobu: c_char, jobvt: c_char, m: c_int, n: c_int,
                          a: *mut c_float, lda: c_int, s: *mut c_float, u: *mut c_float,
                          ldu: c_int, vt: *mut c_float, ldvt: c_int, superb: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgesvd(matrix_layout: c_int, jobu: c_char, jobvt: c_char, m: c_int, n: c_int,
                          a: *mut c_double, lda: c_int, s: *mut c_double, u: *mut c_double,
                          ldu: c_int, vt: *mut c_double, ldvt: c_int, superb: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgesvd(matrix_layout: c_int, jobu: c_char, jobvt: c_char, m: c_int, n: c_int,
                          a: *mut c_float_complex, lda: c_int, s: *mut c_float,
                          u: *mut c_float_complex, ldu: c_int, vt: *mut c_float_complex,
                          ldvt: c_int, superb: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zgesvd(matrix_layout: c_int, jobu: c_char, jobvt: c_char, m: c_int, n: c_int,
                          a: *mut c_double_complex, lda: c_int, s: *mut c_double,
                          u: *mut c_double_complex, ldu: c_int, vt: *mut c_double_complex,
                          ldvt: c_int, superb: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sgesvdx(matrix_layout: c_int, jobu: c_char, jobvt: c_char, range: c_char,
                           m: c_int, n: c_int, a: *mut c_float, lda: c_int, vl: c_int, vu: c_int,
                           il: c_int, iu: c_int, ns: c_int, s: *mut c_float, u: *mut c_float,
                           ldu: c_int, vt: *mut c_float, ldvt: c_int, superb: *mut c_int)
                           -> c_int;
    pub fn LAPACKE_dgesvdx(matrix_layout: c_int, jobu: c_char, jobvt: c_char, range: c_char,
                           m: c_int, n: c_int, a: *mut c_double, lda: c_int, vl: c_int, vu: c_int,
                           il: c_int, iu: c_int, ns: c_int, s: *mut c_double, u: *mut c_double,
                           ldu: c_int, vt: *mut c_double, ldvt: c_int, superb: *mut c_int)
                           -> c_int;
    pub fn LAPACKE_cgesvdx(matrix_layout: c_int, jobu: c_char, jobvt: c_char, range: c_char,
                           m: c_int, n: c_int, a: *mut c_float_complex, lda: c_int, vl: c_int,
                           vu: c_int, il: c_int, iu: c_int, ns: c_int, s: *mut c_float,
                           u: *mut c_float_complex, ldu: c_int, vt: *mut c_float_complex,
                           ldvt: c_int, superb: *mut c_int)
                           -> c_int;
    pub fn LAPACKE_zgesvdx(matrix_layout: c_int, jobu: c_char, jobvt: c_char, range: c_char,
                           m: c_int, n: c_int, a: *mut c_double_complex, lda: c_int, vl: c_int,
                           vu: c_int, il: c_int, iu: c_int, ns: c_int, s: *mut c_double,
                           u: *mut c_double_complex, ldu: c_int, vt: *mut c_double_complex,
                           ldvt: c_int, superb: *mut c_int)
                           -> c_int;

    pub fn LAPACKE_sgesvj(matrix_layout: c_int, joba: c_char, jobu: c_char, jobv: c_char, m: c_int,
                          n: c_int, a: *mut c_float, lda: c_int, sva: *mut c_float, mv: c_int,
                          v: *mut c_float, ldv: c_int, stat: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgesvj(matrix_layout: c_int, joba: c_char, jobu: c_char, jobv: c_char, m: c_int,
                          n: c_int, a: *mut c_double, lda: c_int, sva: *mut c_double, mv: c_int,
                          v: *mut c_double, ldv: c_int, stat: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgesvj(matrix_layout: c_int, joba: c_char, jobu: c_char, jobv: c_char, m: c_int,
                          n: c_int, a: *mut c_float_complex, lda: c_int, sva: *mut c_float,
                          mv: c_int, v: *mut c_float_complex, ldv: c_int, stat: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zgesvj(matrix_layout: c_int, joba: c_char, jobu: c_char, jobv: c_char, m: c_int,
                          n: c_int, a: *mut c_double_complex, lda: c_int, sva: *mut c_double,
                          mv: c_int, v: *mut c_double_complex, ldv: c_int, stat: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sgesvx(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int, nrhs: c_int,
                          a: *mut c_float, lda: c_int, af: *mut c_float, ldaf: c_int,
                          ipiv: *mut c_int, equed: *mut c_char, r: *mut c_float, c: *mut c_float,
                          b: *mut c_float, ldb: c_int, x: *mut c_float, ldx: c_int,
                          rcond: *mut c_float, ferr: *mut c_float, berr: *mut c_float,
                          rpivot: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgesvx(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int, nrhs: c_int,
                          a: *mut c_double, lda: c_int, af: *mut c_double, ldaf: c_int,
                          ipiv: *mut c_int, equed: *mut c_char, r: *mut c_double, c: *mut c_double,
                          b: *mut c_double, ldb: c_int, x: *mut c_double, ldx: c_int,
                          rcond: *mut c_double, ferr: *mut c_double, berr: *mut c_double,
                          rpivot: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgesvx(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int, nrhs: c_int,
                          a: *mut c_float_complex, lda: c_int, af: *mut c_float_complex,
                          ldaf: c_int, ipiv: *mut c_int, equed: *mut c_char, r: *mut c_float,
                          c: *mut c_float, b: *mut c_float_complex, ldb: c_int,
                          x: *mut c_float_complex, ldx: c_int, rcond: *mut c_float,
                          ferr: *mut c_float, berr: *mut c_float, rpivot: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zgesvx(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int, nrhs: c_int,
                          a: *mut c_double_complex, lda: c_int, af: *mut c_double_complex,
                          ldaf: c_int, ipiv: *mut c_int, equed: *mut c_char, r: *mut c_double,
                          c: *mut c_double, b: *mut c_double_complex, ldb: c_int,
                          x: *mut c_double_complex, ldx: c_int, rcond: *mut c_double,
                          ferr: *mut c_double, berr: *mut c_double, rpivot: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sgesvxx(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int,
                           nrhs: c_int, a: *mut c_float, lda: c_int, af: *mut c_float, ldaf: c_int,
                           ipiv: *mut c_int, equed: *mut c_char, r: *mut c_float, c: *mut c_float,
                           b: *mut c_float, ldb: c_int, x: *mut c_float, ldx: c_int,
                           rcond: *mut c_float, rpvgrw: *mut c_float, berr: *mut c_float,
                           n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                           err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_dgesvxx(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int,
                           nrhs: c_int, a: *mut c_double, lda: c_int, af: *mut c_double,
                           ldaf: c_int, ipiv: *mut c_int, equed: *mut c_char, r: *mut c_double,
                           c: *mut c_double, b: *mut c_double, ldb: c_int, x: *mut c_double,
                           ldx: c_int, rcond: *mut c_double, rpvgrw: *mut c_double,
                           berr: *mut c_double, n_err_bnds: c_int, err_bnds_norm: *mut c_double,
                           err_bnds_comp: *mut c_double, nparams: c_int, params: *mut c_double)
                           -> c_int;
    pub fn LAPACKE_cgesvxx(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int,
                           nrhs: c_int, a: *mut c_float_complex, lda: c_int,
                           af: *mut c_float_complex, ldaf: c_int, ipiv: *mut c_int,
                           equed: *mut c_char, r: *mut c_float, c: *mut c_float,
                           b: *mut c_float_complex, ldb: c_int, x: *mut c_float_complex,
                           ldx: c_int, rcond: *mut c_float, rpvgrw: *mut c_float,
                           berr: *mut c_float, n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                           err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_zgesvxx(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int,
                           nrhs: c_int, a: *mut c_double_complex, lda: c_int,
                           af: *mut c_double_complex, ldaf: c_int, ipiv: *mut c_int,
                           equed: *mut c_char, r: *mut c_double, c: *mut c_double,
                           b: *mut c_double_complex, ldb: c_int, x: *mut c_double_complex,
                           ldx: c_int, rcond: *mut c_double, rpvgrw: *mut c_double,
                           berr: *mut c_double, n_err_bnds: c_int, err_bnds_norm: *mut c_double,
                           err_bnds_comp: *mut c_double, nparams: c_int, params: *mut c_double)
                           -> c_int;

    pub fn LAPACKE_sgetf2(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float, lda: c_int,
                          ipiv: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dgetf2(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double, lda: c_int,
                          ipiv: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_cgetf2(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                          lda: c_int, ipiv: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zgetf2(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                          lda: c_int, ipiv: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_sgetrf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float, lda: c_int,
                          ipiv: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dgetrf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double, lda: c_int,
                          ipiv: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_cgetrf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                          lda: c_int, ipiv: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zgetrf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                          lda: c_int, ipiv: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_sgetrf2(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float, lda: c_int,
                           ipiv: *mut c_int)
                           -> c_int;
    pub fn LAPACKE_dgetrf2(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double, lda: c_int,
                           ipiv: *mut c_int)
                           -> c_int;
    pub fn LAPACKE_cgetrf2(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                           lda: c_int, ipiv: *mut c_int)
                           -> c_int;
    pub fn LAPACKE_zgetrf2(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                           lda: c_int, ipiv: *mut c_int)
                           -> c_int;

    pub fn LAPACKE_sgetri(matrix_layout: c_int, n: c_int, a: *mut c_float, lda: c_int,
                          ipiv: *const c_int)
                          -> c_int;
    pub fn LAPACKE_dgetri(matrix_layout: c_int, n: c_int, a: *mut c_double, lda: c_int,
                          ipiv: *const c_int)
                          -> c_int;
    pub fn LAPACKE_cgetri(matrix_layout: c_int, n: c_int, a: *mut c_float_complex, lda: c_int,
                          ipiv: *const c_int)
                          -> c_int;
    pub fn LAPACKE_zgetri(matrix_layout: c_int, n: c_int, a: *mut c_double_complex, lda: c_int,
                          ipiv: *const c_int)
                          -> c_int;

    pub fn LAPACKE_sgetrs(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                          a: *const c_float, lda: c_int, ipiv: *const c_int, b: *mut c_float,
                          ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_dgetrs(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                          a: *const c_double, lda: c_int, ipiv: *const c_int, b: *mut c_double,
                          ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_cgetrs(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                          a: *const c_float_complex, lda: c_int, ipiv: *const c_int,
                          b: *mut c_float_complex, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_zgetrs(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                          a: *const c_double_complex, lda: c_int, ipiv: *const c_int,
                          b: *mut c_double_complex, ldb: c_int)
                          -> c_int;

    pub fn LAPACKE_sggbak(matrix_layout: c_int, job: c_char, side: c_char, n: c_int, ilo: c_int,
                          ihi: c_int, lscale: *const c_float, rscale: *const c_float, m: c_int,
                          v: *mut c_float, ldv: c_int)
                          -> c_int;
    pub fn LAPACKE_dggbak(matrix_layout: c_int, job: c_char, side: c_char, n: c_int, ilo: c_int,
                          ihi: c_int, lscale: *const c_double, rscale: *const c_double, m: c_int,
                          v: *mut c_double, ldv: c_int)
                          -> c_int;
    pub fn LAPACKE_cggbak(matrix_layout: c_int, job: c_char, side: c_char, n: c_int, ilo: c_int,
                          ihi: c_int, lscale: *const c_float, rscale: *const c_float, m: c_int,
                          v: *mut c_float_complex, ldv: c_int)
                          -> c_int;
    pub fn LAPACKE_zggbak(matrix_layout: c_int, job: c_char, side: c_char, n: c_int, ilo: c_int,
                          ihi: c_int, lscale: *const c_double, rscale: *const c_double, m: c_int,
                          v: *mut c_double_complex, ldv: c_int)
                          -> c_int;

    pub fn LAPACKE_sggbal(matrix_layout: c_int, job: c_char, n: c_int, a: *mut c_float, lda: c_int,
                          b: *mut c_float, ldb: c_int, ilo: *mut c_int, ihi: *mut c_int,
                          lscale: *mut c_float, rscale: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dggbal(matrix_layout: c_int, job: c_char, n: c_int, a: *mut c_double,
                          lda: c_int, b: *mut c_double, ldb: c_int, ilo: *mut c_int,
                          ihi: *mut c_int, lscale: *mut c_double, rscale: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cggbal(matrix_layout: c_int, job: c_char, n: c_int, a: *mut c_float_complex,
                          lda: c_int, b: *mut c_float_complex, ldb: c_int, ilo: *mut c_int,
                          ihi: *mut c_int, lscale: *mut c_float, rscale: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zggbal(matrix_layout: c_int, job: c_char, n: c_int, a: *mut c_double_complex,
                          lda: c_int, b: *mut c_double_complex, ldb: c_int, ilo: *mut c_int,
                          ihi: *mut c_int, lscale: *mut c_double, rscale: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sgges(matrix_layout: c_int, jobvsl: c_char, jobvsr: c_char, sort: c_char,
                         selctg: LAPACK_S_SELECT3, n: c_int, a: *mut c_float, lda: c_int,
                         b: *mut c_float, ldb: c_int, sdim: *mut c_int, alphar: *mut c_float,
                         alphai: *mut c_float, beta: *mut c_float, vsl: *mut c_float, ldvsl: c_int,
                         vsr: *mut c_float, ldvsr: c_int)
                         -> c_int;
    pub fn LAPACKE_dgges(matrix_layout: c_int, jobvsl: c_char, jobvsr: c_char, sort: c_char,
                         selctg: LAPACK_D_SELECT3, n: c_int, a: *mut c_double, lda: c_int,
                         b: *mut c_double, ldb: c_int, sdim: *mut c_int, alphar: *mut c_double,
                         alphai: *mut c_double, beta: *mut c_double, vsl: *mut c_double,
                         ldvsl: c_int, vsr: *mut c_double, ldvsr: c_int)
                         -> c_int;
    pub fn LAPACKE_cgges(matrix_layout: c_int, jobvsl: c_char, jobvsr: c_char, sort: c_char,
                         selctg: LAPACK_C_SELECT2, n: c_int, a: *mut c_float_complex, lda: c_int,
                         b: *mut c_float_complex, ldb: c_int, sdim: *mut c_int,
                         alpha: *mut c_float_complex, beta: *mut c_float_complex,
                         vsl: *mut c_float_complex, ldvsl: c_int, vsr: *mut c_float_complex,
                         ldvsr: c_int)
                         -> c_int;
    pub fn LAPACKE_zgges(matrix_layout: c_int, jobvsl: c_char, jobvsr: c_char, sort: c_char,
                         selctg: LAPACK_Z_SELECT2, n: c_int, a: *mut c_double_complex, lda: c_int,
                         b: *mut c_double_complex, ldb: c_int, sdim: *mut c_int,
                         alpha: *mut c_double_complex, beta: *mut c_double_complex,
                         vsl: *mut c_double_complex, ldvsl: c_int, vsr: *mut c_double_complex,
                         ldvsr: c_int)
                         -> c_int;

    pub fn LAPACKE_sgges3(matrix_layout: c_int, jobvsl: c_char, jobvsr: c_char, sort: c_char,
                          selctg: LAPACK_S_SELECT3, n: c_int, a: *mut c_float, lda: c_int,
                          b: *mut c_float, ldb: c_int, sdim: *mut c_int, alphar: *mut c_float,
                          alphai: *mut c_float, beta: *mut c_float, vsl: *mut c_float,
                          ldvsl: c_int, vsr: *mut c_float, ldvsr: c_int)
                          -> c_int;
    pub fn LAPACKE_dgges3(matrix_layout: c_int, jobvsl: c_char, jobvsr: c_char, sort: c_char,
                          selctg: LAPACK_D_SELECT3, n: c_int, a: *mut c_double, lda: c_int,
                          b: *mut c_double, ldb: c_int, sdim: *mut c_int, alphar: *mut c_double,
                          alphai: *mut c_double, beta: *mut c_double, vsl: *mut c_double,
                          ldvsl: c_int, vsr: *mut c_double, ldvsr: c_int)
                          -> c_int;
    pub fn LAPACKE_cgges3(matrix_layout: c_int, jobvsl: c_char, jobvsr: c_char, sort: c_char,
                          selctg: LAPACK_C_SELECT2, n: c_int, a: *mut c_float_complex, lda: c_int,
                          b: *mut c_float_complex, ldb: c_int, sdim: *mut c_int,
                          alpha: *mut c_float_complex, beta: *mut c_float_complex,
                          vsl: *mut c_float_complex, ldvsl: c_int, vsr: *mut c_float_complex,
                          ldvsr: c_int)
                          -> c_int;
    pub fn LAPACKE_zgges3(matrix_layout: c_int, jobvsl: c_char, jobvsr: c_char, sort: c_char,
                          selctg: LAPACK_Z_SELECT2, n: c_int, a: *mut c_double_complex, lda: c_int,
                          b: *mut c_double_complex, ldb: c_int, sdim: *mut c_int,
                          alpha: *mut c_double_complex, beta: *mut c_double_complex,
                          vsl: *mut c_double_complex, ldvsl: c_int, vsr: *mut c_double_complex,
                          ldvsr: c_int)
                          -> c_int;

    pub fn LAPACKE_sggesx(matrix_layout: c_int, jobvsl: c_char, jobvsr: c_char, sort: c_char,
                          selctg: LAPACK_S_SELECT3, sense: c_char, n: c_int, a: *mut c_float,
                          lda: c_int, b: *mut c_float, ldb: c_int, sdim: *mut c_int,
                          alphar: *mut c_float, alphai: *mut c_float, beta: *mut c_float,
                          vsl: *mut c_float, ldvsl: c_int, vsr: *mut c_float, ldvsr: c_int,
                          rconde: *mut c_float, rcondv: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dggesx(matrix_layout: c_int, jobvsl: c_char, jobvsr: c_char, sort: c_char,
                          selctg: LAPACK_D_SELECT3, sense: c_char, n: c_int, a: *mut c_double,
                          lda: c_int, b: *mut c_double, ldb: c_int, sdim: *mut c_int,
                          alphar: *mut c_double, alphai: *mut c_double, beta: *mut c_double,
                          vsl: *mut c_double, ldvsl: c_int, vsr: *mut c_double, ldvsr: c_int,
                          rconde: *mut c_double, rcondv: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cggesx(matrix_layout: c_int, jobvsl: c_char, jobvsr: c_char, sort: c_char,
                          selctg: LAPACK_C_SELECT2, sense: c_char, n: c_int,
                          a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex, ldb: c_int,
                          sdim: *mut c_int, alpha: *mut c_float_complex,
                          beta: *mut c_float_complex, vsl: *mut c_float_complex, ldvsl: c_int,
                          vsr: *mut c_float_complex, ldvsr: c_int, rconde: *mut c_float,
                          rcondv: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zggesx(matrix_layout: c_int, jobvsl: c_char, jobvsr: c_char, sort: c_char,
                          selctg: LAPACK_Z_SELECT2, sense: c_char, n: c_int,
                          a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                          ldb: c_int, sdim: *mut c_int, alpha: *mut c_double_complex,
                          beta: *mut c_double_complex, vsl: *mut c_double_complex, ldvsl: c_int,
                          vsr: *mut c_double_complex, ldvsr: c_int, rconde: *mut c_double,
                          rcondv: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sggev(matrix_layout: c_int, jobvl: c_char, jobvr: c_char, n: c_int,
                         a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int,
                         alphar: *mut c_float, alphai: *mut c_float, beta: *mut c_float,
                         vl: *mut c_float, ldvl: c_int, vr: *mut c_float, ldvr: c_int)
                         -> c_int;
    pub fn LAPACKE_dggev(matrix_layout: c_int, jobvl: c_char, jobvr: c_char, n: c_int,
                         a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int,
                         alphar: *mut c_double, alphai: *mut c_double, beta: *mut c_double,
                         vl: *mut c_double, ldvl: c_int, vr: *mut c_double, ldvr: c_int)
                         -> c_int;
    pub fn LAPACKE_cggev(matrix_layout: c_int, jobvl: c_char, jobvr: c_char, n: c_int,
                         a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex, ldb: c_int,
                         alpha: *mut c_float_complex, beta: *mut c_float_complex,
                         vl: *mut c_float_complex, ldvl: c_int, vr: *mut c_float_complex,
                         ldvr: c_int)
                         -> c_int;
    pub fn LAPACKE_zggev(matrix_layout: c_int, jobvl: c_char, jobvr: c_char, n: c_int,
                         a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                         ldb: c_int, alpha: *mut c_double_complex, beta: *mut c_double_complex,
                         vl: *mut c_double_complex, ldvl: c_int, vr: *mut c_double_complex,
                         ldvr: c_int)
                         -> c_int;

    pub fn LAPACKE_sggev3(matrix_layout: c_int, jobvl: c_char, jobvr: c_char, n: c_int,
                          a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int,
                          alphar: *mut c_float, alphai: *mut c_float, beta: *mut c_float,
                          vl: *mut c_float, ldvl: c_int, vr: *mut c_float, ldvr: c_int)
                          -> c_int;
    pub fn LAPACKE_dggev3(matrix_layout: c_int, jobvl: c_char, jobvr: c_char, n: c_int,
                          a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int,
                          alphar: *mut c_double, alphai: *mut c_double, beta: *mut c_double,
                          vl: *mut c_double, ldvl: c_int, vr: *mut c_double, ldvr: c_int)
                          -> c_int;
    pub fn LAPACKE_cggev3(matrix_layout: c_int, jobvl: c_char, jobvr: c_char, n: c_int,
                          a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex, ldb: c_int,
                          alpha: *mut c_float_complex, beta: *mut c_float_complex,
                          vl: *mut c_float_complex, ldvl: c_int, vr: *mut c_float_complex,
                          ldvr: c_int)
                          -> c_int;
    pub fn LAPACKE_zggev3(matrix_layout: c_int, jobvl: c_char, jobvr: c_char, n: c_int,
                          a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                          ldb: c_int, alpha: *mut c_double_complex, beta: *mut c_double_complex,
                          vl: *mut c_double_complex, ldvl: c_int, vr: *mut c_double_complex,
                          ldvr: c_int)
                          -> c_int;

    pub fn LAPACKE_sggevx(matrix_layout: c_int, balanc: c_char, jobvl: c_char, jobvr: c_char,
                          sense: c_char, n: c_int, a: *mut c_float, lda: c_int, b: *mut c_float,
                          ldb: c_int, alphar: *mut c_float, alphai: *mut c_float,
                          beta: *mut c_float, vl: *mut c_float, ldvl: c_int, vr: *mut c_float,
                          ldvr: c_int, ilo: *mut c_int, ihi: *mut c_int, lscale: *mut c_float,
                          rscale: *mut c_float, abnrm: *mut c_float, bbnrm: *mut c_float,
                          rconde: *mut c_float, rcondv: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dggevx(matrix_layout: c_int, balanc: c_char, jobvl: c_char, jobvr: c_char,
                          sense: c_char, n: c_int, a: *mut c_double, lda: c_int, b: *mut c_double,
                          ldb: c_int, alphar: *mut c_double, alphai: *mut c_double,
                          beta: *mut c_double, vl: *mut c_double, ldvl: c_int, vr: *mut c_double,
                          ldvr: c_int, ilo: *mut c_int, ihi: *mut c_int, lscale: *mut c_double,
                          rscale: *mut c_double, abnrm: *mut c_double, bbnrm: *mut c_double,
                          rconde: *mut c_double, rcondv: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cggevx(matrix_layout: c_int, balanc: c_char, jobvl: c_char, jobvr: c_char,
                          sense: c_char, n: c_int, a: *mut c_float_complex, lda: c_int,
                          b: *mut c_float_complex, ldb: c_int, alpha: *mut c_float_complex,
                          beta: *mut c_float_complex, vl: *mut c_float_complex, ldvl: c_int,
                          vr: *mut c_float_complex, ldvr: c_int, ilo: *mut c_int, ihi: *mut c_int,
                          lscale: *mut c_float, rscale: *mut c_float, abnrm: *mut c_float,
                          bbnrm: *mut c_float, rconde: *mut c_float, rcondv: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zggevx(matrix_layout: c_int, balanc: c_char, jobvl: c_char, jobvr: c_char,
                          sense: c_char, n: c_int, a: *mut c_double_complex, lda: c_int,
                          b: *mut c_double_complex, ldb: c_int, alpha: *mut c_double_complex,
                          beta: *mut c_double_complex, vl: *mut c_double_complex, ldvl: c_int,
                          vr: *mut c_double_complex, ldvr: c_int, ilo: *mut c_int, ihi: *mut c_int,
                          lscale: *mut c_double, rscale: *mut c_double, abnrm: *mut c_double,
                          bbnrm: *mut c_double, rconde: *mut c_double, rcondv: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sggglm(matrix_layout: c_int, n: c_int, m: c_int, p: c_int, a: *mut c_float,
                          lda: c_int, b: *mut c_float, ldb: c_int, d: *mut c_float,
                          x: *mut c_float, y: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dggglm(matrix_layout: c_int, n: c_int, m: c_int, p: c_int, a: *mut c_double,
                          lda: c_int, b: *mut c_double, ldb: c_int, d: *mut c_double,
                          x: *mut c_double, y: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cggglm(matrix_layout: c_int, n: c_int, m: c_int, p: c_int,
                          a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex, ldb: c_int,
                          d: *mut c_float_complex, x: *mut c_float_complex,
                          y: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zggglm(matrix_layout: c_int, n: c_int, m: c_int, p: c_int,
                          a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                          ldb: c_int, d: *mut c_double_complex, x: *mut c_double_complex,
                          y: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_sgghrd(matrix_layout: c_int, compq: c_char, compz: c_char, n: c_int, ilo: c_int,
                          ihi: c_int, a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int,
                          q: *mut c_float, ldq: c_int, z: *mut c_float, ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_dgghrd(matrix_layout: c_int, compq: c_char, compz: c_char, n: c_int, ilo: c_int,
                          ihi: c_int, a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int,
                          q: *mut c_double, ldq: c_int, z: *mut c_double, ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_cgghrd(matrix_layout: c_int, compq: c_char, compz: c_char, n: c_int, ilo: c_int,
                          ihi: c_int, a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex,
                          ldb: c_int, q: *mut c_float_complex, ldq: c_int, z: *mut c_float_complex,
                          ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_zgghrd(matrix_layout: c_int, compq: c_char, compz: c_char, n: c_int, ilo: c_int,
                          ihi: c_int, a: *mut c_double_complex, lda: c_int,
                          b: *mut c_double_complex, ldb: c_int, q: *mut c_double_complex,
                          ldq: c_int, z: *mut c_double_complex, ldz: c_int)
                          -> c_int;

    pub fn LAPACKE_sgghd3(matrix_layout: c_int, compq: c_char, compz: c_char, n: c_int, ilo: c_int,
                          ihi: c_int, a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int,
                          q: *mut c_float, ldq: c_int, z: *mut c_float, ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_dgghd3(matrix_layout: c_int, compq: c_char, compz: c_char, n: c_int, ilo: c_int,
                          ihi: c_int, a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int,
                          q: *mut c_double, ldq: c_int, z: *mut c_double, ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_cgghd3(matrix_layout: c_int, compq: c_char, compz: c_char, n: c_int, ilo: c_int,
                          ihi: c_int, a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex,
                          ldb: c_int, q: *mut c_float_complex, ldq: c_int, z: *mut c_float_complex,
                          ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_zgghd3(matrix_layout: c_int, compq: c_char, compz: c_char, n: c_int, ilo: c_int,
                          ihi: c_int, a: *mut c_double_complex, lda: c_int,
                          b: *mut c_double_complex, ldb: c_int, q: *mut c_double_complex,
                          ldq: c_int, z: *mut c_double_complex, ldz: c_int)
                          -> c_int;

    pub fn LAPACKE_sgglse(matrix_layout: c_int, m: c_int, n: c_int, p: c_int, a: *mut c_float,
                          lda: c_int, b: *mut c_float, ldb: c_int, c: *mut c_float,
                          d: *mut c_float, x: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgglse(matrix_layout: c_int, m: c_int, n: c_int, p: c_int, a: *mut c_double,
                          lda: c_int, b: *mut c_double, ldb: c_int, c: *mut c_double,
                          d: *mut c_double, x: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgglse(matrix_layout: c_int, m: c_int, n: c_int, p: c_int,
                          a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex, ldb: c_int,
                          c: *mut c_float_complex, d: *mut c_float_complex,
                          x: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zgglse(matrix_layout: c_int, m: c_int, n: c_int, p: c_int,
                          a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                          ldb: c_int, c: *mut c_double_complex, d: *mut c_double_complex,
                          x: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_sggqrf(matrix_layout: c_int, n: c_int, m: c_int, p: c_int, a: *mut c_float,
                          lda: c_int, taua: *mut c_float, b: *mut c_float, ldb: c_int,
                          taub: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dggqrf(matrix_layout: c_int, n: c_int, m: c_int, p: c_int, a: *mut c_double,
                          lda: c_int, taua: *mut c_double, b: *mut c_double, ldb: c_int,
                          taub: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cggqrf(matrix_layout: c_int, n: c_int, m: c_int, p: c_int,
                          a: *mut c_float_complex, lda: c_int, taua: *mut c_float_complex,
                          b: *mut c_float_complex, ldb: c_int, taub: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zggqrf(matrix_layout: c_int, n: c_int, m: c_int, p: c_int,
                          a: *mut c_double_complex, lda: c_int, taua: *mut c_double_complex,
                          b: *mut c_double_complex, ldb: c_int, taub: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_sggrqf(matrix_layout: c_int, m: c_int, p: c_int, n: c_int, a: *mut c_float,
                          lda: c_int, taua: *mut c_float, b: *mut c_float, ldb: c_int,
                          taub: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dggrqf(matrix_layout: c_int, m: c_int, p: c_int, n: c_int, a: *mut c_double,
                          lda: c_int, taua: *mut c_double, b: *mut c_double, ldb: c_int,
                          taub: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cggrqf(matrix_layout: c_int, m: c_int, p: c_int, n: c_int,
                          a: *mut c_float_complex, lda: c_int, taua: *mut c_float_complex,
                          b: *mut c_float_complex, ldb: c_int, taub: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zggrqf(matrix_layout: c_int, m: c_int, p: c_int, n: c_int,
                          a: *mut c_double_complex, lda: c_int, taua: *mut c_double_complex,
                          b: *mut c_double_complex, ldb: c_int, taub: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_sggsvd(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char, m: c_int,
                          n: c_int, p: c_int, k: *mut c_int, l: *mut c_int, a: *mut c_float,
                          lda: c_int, b: *mut c_float, ldb: c_int, alpha: *mut c_float,
                          beta: *mut c_float, u: *mut c_float, ldu: c_int, v: *mut c_float,
                          ldv: c_int, q: *mut c_float, ldq: c_int, iwork: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dggsvd(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char, m: c_int,
                          n: c_int, p: c_int, k: *mut c_int, l: *mut c_int, a: *mut c_double,
                          lda: c_int, b: *mut c_double, ldb: c_int, alpha: *mut c_double,
                          beta: *mut c_double, u: *mut c_double, ldu: c_int, v: *mut c_double,
                          ldv: c_int, q: *mut c_double, ldq: c_int, iwork: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_cggsvd(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char, m: c_int,
                          n: c_int, p: c_int, k: *mut c_int, l: *mut c_int,
                          a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex, ldb: c_int,
                          alpha: *mut c_float, beta: *mut c_float, u: *mut c_float_complex,
                          ldu: c_int, v: *mut c_float_complex, ldv: c_int, q: *mut c_float_complex,
                          ldq: c_int, iwork: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zggsvd(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char, m: c_int,
                          n: c_int, p: c_int, k: *mut c_int, l: *mut c_int,
                          a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                          ldb: c_int, alpha: *mut c_double, beta: *mut c_double,
                          u: *mut c_double_complex, ldu: c_int, v: *mut c_double_complex,
                          ldv: c_int, q: *mut c_double_complex, ldq: c_int, iwork: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_sggsvd3(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                           m: c_int, n: c_int, p: c_int, k: *mut c_int, l: *mut c_int,
                           a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int,
                           alpha: *mut c_float, beta: *mut c_float, u: *mut c_float, ldu: c_int,
                           v: *mut c_float, ldv: c_int, q: *mut c_float, ldq: c_int,
                           iwork: *mut c_int)
                           -> c_int;
    pub fn LAPACKE_dggsvd3(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                           m: c_int, n: c_int, p: c_int, k: *mut c_int, l: *mut c_int,
                           a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int,
                           alpha: *mut c_double, beta: *mut c_double, u: *mut c_double, ldu: c_int,
                           v: *mut c_double, ldv: c_int, q: *mut c_double, ldq: c_int,
                           iwork: *mut c_int)
                           -> c_int;
    pub fn LAPACKE_cggsvd3(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                           m: c_int, n: c_int, p: c_int, k: *mut c_int, l: *mut c_int,
                           a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex,
                           ldb: c_int, alpha: *mut c_float, beta: *mut c_float,
                           u: *mut c_float_complex, ldu: c_int, v: *mut c_float_complex,
                           ldv: c_int, q: *mut c_float_complex, ldq: c_int, iwork: *mut c_int)
                           -> c_int;
    pub fn LAPACKE_zggsvd3(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                           m: c_int, n: c_int, p: c_int, k: *mut c_int, l: *mut c_int,
                           a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                           ldb: c_int, alpha: *mut c_double, beta: *mut c_double,
                           u: *mut c_double_complex, ldu: c_int, v: *mut c_double_complex,
                           ldv: c_int, q: *mut c_double_complex, ldq: c_int, iwork: *mut c_int)
                           -> c_int;

    pub fn LAPACKE_sggsvp(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char, m: c_int,
                          p: c_int, n: c_int, a: *mut c_float, lda: c_int, b: *mut c_float,
                          ldb: c_int, tola: c_float, tolb: c_float, k: *mut c_int, l: *mut c_int,
                          u: *mut c_float, ldu: c_int, v: *mut c_float, ldv: c_int,
                          q: *mut c_float, ldq: c_int)
                          -> c_int;
    pub fn LAPACKE_dggsvp(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char, m: c_int,
                          p: c_int, n: c_int, a: *mut c_double, lda: c_int, b: *mut c_double,
                          ldb: c_int, tola: c_double, tolb: c_double, k: *mut c_int, l: *mut c_int,
                          u: *mut c_double, ldu: c_int, v: *mut c_double, ldv: c_int,
                          q: *mut c_double, ldq: c_int)
                          -> c_int;
    pub fn LAPACKE_cggsvp(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char, m: c_int,
                          p: c_int, n: c_int, a: *mut c_float_complex, lda: c_int,
                          b: *mut c_float_complex, ldb: c_int, tola: c_float, tolb: c_float,
                          k: *mut c_int, l: *mut c_int, u: *mut c_float_complex, ldu: c_int,
                          v: *mut c_float_complex, ldv: c_int, q: *mut c_float_complex, ldq: c_int)
                          -> c_int;
    pub fn LAPACKE_zggsvp(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char, m: c_int,
                          p: c_int, n: c_int, a: *mut c_double_complex, lda: c_int,
                          b: *mut c_double_complex, ldb: c_int, tola: c_double, tolb: c_double,
                          k: *mut c_int, l: *mut c_int, u: *mut c_double_complex, ldu: c_int,
                          v: *mut c_double_complex, ldv: c_int, q: *mut c_double_complex,
                          ldq: c_int)
                          -> c_int;

    pub fn LAPACKE_sggsvp3(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                           m: c_int, p: c_int, n: c_int, a: *mut c_float, lda: c_int,
                           b: *mut c_float, ldb: c_int, tola: c_float, tolb: c_float,
                           k: *mut c_int, l: *mut c_int, u: *mut c_float, ldu: c_int,
                           v: *mut c_float, ldv: c_int, q: *mut c_float, ldq: c_int)
                           -> c_int;
    pub fn LAPACKE_dggsvp3(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                           m: c_int, p: c_int, n: c_int, a: *mut c_double, lda: c_int,
                           b: *mut c_double, ldb: c_int, tola: c_double, tolb: c_double,
                           k: *mut c_int, l: *mut c_int, u: *mut c_double, ldu: c_int,
                           v: *mut c_double, ldv: c_int, q: *mut c_double, ldq: c_int)
                           -> c_int;
    pub fn LAPACKE_cggsvp3(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                           m: c_int, p: c_int, n: c_int, a: *mut c_float_complex, lda: c_int,
                           b: *mut c_float_complex, ldb: c_int, tola: c_float, tolb: c_float,
                           k: *mut c_int, l: *mut c_int, u: *mut c_float_complex, ldu: c_int,
                           v: *mut c_float_complex, ldv: c_int, q: *mut c_float_complex,
                           ldq: c_int)
                           -> c_int;
    pub fn LAPACKE_zggsvp3(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                           m: c_int, p: c_int, n: c_int, a: *mut c_double_complex, lda: c_int,
                           b: *mut c_double_complex, ldb: c_int, tola: c_double, tolb: c_double,
                           k: *mut c_int, l: *mut c_int, u: *mut c_double_complex, ldu: c_int,
                           v: *mut c_double_complex, ldv: c_int, q: *mut c_double_complex,
                           ldq: c_int)
                           -> c_int;

    pub fn LAPACKE_sgtcon(norm: c_char, n: c_int, dl: *const c_float, d: *const c_float,
                          du: *const c_float, du2: *const c_float, ipiv: *const c_int,
                          anorm: c_float, rcond: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgtcon(norm: c_char, n: c_int, dl: *const c_double, d: *const c_double,
                          du: *const c_double, du2: *const c_double, ipiv: *const c_int,
                          anorm: c_double, rcond: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgtcon(norm: c_char, n: c_int, dl: *const c_float_complex,
                          d: *const c_float_complex, du: *const c_float_complex,
                          du2: *const c_float_complex, ipiv: *const c_int, anorm: c_float,
                          rcond: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zgtcon(norm: c_char, n: c_int, dl: *const c_double_complex,
                          d: *const c_double_complex, du: *const c_double_complex,
                          du2: *const c_double_complex, ipiv: *const c_int, anorm: c_double,
                          rcond: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sgtrfs(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                          dl: *const c_float, d: *const c_float, du: *const c_float,
                          dlf: *const c_float, df: *const c_float, duf: *const c_float,
                          du2: *const c_float, ipiv: *const c_int, b: *const c_float, ldb: c_int,
                          x: *mut c_float, ldx: c_int, ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgtrfs(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                          dl: *const c_double, d: *const c_double, du: *const c_double,
                          dlf: *const c_double, df: *const c_double, duf: *const c_double,
                          du2: *const c_double, ipiv: *const c_int, b: *const c_double, ldb: c_int,
                          x: *mut c_double, ldx: c_int, ferr: *mut c_double, berr: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgtrfs(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                          dl: *const c_float_complex, d: *const c_float_complex,
                          du: *const c_float_complex, dlf: *const c_float_complex,
                          df: *const c_float_complex, duf: *const c_float_complex,
                          du2: *const c_float_complex, ipiv: *const c_int,
                          b: *const c_float_complex, ldb: c_int, x: *mut c_float_complex,
                          ldx: c_int, ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zgtrfs(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                          dl: *const c_double_complex, d: *const c_double_complex,
                          du: *const c_double_complex, dlf: *const c_double_complex,
                          df: *const c_double_complex, duf: *const c_double_complex,
                          du2: *const c_double_complex, ipiv: *const c_int,
                          b: *const c_double_complex, ldb: c_int, x: *mut c_double_complex,
                          ldx: c_int, ferr: *mut c_double, berr: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sgtsv(matrix_layout: c_int, n: c_int, nrhs: c_int, dl: *mut c_float,
                         d: *mut c_float, du: *mut c_float, b: *mut c_float, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_dgtsv(matrix_layout: c_int, n: c_int, nrhs: c_int, dl: *mut c_double,
                         d: *mut c_double, du: *mut c_double, b: *mut c_double, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_cgtsv(matrix_layout: c_int, n: c_int, nrhs: c_int, dl: *mut c_float_complex,
                         d: *mut c_float_complex, du: *mut c_float_complex,
                         b: *mut c_float_complex, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_zgtsv(matrix_layout: c_int, n: c_int, nrhs: c_int, dl: *mut c_double_complex,
                         d: *mut c_double_complex, du: *mut c_double_complex,
                         b: *mut c_double_complex, ldb: c_int)
                         -> c_int;

    pub fn LAPACKE_sgtsvx(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int, nrhs: c_int,
                          dl: *const c_float, d: *const c_float, du: *const c_float,
                          dlf: *mut c_float, df: *mut c_float, duf: *mut c_float,
                          du2: *mut c_float, ipiv: *mut c_int, b: *const c_float, ldb: c_int,
                          x: *mut c_float, ldx: c_int, rcond: *mut c_float, ferr: *mut c_float,
                          berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dgtsvx(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int, nrhs: c_int,
                          dl: *const c_double, d: *const c_double, du: *const c_double,
                          dlf: *mut c_double, df: *mut c_double, duf: *mut c_double,
                          du2: *mut c_double, ipiv: *mut c_int, b: *const c_double, ldb: c_int,
                          x: *mut c_double, ldx: c_int, rcond: *mut c_double, ferr: *mut c_double,
                          berr: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cgtsvx(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int, nrhs: c_int,
                          dl: *const c_float_complex, d: *const c_float_complex,
                          du: *const c_float_complex, dlf: *mut c_float_complex,
                          df: *mut c_float_complex, duf: *mut c_float_complex,
                          du2: *mut c_float_complex, ipiv: *mut c_int, b: *const c_float_complex,
                          ldb: c_int, x: *mut c_float_complex, ldx: c_int, rcond: *mut c_float,
                          ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zgtsvx(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int, nrhs: c_int,
                          dl: *const c_double_complex, d: *const c_double_complex,
                          du: *const c_double_complex, dlf: *mut c_double_complex,
                          df: *mut c_double_complex, duf: *mut c_double_complex,
                          du2: *mut c_double_complex, ipiv: *mut c_int, b: *const c_double_complex,
                          ldb: c_int, x: *mut c_double_complex, ldx: c_int, rcond: *mut c_double,
                          ferr: *mut c_double, berr: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sgttrf(n: c_int, dl: *mut c_float, d: *mut c_float, du: *mut c_float,
                          du2: *mut c_float, ipiv: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dgttrf(n: c_int, dl: *mut c_double, d: *mut c_double, du: *mut c_double,
                          du2: *mut c_double, ipiv: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_cgttrf(n: c_int, dl: *mut c_float_complex, d: *mut c_float_complex,
                          du: *mut c_float_complex, du2: *mut c_float_complex, ipiv: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zgttrf(n: c_int, dl: *mut c_double_complex, d: *mut c_double_complex,
                          du: *mut c_double_complex, du2: *mut c_double_complex, ipiv: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_sgttrs(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                          dl: *const c_float, d: *const c_float, du: *const c_float,
                          du2: *const c_float, ipiv: *const c_int, b: *mut c_float, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_dgttrs(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                          dl: *const c_double, d: *const c_double, du: *const c_double,
                          du2: *const c_double, ipiv: *const c_int, b: *mut c_double, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_cgttrs(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                          dl: *const c_float_complex, d: *const c_float_complex,
                          du: *const c_float_complex, du2: *const c_float_complex,
                          ipiv: *const c_int, b: *mut c_float_complex, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_zgttrs(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                          dl: *const c_double_complex, d: *const c_double_complex,
                          du: *const c_double_complex, du2: *const c_double_complex,
                          ipiv: *const c_int, b: *mut c_double_complex, ldb: c_int)
                          -> c_int;

    pub fn LAPACKE_chbev(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int, kd: c_int,
                         ab: *mut c_float_complex, ldab: c_int, w: *mut c_float,
                         z: *mut c_float_complex, ldz: c_int)
                         -> c_int;
    pub fn LAPACKE_zhbev(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int, kd: c_int,
                         ab: *mut c_double_complex, ldab: c_int, w: *mut c_double,
                         z: *mut c_double_complex, ldz: c_int)
                         -> c_int;

    pub fn LAPACKE_chbevd(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int, kd: c_int,
                          ab: *mut c_float_complex, ldab: c_int, w: *mut c_float,
                          z: *mut c_float_complex, ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_zhbevd(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int, kd: c_int,
                          ab: *mut c_double_complex, ldab: c_int, w: *mut c_double,
                          z: *mut c_double_complex, ldz: c_int)
                          -> c_int;

    pub fn LAPACKE_chbevx(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                          n: c_int, kd: c_int, ab: *mut c_float_complex, ldab: c_int,
                          q: *mut c_float_complex, ldq: c_int, vl: c_float, vu: c_float, il: c_int,
                          iu: c_int, abstol: c_float, m: *mut c_int, w: *mut c_float,
                          z: *mut c_float_complex, ldz: c_int, ifail: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zhbevx(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                          n: c_int, kd: c_int, ab: *mut c_double_complex, ldab: c_int,
                          q: *mut c_double_complex, ldq: c_int, vl: c_double, vu: c_double,
                          il: c_int, iu: c_int, abstol: c_double, m: *mut c_int, w: *mut c_double,
                          z: *mut c_double_complex, ldz: c_int, ifail: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_chbgst(matrix_layout: c_int, vect: c_char, uplo: c_char, n: c_int, ka: c_int,
                          kb: c_int, ab: *mut c_float_complex, ldab: c_int,
                          bb: *const c_float_complex, ldbb: c_int, x: *mut c_float_complex,
                          ldx: c_int)
                          -> c_int;
    pub fn LAPACKE_zhbgst(matrix_layout: c_int, vect: c_char, uplo: c_char, n: c_int, ka: c_int,
                          kb: c_int, ab: *mut c_double_complex, ldab: c_int,
                          bb: *const c_double_complex, ldbb: c_int, x: *mut c_double_complex,
                          ldx: c_int)
                          -> c_int;

    pub fn LAPACKE_chbgv(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int, ka: c_int,
                         kb: c_int, ab: *mut c_float_complex, ldab: c_int,
                         bb: *mut c_float_complex, ldbb: c_int, w: *mut c_float,
                         z: *mut c_float_complex, ldz: c_int)
                         -> c_int;
    pub fn LAPACKE_zhbgv(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int, ka: c_int,
                         kb: c_int, ab: *mut c_double_complex, ldab: c_int,
                         bb: *mut c_double_complex, ldbb: c_int, w: *mut c_double,
                         z: *mut c_double_complex, ldz: c_int)
                         -> c_int;

    pub fn LAPACKE_chbgvd(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int, ka: c_int,
                          kb: c_int, ab: *mut c_float_complex, ldab: c_int,
                          bb: *mut c_float_complex, ldbb: c_int, w: *mut c_float,
                          z: *mut c_float_complex, ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_zhbgvd(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int, ka: c_int,
                          kb: c_int, ab: *mut c_double_complex, ldab: c_int,
                          bb: *mut c_double_complex, ldbb: c_int, w: *mut c_double,
                          z: *mut c_double_complex, ldz: c_int)
                          -> c_int;

    pub fn LAPACKE_chbgvx(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                          n: c_int, ka: c_int, kb: c_int, ab: *mut c_float_complex, ldab: c_int,
                          bb: *mut c_float_complex, ldbb: c_int, q: *mut c_float_complex,
                          ldq: c_int, vl: c_float, vu: c_float, il: c_int, iu: c_int,
                          abstol: c_float, m: *mut c_int, w: *mut c_float, z: *mut c_float_complex,
                          ldz: c_int, ifail: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zhbgvx(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                          n: c_int, ka: c_int, kb: c_int, ab: *mut c_double_complex, ldab: c_int,
                          bb: *mut c_double_complex, ldbb: c_int, q: *mut c_double_complex,
                          ldq: c_int, vl: c_double, vu: c_double, il: c_int, iu: c_int,
                          abstol: c_double, m: *mut c_int, w: *mut c_double,
                          z: *mut c_double_complex, ldz: c_int, ifail: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_chbtrd(matrix_layout: c_int, vect: c_char, uplo: c_char, n: c_int, kd: c_int,
                          ab: *mut c_float_complex, ldab: c_int, d: *mut c_float, e: *mut c_float,
                          q: *mut c_float_complex, ldq: c_int)
                          -> c_int;
    pub fn LAPACKE_zhbtrd(matrix_layout: c_int, vect: c_char, uplo: c_char, n: c_int, kd: c_int,
                          ab: *mut c_double_complex, ldab: c_int, d: *mut c_double,
                          e: *mut c_double, q: *mut c_double_complex, ldq: c_int)
                          -> c_int;

    pub fn LAPACKE_checon(matrix_layout: c_int, uplo: c_char, n: c_int, a: *const c_float_complex,
                          lda: c_int, ipiv: *const c_int, anorm: c_float, rcond: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zhecon(matrix_layout: c_int, uplo: c_char, n: c_int, a: *const c_double_complex,
                          lda: c_int, ipiv: *const c_int, anorm: c_double, rcond: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_cheequb(matrix_layout: c_int, uplo: c_char, n: c_int, a: *const c_float_complex,
                           lda: c_int, s: *mut c_float, scond: *mut c_float, amax: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_zheequb(matrix_layout: c_int, uplo: c_char, n: c_int,
                           a: *const c_double_complex, lda: c_int, s: *mut c_double,
                           scond: *mut c_double, amax: *mut c_double)
                           -> c_int;

    pub fn LAPACKE_cheev(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                         a: *mut c_float_complex, lda: c_int, w: *mut c_float)
                         -> c_int;
    pub fn LAPACKE_zheev(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                         a: *mut c_double_complex, lda: c_int, w: *mut c_double)
                         -> c_int;

    pub fn LAPACKE_cheevd(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                          a: *mut c_float_complex, lda: c_int, w: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zheevd(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                          a: *mut c_double_complex, lda: c_int, w: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_cheevr(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                          n: c_int, a: *mut c_float_complex, lda: c_int, vl: c_float, vu: c_float,
                          il: c_int, iu: c_int, abstol: c_float, m: *mut c_int, w: *mut c_float,
                          z: *mut c_float_complex, ldz: c_int, isuppz: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zheevr(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                          n: c_int, a: *mut c_double_complex, lda: c_int, vl: c_double,
                          vu: c_double, il: c_int, iu: c_int, abstol: c_double, m: *mut c_int,
                          w: *mut c_double, z: *mut c_double_complex, ldz: c_int,
                          isuppz: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_cheevx(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                          n: c_int, a: *mut c_float_complex, lda: c_int, vl: c_float, vu: c_float,
                          il: c_int, iu: c_int, abstol: c_float, m: *mut c_int, w: *mut c_float,
                          z: *mut c_float_complex, ldz: c_int, ifail: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zheevx(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                          n: c_int, a: *mut c_double_complex, lda: c_int, vl: c_double,
                          vu: c_double, il: c_int, iu: c_int, abstol: c_double, m: *mut c_int,
                          w: *mut c_double, z: *mut c_double_complex, ldz: c_int,
                          ifail: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_chegst(matrix_layout: c_int, itype: c_int, uplo: c_char, n: c_int,
                          a: *mut c_float_complex, lda: c_int, b: *const c_float_complex,
                          ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_zhegst(matrix_layout: c_int, itype: c_int, uplo: c_char, n: c_int,
                          a: *mut c_double_complex, lda: c_int, b: *const c_double_complex,
                          ldb: c_int)
                          -> c_int;

    pub fn LAPACKE_chegv(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char, n: c_int,
                         a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex, ldb: c_int,
                         w: *mut c_float)
                         -> c_int;
    pub fn LAPACKE_zhegv(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char, n: c_int,
                         a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                         ldb: c_int, w: *mut c_double)
                         -> c_int;

    pub fn LAPACKE_chegvd(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char, n: c_int,
                          a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex, ldb: c_int,
                          w: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zhegvd(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char, n: c_int,
                          a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                          ldb: c_int, w: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_chegvx(matrix_layout: c_int, itype: c_int, jobz: c_char, range: c_char,
                          uplo: c_char, n: c_int, a: *mut c_float_complex, lda: c_int,
                          b: *mut c_float_complex, ldb: c_int, vl: c_float, vu: c_float, il: c_int,
                          iu: c_int, abstol: c_float, m: *mut c_int, w: *mut c_float,
                          z: *mut c_float_complex, ldz: c_int, ifail: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zhegvx(matrix_layout: c_int, itype: c_int, jobz: c_char, range: c_char,
                          uplo: c_char, n: c_int, a: *mut c_double_complex, lda: c_int,
                          b: *mut c_double_complex, ldb: c_int, vl: c_double, vu: c_double,
                          il: c_int, iu: c_int, abstol: c_double, m: *mut c_int, w: *mut c_double,
                          z: *mut c_double_complex, ldz: c_int, ifail: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_cherfs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *const c_float_complex, lda: c_int, af: *const c_float_complex,
                          ldaf: c_int, ipiv: *const c_int, b: *const c_float_complex, ldb: c_int,
                          x: *mut c_float_complex, ldx: c_int, ferr: *mut c_float,
                          berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zherfs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *const c_double_complex, lda: c_int, af: *const c_double_complex,
                          ldaf: c_int, ipiv: *const c_int, b: *const c_double_complex, ldb: c_int,
                          x: *mut c_double_complex, ldx: c_int, ferr: *mut c_double,
                          berr: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_cherfsx(matrix_layout: c_int, uplo: c_char, equed: c_char, n: c_int,
                           nrhs: c_int, a: *const c_float_complex, lda: c_int,
                           af: *const c_float_complex, ldaf: c_int, ipiv: *const c_int,
                           s: *const c_float, b: *const c_float_complex, ldb: c_int,
                           x: *mut c_float_complex, ldx: c_int, rcond: *mut c_float,
                           berr: *mut c_float, n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                           err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_zherfsx(matrix_layout: c_int, uplo: c_char, equed: c_char, n: c_int,
                           nrhs: c_int, a: *const c_double_complex, lda: c_int,
                           af: *const c_double_complex, ldaf: c_int, ipiv: *const c_int,
                           s: *const c_double, b: *const c_double_complex, ldb: c_int,
                           x: *mut c_double_complex, ldx: c_int, rcond: *mut c_double,
                           berr: *mut c_double, n_err_bnds: c_int, err_bnds_norm: *mut c_double,
                           err_bnds_comp: *mut c_double, nparams: c_int, params: *mut c_double)
                           -> c_int;

    pub fn LAPACKE_chesv(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                         a: *mut c_float_complex, lda: c_int, ipiv: *mut c_int,
                         b: *mut c_float_complex, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_zhesv(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                         a: *mut c_double_complex, lda: c_int, ipiv: *mut c_int,
                         b: *mut c_double_complex, ldb: c_int)
                         -> c_int;

    pub fn LAPACKE_chesvx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *const c_float_complex, lda: c_int, af: *mut c_float_complex,
                          ldaf: c_int, ipiv: *mut c_int, b: *const c_float_complex, ldb: c_int,
                          x: *mut c_float_complex, ldx: c_int, rcond: *mut c_float,
                          ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zhesvx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *const c_double_complex, lda: c_int, af: *mut c_double_complex,
                          ldaf: c_int, ipiv: *mut c_int, b: *const c_double_complex, ldb: c_int,
                          x: *mut c_double_complex, ldx: c_int, rcond: *mut c_double,
                          ferr: *mut c_double, berr: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_chesvxx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                           a: *mut c_float_complex, lda: c_int, af: *mut c_float_complex,
                           ldaf: c_int, ipiv: *mut c_int, equed: *mut c_char, s: *mut c_float,
                           b: *mut c_float_complex, ldb: c_int, x: *mut c_float_complex,
                           ldx: c_int, rcond: *mut c_float, rpvgrw: *mut c_float,
                           berr: *mut c_float, n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                           err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_zhesvxx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                           a: *mut c_double_complex, lda: c_int, af: *mut c_double_complex,
                           ldaf: c_int, ipiv: *mut c_int, equed: *mut c_char, s: *mut c_double,
                           b: *mut c_double_complex, ldb: c_int, x: *mut c_double_complex,
                           ldx: c_int, rcond: *mut c_double, rpvgrw: *mut c_double,
                           berr: *mut c_double, n_err_bnds: c_int, err_bnds_norm: *mut c_double,
                           err_bnds_comp: *mut c_double, nparams: c_int, params: *mut c_double)
                           -> c_int;

    pub fn LAPACKE_chetrd(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float_complex,
                          lda: c_int, d: *mut c_float, e: *mut c_float, tau: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zhetrd(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double_complex,
                          lda: c_int, d: *mut c_double, e: *mut c_double,
                          tau: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_chetrf(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float_complex,
                          lda: c_int, ipiv: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zhetrf(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double_complex,
                          lda: c_int, ipiv: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_chetri(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float_complex,
                          lda: c_int, ipiv: *const c_int)
                          -> c_int;
    pub fn LAPACKE_zhetri(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double_complex,
                          lda: c_int, ipiv: *const c_int)
                          -> c_int;

    pub fn LAPACKE_chetrs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *const c_float_complex, lda: c_int, ipiv: *const c_int,
                          b: *mut c_float_complex, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_zhetrs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *const c_double_complex, lda: c_int, ipiv: *const c_int,
                          b: *mut c_double_complex, ldb: c_int)
                          -> c_int;

    pub fn LAPACKE_chfrk(matrix_layout: c_int, transr: c_char, uplo: c_char, trans: c_char,
                         n: c_int, k: c_int, alpha: c_float, a: *const c_float_complex, lda: c_int,
                         beta: c_float, c: *mut c_float_complex)
                         -> c_int;
    pub fn LAPACKE_zhfrk(matrix_layout: c_int, transr: c_char, uplo: c_char, trans: c_char,
                         n: c_int, k: c_int, alpha: c_double, a: *const c_double_complex,
                         lda: c_int, beta: c_double, c: *mut c_double_complex)
                         -> c_int;

    pub fn LAPACKE_shgeqz(matrix_layout: c_int, job: c_char, compq: c_char, compz: c_char,
                          n: c_int, ilo: c_int, ihi: c_int, h: *mut c_float, ldh: c_int,
                          t: *mut c_float, ldt: c_int, alphar: *mut c_float, alphai: *mut c_float,
                          beta: *mut c_float, q: *mut c_float, ldq: c_int, z: *mut c_float,
                          ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_dhgeqz(matrix_layout: c_int, job: c_char, compq: c_char, compz: c_char,
                          n: c_int, ilo: c_int, ihi: c_int, h: *mut c_double, ldh: c_int,
                          t: *mut c_double, ldt: c_int, alphar: *mut c_double,
                          alphai: *mut c_double, beta: *mut c_double, q: *mut c_double, ldq: c_int,
                          z: *mut c_double, ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_chgeqz(matrix_layout: c_int, job: c_char, compq: c_char, compz: c_char,
                          n: c_int, ilo: c_int, ihi: c_int, h: *mut c_float_complex, ldh: c_int,
                          t: *mut c_float_complex, ldt: c_int, alpha: *mut c_float_complex,
                          beta: *mut c_float_complex, q: *mut c_float_complex, ldq: c_int,
                          z: *mut c_float_complex, ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_zhgeqz(matrix_layout: c_int, job: c_char, compq: c_char, compz: c_char,
                          n: c_int, ilo: c_int, ihi: c_int, h: *mut c_double_complex, ldh: c_int,
                          t: *mut c_double_complex, ldt: c_int, alpha: *mut c_double_complex,
                          beta: *mut c_double_complex, q: *mut c_double_complex, ldq: c_int,
                          z: *mut c_double_complex, ldz: c_int)
                          -> c_int;

    pub fn LAPACKE_chpcon(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *const c_float_complex,
                          ipiv: *const c_int, anorm: c_float, rcond: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zhpcon(matrix_layout: c_int, uplo: c_char, n: c_int,
                          ap: *const c_double_complex, ipiv: *const c_int, anorm: c_double,
                          rcond: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_chpev(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                         ap: *mut c_float_complex, w: *mut c_float, z: *mut c_float_complex,
                         ldz: c_int)
                         -> c_int;
    pub fn LAPACKE_zhpev(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                         ap: *mut c_double_complex, w: *mut c_double, z: *mut c_double_complex,
                         ldz: c_int)
                         -> c_int;

    pub fn LAPACKE_chpevd(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                          ap: *mut c_float_complex, w: *mut c_float, z: *mut c_float_complex,
                          ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_zhpevd(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                          ap: *mut c_double_complex, w: *mut c_double, z: *mut c_double_complex,
                          ldz: c_int)
                          -> c_int;

    pub fn LAPACKE_chpevx(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                          n: c_int, ap: *mut c_float_complex, vl: c_float, vu: c_float, il: c_int,
                          iu: c_int, abstol: c_float, m: *mut c_int, w: *mut c_float,
                          z: *mut c_float_complex, ldz: c_int, ifail: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zhpevx(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                          n: c_int, ap: *mut c_double_complex, vl: c_double, vu: c_double,
                          il: c_int, iu: c_int, abstol: c_double, m: *mut c_int, w: *mut c_double,
                          z: *mut c_double_complex, ldz: c_int, ifail: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_chpgst(matrix_layout: c_int, itype: c_int, uplo: c_char, n: c_int,
                          ap: *mut c_float_complex, bp: *const c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zhpgst(matrix_layout: c_int, itype: c_int, uplo: c_char, n: c_int,
                          ap: *mut c_double_complex, bp: *const c_double_complex)
                          -> c_int;

    pub fn LAPACKE_chpgv(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char, n: c_int,
                         ap: *mut c_float_complex, bp: *mut c_float_complex, w: *mut c_float,
                         z: *mut c_float_complex, ldz: c_int)
                         -> c_int;
    pub fn LAPACKE_zhpgv(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char, n: c_int,
                         ap: *mut c_double_complex, bp: *mut c_double_complex, w: *mut c_double,
                         z: *mut c_double_complex, ldz: c_int)
                         -> c_int;

    pub fn LAPACKE_chpgvd(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char, n: c_int,
                          ap: *mut c_float_complex, bp: *mut c_float_complex, w: *mut c_float,
                          z: *mut c_float_complex, ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_zhpgvd(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char, n: c_int,
                          ap: *mut c_double_complex, bp: *mut c_double_complex, w: *mut c_double,
                          z: *mut c_double_complex, ldz: c_int)
                          -> c_int;

    pub fn LAPACKE_chpgvx(matrix_layout: c_int, itype: c_int, jobz: c_char, range: c_char,
                          uplo: c_char, n: c_int, ap: *mut c_float_complex,
                          bp: *mut c_float_complex, vl: c_float, vu: c_float, il: c_int, iu: c_int,
                          abstol: c_float, m: *mut c_int, w: *mut c_float, z: *mut c_float_complex,
                          ldz: c_int, ifail: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zhpgvx(matrix_layout: c_int, itype: c_int, jobz: c_char, range: c_char,
                          uplo: c_char, n: c_int, ap: *mut c_double_complex,
                          bp: *mut c_double_complex, vl: c_double, vu: c_double, il: c_int,
                          iu: c_int, abstol: c_double, m: *mut c_int, w: *mut c_double,
                          z: *mut c_double_complex, ldz: c_int, ifail: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_chprfs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *const c_float_complex, afp: *const c_float_complex,
                          ipiv: *const c_int, b: *const c_float_complex, ldb: c_int,
                          x: *mut c_float_complex, ldx: c_int, ferr: *mut c_float,
                          berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zhprfs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *const c_double_complex, afp: *const c_double_complex,
                          ipiv: *const c_int, b: *const c_double_complex, ldb: c_int,
                          x: *mut c_double_complex, ldx: c_int, ferr: *mut c_double,
                          berr: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_chpsv(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                         ap: *mut c_float_complex, ipiv: *mut c_int, b: *mut c_float_complex,
                         ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_zhpsv(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                         ap: *mut c_double_complex, ipiv: *mut c_int, b: *mut c_double_complex,
                         ldb: c_int)
                         -> c_int;

    pub fn LAPACKE_chpsvx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *const c_float_complex, afp: *mut c_float_complex, ipiv: *mut c_int,
                          b: *const c_float_complex, ldb: c_int, x: *mut c_float_complex,
                          ldx: c_int, rcond: *mut c_float, ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zhpsvx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *const c_double_complex, afp: *mut c_double_complex,
                          ipiv: *mut c_int, b: *const c_double_complex, ldb: c_int,
                          x: *mut c_double_complex, ldx: c_int, rcond: *mut c_double,
                          ferr: *mut c_double, berr: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_chptrd(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_float_complex,
                          d: *mut c_float, e: *mut c_float, tau: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zhptrd(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_double_complex,
                          d: *mut c_double, e: *mut c_double, tau: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_chptrf(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_float_complex,
                          ipiv: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zhptrf(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_double_complex,
                          ipiv: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_chptri(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_float_complex,
                          ipiv: *const c_int)
                          -> c_int;
    pub fn LAPACKE_zhptri(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_double_complex,
                          ipiv: *const c_int)
                          -> c_int;

    pub fn LAPACKE_chptrs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *const c_float_complex, ipiv: *const c_int, b: *mut c_float_complex,
                          ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_zhptrs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *const c_double_complex, ipiv: *const c_int,
                          b: *mut c_double_complex, ldb: c_int)
                          -> c_int;

    pub fn LAPACKE_shsein(matrix_layout: c_int, job: c_char, eigsrc: c_char, initv: c_char,
                          select: *mut c_int, n: c_int, h: *const c_float, ldh: c_int,
                          wr: *mut c_float, wi: *const c_float, vl: *mut c_float, ldvl: c_int,
                          vr: *mut c_float, ldvr: c_int, mm: c_int, m: *mut c_int,
                          ifaill: *mut c_int, ifailr: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dhsein(matrix_layout: c_int, job: c_char, eigsrc: c_char, initv: c_char,
                          select: *mut c_int, n: c_int, h: *const c_double, ldh: c_int,
                          wr: *mut c_double, wi: *const c_double, vl: *mut c_double, ldvl: c_int,
                          vr: *mut c_double, ldvr: c_int, mm: c_int, m: *mut c_int,
                          ifaill: *mut c_int, ifailr: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_chsein(matrix_layout: c_int, job: c_char, eigsrc: c_char, initv: c_char,
                          select: *const c_int, n: c_int, h: *const c_float_complex, ldh: c_int,
                          w: *mut c_float_complex, vl: *mut c_float_complex, ldvl: c_int,
                          vr: *mut c_float_complex, ldvr: c_int, mm: c_int, m: *mut c_int,
                          ifaill: *mut c_int, ifailr: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zhsein(matrix_layout: c_int, job: c_char, eigsrc: c_char, initv: c_char,
                          select: *const c_int, n: c_int, h: *const c_double_complex, ldh: c_int,
                          w: *mut c_double_complex, vl: *mut c_double_complex, ldvl: c_int,
                          vr: *mut c_double_complex, ldvr: c_int, mm: c_int, m: *mut c_int,
                          ifaill: *mut c_int, ifailr: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_shseqr(matrix_layout: c_int, job: c_char, compz: c_char, n: c_int, ilo: c_int,
                          ihi: c_int, h: *mut c_float, ldh: c_int, wr: *mut c_float,
                          wi: *mut c_float, z: *mut c_float, ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_dhseqr(matrix_layout: c_int, job: c_char, compz: c_char, n: c_int, ilo: c_int,
                          ihi: c_int, h: *mut c_double, ldh: c_int, wr: *mut c_double,
                          wi: *mut c_double, z: *mut c_double, ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_chseqr(matrix_layout: c_int, job: c_char, compz: c_char, n: c_int, ilo: c_int,
                          ihi: c_int, h: *mut c_float_complex, ldh: c_int, w: *mut c_float_complex,
                          z: *mut c_float_complex, ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_zhseqr(matrix_layout: c_int, job: c_char, compz: c_char, n: c_int, ilo: c_int,
                          ihi: c_int, h: *mut c_double_complex, ldh: c_int,
                          w: *mut c_double_complex, z: *mut c_double_complex, ldz: c_int)
                          -> c_int;

    pub fn LAPACKE_clacgv(n: c_int, x: *mut c_float_complex, incx: c_int) -> c_int;
    pub fn LAPACKE_zlacgv(n: c_int, x: *mut c_double_complex, incx: c_int) -> c_int;

    pub fn LAPACKE_slacn2(n: c_int, v: *mut c_float, x: *mut c_float, isgn: *mut c_int,
                          est: *mut c_float, kase: *mut c_int, isave: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dlacn2(n: c_int, v: *mut c_double, x: *mut c_double, isgn: *mut c_int,
                          est: *mut c_double, kase: *mut c_int, isave: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_clacn2(n: c_int, v: *mut c_float_complex, x: *mut c_float_complex,
                          est: *mut c_float, kase: *mut c_int, isave: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zlacn2(n: c_int, v: *mut c_double_complex, x: *mut c_double_complex,
                          est: *mut c_double, kase: *mut c_int, isave: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_slacpy(matrix_layout: c_int, uplo: c_char, m: c_int, n: c_int,
                          a: *const c_float, lda: c_int, b: *mut c_float, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_dlacpy(matrix_layout: c_int, uplo: c_char, m: c_int, n: c_int,
                          a: *const c_double, lda: c_int, b: *mut c_double, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_clacpy(matrix_layout: c_int, uplo: c_char, m: c_int, n: c_int,
                          a: *const c_float_complex, lda: c_int, b: *mut c_float_complex,
                          ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_zlacpy(matrix_layout: c_int, uplo: c_char, m: c_int, n: c_int,
                          a: *const c_double_complex, lda: c_int, b: *mut c_double_complex,
                          ldb: c_int)
                          -> c_int;

    pub fn LAPACKE_clacp2(matrix_layout: c_int, uplo: c_char, m: c_int, n: c_int,
                          a: *const c_float, lda: c_int, b: *mut c_float_complex, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_zlacp2(matrix_layout: c_int, uplo: c_char, m: c_int, n: c_int,
                          a: *const c_double, lda: c_int, b: *mut c_double_complex, ldb: c_int)
                          -> c_int;

    pub fn LAPACKE_zlag2c(matrix_layout: c_int, m: c_int, n: c_int, a: *const c_double_complex,
                          lda: c_int, sa: *mut c_float_complex, ldsa: c_int)
                          -> c_int;

    pub fn LAPACKE_slag2d(matrix_layout: c_int, m: c_int, n: c_int, sa: *const c_float,
                          ldsa: c_int, a: *mut c_double, lda: c_int)
                          -> c_int;

    pub fn LAPACKE_dlag2s(matrix_layout: c_int, m: c_int, n: c_int, a: *const c_double, lda: c_int,
                          sa: *mut c_float, ldsa: c_int)
                          -> c_int;

    pub fn LAPACKE_clag2z(matrix_layout: c_int, m: c_int, n: c_int, sa: *const c_float_complex,
                          ldsa: c_int, a: *mut c_double_complex, lda: c_int)
                          -> c_int;

    pub fn LAPACKE_slagge(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                          d: *const c_float, a: *mut c_float, lda: c_int, iseed: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dlagge(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                          d: *const c_double, a: *mut c_double, lda: c_int, iseed: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_clagge(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                          d: *const c_float, a: *mut c_float_complex, lda: c_int,
                          iseed: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zlagge(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                          d: *const c_double, a: *mut c_double_complex, lda: c_int,
                          iseed: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_slamch(cmach: c_char) -> c_float;
    pub fn LAPACKE_dlamch(cmach: c_char) -> c_double;

    pub fn LAPACKE_slange(matrix_layout: c_int, norm: c_char, m: c_int, n: c_int,
                          a: *const c_float, lda: c_int)
                          -> c_float;
    pub fn LAPACKE_dlange(matrix_layout: c_int, norm: c_char, m: c_int, n: c_int,
                          a: *const c_double, lda: c_int)
                          -> c_double;
    pub fn LAPACKE_clange(matrix_layout: c_int, norm: c_char, m: c_int, n: c_int,
                          a: *const c_float_complex, lda: c_int)
                          -> c_float;
    pub fn LAPACKE_zlange(matrix_layout: c_int, norm: c_char, m: c_int, n: c_int,
                          a: *const c_double_complex, lda: c_int)
                          -> c_double;

    pub fn LAPACKE_clanhe(matrix_layout: c_int, norm: c_char, uplo: c_char, n: c_int,
                          a: *const c_float_complex, lda: c_int)
                          -> c_float;
    pub fn LAPACKE_zlanhe(matrix_layout: c_int, norm: c_char, uplo: c_char, n: c_int,
                          a: *const c_double_complex, lda: c_int)
                          -> c_double;

    pub fn LAPACKE_slansy(matrix_layout: c_int, norm: c_char, uplo: c_char, n: c_int,
                          a: *const c_float, lda: c_int)
                          -> c_float;
    pub fn LAPACKE_dlansy(matrix_layout: c_int, norm: c_char, uplo: c_char, n: c_int,
                          a: *const c_double, lda: c_int)
                          -> c_double;
    pub fn LAPACKE_clansy(matrix_layout: c_int, norm: c_char, uplo: c_char, n: c_int,
                          a: *const c_float_complex, lda: c_int)
                          -> c_float;
    pub fn LAPACKE_zlansy(matrix_layout: c_int, norm: c_char, uplo: c_char, n: c_int,
                          a: *const c_double_complex, lda: c_int)
                          -> c_double;

    pub fn LAPACKE_slantr(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char, m: c_int,
                          n: c_int, a: *const c_float, lda: c_int)
                          -> c_float;
    pub fn LAPACKE_dlantr(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char, m: c_int,
                          n: c_int, a: *const c_double, lda: c_int)
                          -> c_double;
    pub fn LAPACKE_clantr(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char, m: c_int,
                          n: c_int, a: *const c_float_complex, lda: c_int)
                          -> c_float;
    pub fn LAPACKE_zlantr(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char, m: c_int,
                          n: c_int, a: *const c_double_complex, lda: c_int)
                          -> c_double;


    pub fn LAPACKE_slarfb(matrix_layout: c_int, side: c_char, trans: c_char, direct: c_char,
                          storev: c_char, m: c_int, n: c_int, k: c_int, v: *const c_float,
                          ldv: c_int, t: *const c_float, ldt: c_int, c: *mut c_float, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_dlarfb(matrix_layout: c_int, side: c_char, trans: c_char, direct: c_char,
                          storev: c_char, m: c_int, n: c_int, k: c_int, v: *const c_double,
                          ldv: c_int, t: *const c_double, ldt: c_int, c: *mut c_double, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_clarfb(matrix_layout: c_int, side: c_char, trans: c_char, direct: c_char,
                          storev: c_char, m: c_int, n: c_int, k: c_int, v: *const c_float_complex,
                          ldv: c_int, t: *const c_float_complex, ldt: c_int,
                          c: *mut c_float_complex, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_zlarfb(matrix_layout: c_int, side: c_char, trans: c_char, direct: c_char,
                          storev: c_char, m: c_int, n: c_int, k: c_int, v: *const c_double_complex,
                          ldv: c_int, t: *const c_double_complex, ldt: c_int,
                          c: *mut c_double_complex, ldc: c_int)
                          -> c_int;

    pub fn LAPACKE_slarfg(n: c_int, alpha: *mut c_float, x: *mut c_float, incx: c_int,
                          tau: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dlarfg(n: c_int, alpha: *mut c_double, x: *mut c_double, incx: c_int,
                          tau: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_clarfg(n: c_int, alpha: *mut c_float_complex, x: *mut c_float_complex,
                          incx: c_int, tau: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zlarfg(n: c_int, alpha: *mut c_double_complex, x: *mut c_double_complex,
                          incx: c_int, tau: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_slarft(matrix_layout: c_int, direct: c_char, storev: c_char, n: c_int, k: c_int,
                          v: *const c_float, ldv: c_int, tau: *const c_float, t: *mut c_float,
                          ldt: c_int)
                          -> c_int;
    pub fn LAPACKE_dlarft(matrix_layout: c_int, direct: c_char, storev: c_char, n: c_int, k: c_int,
                          v: *const c_double, ldv: c_int, tau: *const c_double, t: *mut c_double,
                          ldt: c_int)
                          -> c_int;
    pub fn LAPACKE_clarft(matrix_layout: c_int, direct: c_char, storev: c_char, n: c_int, k: c_int,
                          v: *const c_float_complex, ldv: c_int, tau: *const c_float_complex,
                          t: *mut c_float_complex, ldt: c_int)
                          -> c_int;
    pub fn LAPACKE_zlarft(matrix_layout: c_int, direct: c_char, storev: c_char, n: c_int, k: c_int,
                          v: *const c_double_complex, ldv: c_int, tau: *const c_double_complex,
                          t: *mut c_double_complex, ldt: c_int)
                          -> c_int;

    pub fn LAPACKE_slarfx(matrix_layout: c_int, side: c_char, m: c_int, n: c_int,
                          v: *const c_float, tau: c_float, c: *mut c_float, ldc: c_int,
                          work: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dlarfx(matrix_layout: c_int, side: c_char, m: c_int, n: c_int,
                          v: *const c_double, tau: c_double, c: *mut c_double, ldc: c_int,
                          work: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_clarfx(matrix_layout: c_int, side: c_char, m: c_int, n: c_int,
                          v: *const c_float_complex, tau: c_float_complex, c: *mut c_float_complex,
                          ldc: c_int, work: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zlarfx(matrix_layout: c_int, side: c_char, m: c_int, n: c_int,
                          v: *const c_double_complex, tau: c_double_complex,
                          c: *mut c_double_complex, ldc: c_int, work: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_slarnv(idist: c_int, iseed: *mut c_int, n: c_int, x: *mut c_float) -> c_int;
    pub fn LAPACKE_dlarnv(idist: c_int, iseed: *mut c_int, n: c_int, x: *mut c_double) -> c_int;
    pub fn LAPACKE_clarnv(idist: c_int, iseed: *mut c_int, n: c_int, x: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zlarnv(idist: c_int, iseed: *mut c_int, n: c_int, x: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_slascl(matrix_layout: c_int, _type: c_char, kl: c_int, ku: c_int,
                          cfrom: c_float, cto: c_float, m: c_int, n: c_int, a: *mut c_float,
                          lda: c_int)
                          -> c_int;
    pub fn LAPACKE_dlascl(matrix_layout: c_int, _type: c_char, kl: c_int, ku: c_int,
                          cfrom: c_double, cto: c_double, m: c_int, n: c_int, a: *mut c_double,
                          lda: c_int)
                          -> c_int;
    pub fn LAPACKE_clascl(matrix_layout: c_int, _type: c_char, kl: c_int, ku: c_int,
                          cfrom: c_float, cto: c_float, m: c_int, n: c_int,
                          a: *mut c_float_complex, lda: c_int)
                          -> c_int;
    pub fn LAPACKE_zlascl(matrix_layout: c_int, _type: c_char, kl: c_int, ku: c_int,
                          cfrom: c_double, cto: c_double, m: c_int, n: c_int,
                          a: *mut c_double_complex, lda: c_int)
                          -> c_int;

    pub fn LAPACKE_slaset(matrix_layout: c_int, uplo: c_char, m: c_int, n: c_int, alpha: c_float,
                          beta: c_float, a: *mut c_float, lda: c_int)
                          -> c_int;
    pub fn LAPACKE_dlaset(matrix_layout: c_int, uplo: c_char, m: c_int, n: c_int, alpha: c_double,
                          beta: c_double, a: *mut c_double, lda: c_int)
                          -> c_int;
    pub fn LAPACKE_claset(matrix_layout: c_int, uplo: c_char, m: c_int, n: c_int,
                          alpha: c_float_complex, beta: c_float_complex, a: *mut c_float_complex,
                          lda: c_int)
                          -> c_int;
    pub fn LAPACKE_zlaset(matrix_layout: c_int, uplo: c_char, m: c_int, n: c_int,
                          alpha: c_double_complex, beta: c_double_complex,
                          a: *mut c_double_complex, lda: c_int)
                          -> c_int;

    pub fn LAPACKE_slasrt(id: c_char, n: c_int, d: *mut c_float) -> c_int;
    pub fn LAPACKE_dlasrt(id: c_char, n: c_int, d: *mut c_double) -> c_int;

    pub fn LAPACKE_slaswp(matrix_layout: c_int, n: c_int, a: *mut c_float, lda: c_int, k1: c_int,
                          k2: c_int, ipiv: *const c_int, incx: c_int)
                          -> c_int;
    pub fn LAPACKE_dlaswp(matrix_layout: c_int, n: c_int, a: *mut c_double, lda: c_int, k1: c_int,
                          k2: c_int, ipiv: *const c_int, incx: c_int)
                          -> c_int;
    pub fn LAPACKE_claswp(matrix_layout: c_int, n: c_int, a: *mut c_float_complex, lda: c_int,
                          k1: c_int, k2: c_int, ipiv: *const c_int, incx: c_int)
                          -> c_int;
    pub fn LAPACKE_zlaswp(matrix_layout: c_int, n: c_int, a: *mut c_double_complex, lda: c_int,
                          k1: c_int, k2: c_int, ipiv: *const c_int, incx: c_int)
                          -> c_int;

    pub fn LAPACKE_slatms(matrix_layout: c_int, m: c_int, n: c_int, dist: c_char,
                          iseed: *mut c_int, sym: c_char, d: *mut c_float, mode: c_int,
                          cond: c_float, dmax: c_float, kl: c_int, ku: c_int, pack: c_char,
                          a: *mut c_float, lda: c_int)
                          -> c_int;
    pub fn LAPACKE_dlatms(matrix_layout: c_int, m: c_int, n: c_int, dist: c_char,
                          iseed: *mut c_int, sym: c_char, d: *mut c_double, mode: c_int,
                          cond: c_double, dmax: c_double, kl: c_int, ku: c_int, pack: c_char,
                          a: *mut c_double, lda: c_int)
                          -> c_int;
    pub fn LAPACKE_clatms(matrix_layout: c_int, m: c_int, n: c_int, dist: c_char,
                          iseed: *mut c_int, sym: c_char, d: *mut c_float, mode: c_int,
                          cond: c_float, dmax: c_float, kl: c_int, ku: c_int, pack: c_char,
                          a: *mut c_float_complex, lda: c_int)
                          -> c_int;
    pub fn LAPACKE_zlatms(matrix_layout: c_int, m: c_int, n: c_int, dist: c_char,
                          iseed: *mut c_int, sym: c_char, d: *mut c_double, mode: c_int,
                          cond: c_double, dmax: c_double, kl: c_int, ku: c_int, pack: c_char,
                          a: *mut c_double_complex, lda: c_int)
                          -> c_int;

    pub fn LAPACKE_slauum(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float,
                          lda: c_int)
                          -> c_int;
    pub fn LAPACKE_dlauum(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double,
                          lda: c_int)
                          -> c_int;
    pub fn LAPACKE_clauum(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float_complex,
                          lda: c_int)
                          -> c_int;
    pub fn LAPACKE_zlauum(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double_complex,
                          lda: c_int)
                          -> c_int;

    pub fn LAPACKE_sopgtr(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *const c_float,
                          tau: *const c_float, q: *mut c_float, ldq: c_int)
                          -> c_int;
    pub fn LAPACKE_dopgtr(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *const c_double,
                          tau: *const c_double, q: *mut c_double, ldq: c_int)
                          -> c_int;

    pub fn LAPACKE_sopmtr(matrix_layout: c_int, side: c_char, uplo: c_char, trans: c_char,
                          m: c_int, n: c_int, ap: *const c_float, tau: *const c_float,
                          c: *mut c_float, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_dopmtr(matrix_layout: c_int, side: c_char, uplo: c_char, trans: c_char,
                          m: c_int, n: c_int, ap: *const c_double, tau: *const c_double,
                          c: *mut c_double, ldc: c_int)
                          -> c_int;

    pub fn LAPACKE_sorgbr(matrix_layout: c_int, vect: c_char, m: c_int, n: c_int, k: c_int,
                          a: *mut c_float, lda: c_int, tau: *const c_float)
                          -> c_int;
    pub fn LAPACKE_dorgbr(matrix_layout: c_int, vect: c_char, m: c_int, n: c_int, k: c_int,
                          a: *mut c_double, lda: c_int, tau: *const c_double)
                          -> c_int;

    pub fn LAPACKE_sorghr(matrix_layout: c_int, n: c_int, ilo: c_int, ihi: c_int, a: *mut c_float,
                          lda: c_int, tau: *const c_float)
                          -> c_int;
    pub fn LAPACKE_dorghr(matrix_layout: c_int, n: c_int, ilo: c_int, ihi: c_int, a: *mut c_double,
                          lda: c_int, tau: *const c_double)
                          -> c_int;

    pub fn LAPACKE_sorglq(matrix_layout: c_int, m: c_int, n: c_int, k: c_int, a: *mut c_float,
                          lda: c_int, tau: *const c_float)
                          -> c_int;
    pub fn LAPACKE_dorglq(matrix_layout: c_int, m: c_int, n: c_int, k: c_int, a: *mut c_double,
                          lda: c_int, tau: *const c_double)
                          -> c_int;

    pub fn LAPACKE_sorgql(matrix_layout: c_int, m: c_int, n: c_int, k: c_int, a: *mut c_float,
                          lda: c_int, tau: *const c_float)
                          -> c_int;
    pub fn LAPACKE_dorgql(matrix_layout: c_int, m: c_int, n: c_int, k: c_int, a: *mut c_double,
                          lda: c_int, tau: *const c_double)
                          -> c_int;

    pub fn LAPACKE_sorgqr(matrix_layout: c_int, m: c_int, n: c_int, k: c_int, a: *mut c_float,
                          lda: c_int, tau: *const c_float)
                          -> c_int;
    pub fn LAPACKE_dorgqr(matrix_layout: c_int, m: c_int, n: c_int, k: c_int, a: *mut c_double,
                          lda: c_int, tau: *const c_double)
                          -> c_int;

    pub fn LAPACKE_sorgrq(matrix_layout: c_int, m: c_int, n: c_int, k: c_int, a: *mut c_float,
                          lda: c_int, tau: *const c_float)
                          -> c_int;
    pub fn LAPACKE_dorgrq(matrix_layout: c_int, m: c_int, n: c_int, k: c_int, a: *mut c_double,
                          lda: c_int, tau: *const c_double)
                          -> c_int;

    pub fn LAPACKE_sorgtr(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float,
                          lda: c_int, tau: *const c_float)
                          -> c_int;
    pub fn LAPACKE_dorgtr(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double,
                          lda: c_int, tau: *const c_double)
                          -> c_int;

    pub fn LAPACKE_sormbr(matrix_layout: c_int, vect: c_char, side: c_char, trans: c_char,
                          m: c_int, n: c_int, k: c_int, a: *const c_float, lda: c_int,
                          tau: *const c_float, c: *mut c_float, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_dormbr(matrix_layout: c_int, vect: c_char, side: c_char, trans: c_char,
                          m: c_int, n: c_int, k: c_int, a: *const c_double, lda: c_int,
                          tau: *const c_double, c: *mut c_double, ldc: c_int)
                          -> c_int;

    pub fn LAPACKE_sormhr(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                          ilo: c_int, ihi: c_int, a: *const c_float, lda: c_int,
                          tau: *const c_float, c: *mut c_float, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_dormhr(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                          ilo: c_int, ihi: c_int, a: *const c_double, lda: c_int,
                          tau: *const c_double, c: *mut c_double, ldc: c_int)
                          -> c_int;

    pub fn LAPACKE_sormlq(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                          k: c_int, a: *const c_float, lda: c_int, tau: *const c_float,
                          c: *mut c_float, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_dormlq(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                          k: c_int, a: *const c_double, lda: c_int, tau: *const c_double,
                          c: *mut c_double, ldc: c_int)
                          -> c_int;

    pub fn LAPACKE_sormql(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                          k: c_int, a: *const c_float, lda: c_int, tau: *const c_float,
                          c: *mut c_float, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_dormql(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                          k: c_int, a: *const c_double, lda: c_int, tau: *const c_double,
                          c: *mut c_double, ldc: c_int)
                          -> c_int;

    pub fn LAPACKE_sormqr(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                          k: c_int, a: *const c_float, lda: c_int, tau: *const c_float,
                          c: *mut c_float, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_dormqr(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                          k: c_int, a: *const c_double, lda: c_int, tau: *const c_double,
                          c: *mut c_double, ldc: c_int)
                          -> c_int;

    pub fn LAPACKE_sormrq(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                          k: c_int, a: *const c_float, lda: c_int, tau: *const c_float,
                          c: *mut c_float, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_dormrq(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                          k: c_int, a: *const c_double, lda: c_int, tau: *const c_double,
                          c: *mut c_double, ldc: c_int)
                          -> c_int;

    pub fn LAPACKE_sormrz(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                          k: c_int, l: c_int, a: *const c_float, lda: c_int, tau: *const c_float,
                          c: *mut c_float, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_dormrz(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                          k: c_int, l: c_int, a: *const c_double, lda: c_int, tau: *const c_double,
                          c: *mut c_double, ldc: c_int)
                          -> c_int;

    pub fn LAPACKE_sormtr(matrix_layout: c_int, side: c_char, uplo: c_char, trans: c_char,
                          m: c_int, n: c_int, a: *const c_float, lda: c_int, tau: *const c_float,
                          c: *mut c_float, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_dormtr(matrix_layout: c_int, side: c_char, uplo: c_char, trans: c_char,
                          m: c_int, n: c_int, a: *const c_double, lda: c_int, tau: *const c_double,
                          c: *mut c_double, ldc: c_int)
                          -> c_int;

    pub fn LAPACKE_spbcon(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                          ab: *const c_float, ldab: c_int, anorm: c_float, rcond: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dpbcon(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                          ab: *const c_double, ldab: c_int, anorm: c_double, rcond: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cpbcon(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                          ab: *const c_float_complex, ldab: c_int, anorm: c_float,
                          rcond: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zpbcon(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                          ab: *const c_double_complex, ldab: c_int, anorm: c_double,
                          rcond: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_spbequ(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                          ab: *const c_float, ldab: c_int, s: *mut c_float, scond: *mut c_float,
                          amax: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dpbequ(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                          ab: *const c_double, ldab: c_int, s: *mut c_double, scond: *mut c_double,
                          amax: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cpbequ(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                          ab: *const c_float_complex, ldab: c_int, s: *mut c_float,
                          scond: *mut c_float, amax: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zpbequ(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                          ab: *const c_double_complex, ldab: c_int, s: *mut c_double,
                          scond: *mut c_double, amax: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_spbrfs(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int, nrhs: c_int,
                          ab: *const c_float, ldab: c_int, afb: *const c_float, ldafb: c_int,
                          b: *const c_float, ldb: c_int, x: *mut c_float, ldx: c_int,
                          ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dpbrfs(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int, nrhs: c_int,
                          ab: *const c_double, ldab: c_int, afb: *const c_double, ldafb: c_int,
                          b: *const c_double, ldb: c_int, x: *mut c_double, ldx: c_int,
                          ferr: *mut c_double, berr: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cpbrfs(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int, nrhs: c_int,
                          ab: *const c_float_complex, ldab: c_int, afb: *const c_float_complex,
                          ldafb: c_int, b: *const c_float_complex, ldb: c_int,
                          x: *mut c_float_complex, ldx: c_int, ferr: *mut c_float,
                          berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zpbrfs(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int, nrhs: c_int,
                          ab: *const c_double_complex, ldab: c_int, afb: *const c_double_complex,
                          ldafb: c_int, b: *const c_double_complex, ldb: c_int,
                          x: *mut c_double_complex, ldx: c_int, ferr: *mut c_double,
                          berr: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_spbstf(matrix_layout: c_int, uplo: c_char, n: c_int, kb: c_int,
                          bb: *mut c_float, ldbb: c_int)
                          -> c_int;
    pub fn LAPACKE_dpbstf(matrix_layout: c_int, uplo: c_char, n: c_int, kb: c_int,
                          bb: *mut c_double, ldbb: c_int)
                          -> c_int;
    pub fn LAPACKE_cpbstf(matrix_layout: c_int, uplo: c_char, n: c_int, kb: c_int,
                          bb: *mut c_float_complex, ldbb: c_int)
                          -> c_int;
    pub fn LAPACKE_zpbstf(matrix_layout: c_int, uplo: c_char, n: c_int, kb: c_int,
                          bb: *mut c_double_complex, ldbb: c_int)
                          -> c_int;

    pub fn LAPACKE_spbsv(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int, nrhs: c_int,
                         ab: *mut c_float, ldab: c_int, b: *mut c_float, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_dpbsv(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int, nrhs: c_int,
                         ab: *mut c_double, ldab: c_int, b: *mut c_double, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_cpbsv(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int, nrhs: c_int,
                         ab: *mut c_float_complex, ldab: c_int, b: *mut c_float_complex,
                         ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_zpbsv(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int, nrhs: c_int,
                         ab: *mut c_double_complex, ldab: c_int, b: *mut c_double_complex,
                         ldb: c_int)
                         -> c_int;

    pub fn LAPACKE_spbsvx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, kd: c_int,
                          nrhs: c_int, ab: *mut c_float, ldab: c_int, afb: *mut c_float,
                          ldafb: c_int, equed: *mut c_char, s: *mut c_float, b: *mut c_float,
                          ldb: c_int, x: *mut c_float, ldx: c_int, rcond: *mut c_float,
                          ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dpbsvx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, kd: c_int,
                          nrhs: c_int, ab: *mut c_double, ldab: c_int, afb: *mut c_double,
                          ldafb: c_int, equed: *mut c_char, s: *mut c_double, b: *mut c_double,
                          ldb: c_int, x: *mut c_double, ldx: c_int, rcond: *mut c_double,
                          ferr: *mut c_double, berr: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cpbsvx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, kd: c_int,
                          nrhs: c_int, ab: *mut c_float_complex, ldab: c_int,
                          afb: *mut c_float_complex, ldafb: c_int, equed: *mut c_char,
                          s: *mut c_float, b: *mut c_float_complex, ldb: c_int,
                          x: *mut c_float_complex, ldx: c_int, rcond: *mut c_float,
                          ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zpbsvx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, kd: c_int,
                          nrhs: c_int, ab: *mut c_double_complex, ldab: c_int,
                          afb: *mut c_double_complex, ldafb: c_int, equed: *mut c_char,
                          s: *mut c_double, b: *mut c_double_complex, ldb: c_int,
                          x: *mut c_double_complex, ldx: c_int, rcond: *mut c_double,
                          ferr: *mut c_double, berr: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_spbtrf(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                          ab: *mut c_float, ldab: c_int)
                          -> c_int;
    pub fn LAPACKE_dpbtrf(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                          ab: *mut c_double, ldab: c_int)
                          -> c_int;
    pub fn LAPACKE_cpbtrf(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                          ab: *mut c_float_complex, ldab: c_int)
                          -> c_int;
    pub fn LAPACKE_zpbtrf(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                          ab: *mut c_double_complex, ldab: c_int)
                          -> c_int;

    pub fn LAPACKE_spbtrs(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int, nrhs: c_int,
                          ab: *const c_float, ldab: c_int, b: *mut c_float, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_dpbtrs(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int, nrhs: c_int,
                          ab: *const c_double, ldab: c_int, b: *mut c_double, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_cpbtrs(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int, nrhs: c_int,
                          ab: *const c_float_complex, ldab: c_int, b: *mut c_float_complex,
                          ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_zpbtrs(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int, nrhs: c_int,
                          ab: *const c_double_complex, ldab: c_int, b: *mut c_double_complex,
                          ldb: c_int)
                          -> c_int;

    pub fn LAPACKE_spftrf(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          a: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dpftrf(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          a: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cpftrf(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          a: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zpftrf(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          a: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_spftri(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          a: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dpftri(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          a: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cpftri(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          a: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zpftri(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          a: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_spftrs(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          nrhs: c_int, a: *const c_float, b: *mut c_float, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_dpftrs(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          nrhs: c_int, a: *const c_double, b: *mut c_double, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_cpftrs(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          nrhs: c_int, a: *const c_float_complex, b: *mut c_float_complex,
                          ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_zpftrs(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          nrhs: c_int, a: *const c_double_complex, b: *mut c_double_complex,
                          ldb: c_int)
                          -> c_int;

    pub fn LAPACKE_spocon(matrix_layout: c_int, uplo: c_char, n: c_int, a: *const c_float,
                          lda: c_int, anorm: c_float, rcond: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dpocon(matrix_layout: c_int, uplo: c_char, n: c_int, a: *const c_double,
                          lda: c_int, anorm: c_double, rcond: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cpocon(matrix_layout: c_int, uplo: c_char, n: c_int, a: *const c_float_complex,
                          lda: c_int, anorm: c_float, rcond: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zpocon(matrix_layout: c_int, uplo: c_char, n: c_int, a: *const c_double_complex,
                          lda: c_int, anorm: c_double, rcond: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_spoequ(matrix_layout: c_int, n: c_int, a: *const c_float, lda: c_int,
                          s: *mut c_float, scond: *mut c_float, amax: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dpoequ(matrix_layout: c_int, n: c_int, a: *const c_double, lda: c_int,
                          s: *mut c_double, scond: *mut c_double, amax: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cpoequ(matrix_layout: c_int, n: c_int, a: *const c_float_complex, lda: c_int,
                          s: *mut c_float, scond: *mut c_float, amax: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zpoequ(matrix_layout: c_int, n: c_int, a: *const c_double_complex, lda: c_int,
                          s: *mut c_double, scond: *mut c_double, amax: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_spoequb(matrix_layout: c_int, n: c_int, a: *const c_float, lda: c_int,
                           s: *mut c_float, scond: *mut c_float, amax: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_dpoequb(matrix_layout: c_int, n: c_int, a: *const c_double, lda: c_int,
                           s: *mut c_double, scond: *mut c_double, amax: *mut c_double)
                           -> c_int;
    pub fn LAPACKE_cpoequb(matrix_layout: c_int, n: c_int, a: *const c_float_complex, lda: c_int,
                           s: *mut c_float, scond: *mut c_float, amax: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_zpoequb(matrix_layout: c_int, n: c_int, a: *const c_double_complex, lda: c_int,
                           s: *mut c_double, scond: *mut c_double, amax: *mut c_double)
                           -> c_int;

    pub fn LAPACKE_sporfs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *const c_float, lda: c_int, af: *const c_float, ldaf: c_int,
                          b: *const c_float, ldb: c_int, x: *mut c_float, ldx: c_int,
                          ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dporfs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *const c_double, lda: c_int, af: *const c_double, ldaf: c_int,
                          b: *const c_double, ldb: c_int, x: *mut c_double, ldx: c_int,
                          ferr: *mut c_double, berr: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cporfs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *const c_float_complex, lda: c_int, af: *const c_float_complex,
                          ldaf: c_int, b: *const c_float_complex, ldb: c_int,
                          x: *mut c_float_complex, ldx: c_int, ferr: *mut c_float,
                          berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zporfs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *const c_double_complex, lda: c_int, af: *const c_double_complex,
                          ldaf: c_int, b: *const c_double_complex, ldb: c_int,
                          x: *mut c_double_complex, ldx: c_int, ferr: *mut c_double,
                          berr: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sporfsx(matrix_layout: c_int, uplo: c_char, equed: c_char, n: c_int,
                           nrhs: c_int, a: *const c_float, lda: c_int, af: *const c_float,
                           ldaf: c_int, s: *const c_float, b: *const c_float, ldb: c_int,
                           x: *mut c_float, ldx: c_int, rcond: *mut c_float, berr: *mut c_float,
                           n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                           err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_dporfsx(matrix_layout: c_int, uplo: c_char, equed: c_char, n: c_int,
                           nrhs: c_int, a: *const c_double, lda: c_int, af: *const c_double,
                           ldaf: c_int, s: *const c_double, b: *const c_double, ldb: c_int,
                           x: *mut c_double, ldx: c_int, rcond: *mut c_double, berr: *mut c_double,
                           n_err_bnds: c_int, err_bnds_norm: *mut c_double,
                           err_bnds_comp: *mut c_double, nparams: c_int, params: *mut c_double)
                           -> c_int;
    pub fn LAPACKE_cporfsx(matrix_layout: c_int, uplo: c_char, equed: c_char, n: c_int,
                           nrhs: c_int, a: *const c_float_complex, lda: c_int,
                           af: *const c_float_complex, ldaf: c_int, s: *const c_float,
                           b: *const c_float_complex, ldb: c_int, x: *mut c_float_complex,
                           ldx: c_int, rcond: *mut c_float, berr: *mut c_float, n_err_bnds: c_int,
                           err_bnds_norm: *mut c_float, err_bnds_comp: *mut c_float,
                           nparams: c_int, params: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_zporfsx(matrix_layout: c_int, uplo: c_char, equed: c_char, n: c_int,
                           nrhs: c_int, a: *const c_double_complex, lda: c_int,
                           af: *const c_double_complex, ldaf: c_int, s: *const c_double,
                           b: *const c_double_complex, ldb: c_int, x: *mut c_double_complex,
                           ldx: c_int, rcond: *mut c_double, berr: *mut c_double,
                           n_err_bnds: c_int, err_bnds_norm: *mut c_double,
                           err_bnds_comp: *mut c_double, nparams: c_int, params: *mut c_double)
                           -> c_int;

    pub fn LAPACKE_sposv(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                         a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_dposv(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                         a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_cposv(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                         a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_zposv(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                         a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                         ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_dsposv(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int,
                          x: *mut c_double, ldx: c_int, iter: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zcposv(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                          ldb: c_int, x: *mut c_double_complex, ldx: c_int, iter: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_sposvx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *mut c_float, lda: c_int, af: *mut c_float, ldaf: c_int,
                          equed: *mut c_char, s: *mut c_float, b: *mut c_float, ldb: c_int,
                          x: *mut c_float, ldx: c_int, rcond: *mut c_float, ferr: *mut c_float,
                          berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dposvx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *mut c_double, lda: c_int, af: *mut c_double, ldaf: c_int,
                          equed: *mut c_char, s: *mut c_double, b: *mut c_double, ldb: c_int,
                          x: *mut c_double, ldx: c_int, rcond: *mut c_double, ferr: *mut c_double,
                          berr: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cposvx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *mut c_float_complex, lda: c_int, af: *mut c_float_complex,
                          ldaf: c_int, equed: *mut c_char, s: *mut c_float,
                          b: *mut c_float_complex, ldb: c_int, x: *mut c_float_complex, ldx: c_int,
                          rcond: *mut c_float, ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zposvx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *mut c_double_complex, lda: c_int, af: *mut c_double_complex,
                          ldaf: c_int, equed: *mut c_char, s: *mut c_double,
                          b: *mut c_double_complex, ldb: c_int, x: *mut c_double_complex,
                          ldx: c_int, rcond: *mut c_double, ferr: *mut c_double,
                          berr: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sposvxx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                           a: *mut c_float, lda: c_int, af: *mut c_float, ldaf: c_int,
                           equed: *mut c_char, s: *mut c_float, b: *mut c_float, ldb: c_int,
                           x: *mut c_float, ldx: c_int, rcond: *mut c_float, rpvgrw: *mut c_float,
                           berr: *mut c_float, n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                           err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_dposvxx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                           a: *mut c_double, lda: c_int, af: *mut c_double, ldaf: c_int,
                           equed: *mut c_char, s: *mut c_double, b: *mut c_double, ldb: c_int,
                           x: *mut c_double, ldx: c_int, rcond: *mut c_double,
                           rpvgrw: *mut c_double, berr: *mut c_double, n_err_bnds: c_int,
                           err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                           nparams: c_int, params: *mut c_double)
                           -> c_int;
    pub fn LAPACKE_cposvxx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                           a: *mut c_float_complex, lda: c_int, af: *mut c_float_complex,
                           ldaf: c_int, equed: *mut c_char, s: *mut c_float,
                           b: *mut c_float_complex, ldb: c_int, x: *mut c_float_complex,
                           ldx: c_int, rcond: *mut c_float, rpvgrw: *mut c_float,
                           berr: *mut c_float, n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                           err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_zposvxx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                           a: *mut c_double_complex, lda: c_int, af: *mut c_double_complex,
                           ldaf: c_int, equed: *mut c_char, s: *mut c_double,
                           b: *mut c_double_complex, ldb: c_int, x: *mut c_double_complex,
                           ldx: c_int, rcond: *mut c_double, rpvgrw: *mut c_double,
                           berr: *mut c_double, n_err_bnds: c_int, err_bnds_norm: *mut c_double,
                           err_bnds_comp: *mut c_double, nparams: c_int, params: *mut c_double)
                           -> c_int;

    pub fn LAPACKE_spotrf2(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float,
                           lda: c_int)
                           -> c_int;
    pub fn LAPACKE_dpotrf2(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double,
                           lda: c_int)
                           -> c_int;
    pub fn LAPACKE_cpotrf2(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float_complex,
                           lda: c_int)
                           -> c_int;
    pub fn LAPACKE_zpotrf2(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double_complex,
                           lda: c_int)
                           -> c_int;

    pub fn LAPACKE_spotrf(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float,
                          lda: c_int)
                          -> c_int;
    pub fn LAPACKE_dpotrf(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double,
                          lda: c_int)
                          -> c_int;
    pub fn LAPACKE_cpotrf(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float_complex,
                          lda: c_int)
                          -> c_int;
    pub fn LAPACKE_zpotrf(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double_complex,
                          lda: c_int)
                          -> c_int;

    pub fn LAPACKE_spotri(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float,
                          lda: c_int)
                          -> c_int;
    pub fn LAPACKE_dpotri(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double,
                          lda: c_int)
                          -> c_int;
    pub fn LAPACKE_cpotri(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float_complex,
                          lda: c_int)
                          -> c_int;
    pub fn LAPACKE_zpotri(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double_complex,
                          lda: c_int)
                          -> c_int;

    pub fn LAPACKE_spotrs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *const c_float, lda: c_int, b: *mut c_float, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_dpotrs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *const c_double, lda: c_int, b: *mut c_double, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_cpotrs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *const c_float_complex, lda: c_int, b: *mut c_float_complex,
                          ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_zpotrs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *const c_double_complex, lda: c_int, b: *mut c_double_complex,
                          ldb: c_int)
                          -> c_int;

    pub fn LAPACKE_sppcon(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *const c_float,
                          anorm: c_float, rcond: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dppcon(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *const c_double,
                          anorm: c_double, rcond: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cppcon(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *const c_float_complex,
                          anorm: c_float, rcond: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zppcon(matrix_layout: c_int, uplo: c_char, n: c_int,
                          ap: *const c_double_complex, anorm: c_double, rcond: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sppequ(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *const c_float,
                          s: *mut c_float, scond: *mut c_float, amax: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dppequ(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *const c_double,
                          s: *mut c_double, scond: *mut c_double, amax: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cppequ(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *const c_float_complex,
                          s: *mut c_float, scond: *mut c_float, amax: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zppequ(matrix_layout: c_int, uplo: c_char, n: c_int,
                          ap: *const c_double_complex, s: *mut c_double, scond: *mut c_double,
                          amax: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_spprfs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *const c_float, afp: *const c_float, b: *const c_float, ldb: c_int,
                          x: *mut c_float, ldx: c_int, ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dpprfs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *const c_double, afp: *const c_double, b: *const c_double,
                          ldb: c_int, x: *mut c_double, ldx: c_int, ferr: *mut c_double,
                          berr: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cpprfs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *const c_float_complex, afp: *const c_float_complex,
                          b: *const c_float_complex, ldb: c_int, x: *mut c_float_complex,
                          ldx: c_int, ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zpprfs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *const c_double_complex, afp: *const c_double_complex,
                          b: *const c_double_complex, ldb: c_int, x: *mut c_double_complex,
                          ldx: c_int, ferr: *mut c_double, berr: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sppsv(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                         ap: *mut c_float, b: *mut c_float, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_dppsv(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                         ap: *mut c_double, b: *mut c_double, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_cppsv(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                         ap: *mut c_float_complex, b: *mut c_float_complex, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_zppsv(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                         ap: *mut c_double_complex, b: *mut c_double_complex, ldb: c_int)
                         -> c_int;

    pub fn LAPACKE_sppsvx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *mut c_float, afp: *mut c_float, equed: *mut c_char, s: *mut c_float,
                          b: *mut c_float, ldb: c_int, x: *mut c_float, ldx: c_int,
                          rcond: *mut c_float, ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dppsvx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *mut c_double, afp: *mut c_double, equed: *mut c_char,
                          s: *mut c_double, b: *mut c_double, ldb: c_int, x: *mut c_double,
                          ldx: c_int, rcond: *mut c_double, ferr: *mut c_double,
                          berr: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cppsvx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *mut c_float_complex, afp: *mut c_float_complex, equed: *mut c_char,
                          s: *mut c_float, b: *mut c_float_complex, ldb: c_int,
                          x: *mut c_float_complex, ldx: c_int, rcond: *mut c_float,
                          ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zppsvx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *mut c_double_complex, afp: *mut c_double_complex,
                          equed: *mut c_char, s: *mut c_double, b: *mut c_double_complex,
                          ldb: c_int, x: *mut c_double_complex, ldx: c_int, rcond: *mut c_double,
                          ferr: *mut c_double, berr: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_spptrf(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_float) -> c_int;
    pub fn LAPACKE_dpptrf(matrix_layout: c_int, uplo: c_char, n: c_int,
                          ap: *mut c_double) -> c_int;
    pub fn LAPACKE_cpptrf(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zpptrf(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_spptri(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_float) -> c_int;
    pub fn LAPACKE_dpptri(matrix_layout: c_int, uplo: c_char, n: c_int,
                          ap: *mut c_double) -> c_int;
    pub fn LAPACKE_cpptri(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zpptri(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_spptrs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *const c_float, b: *mut c_float, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_dpptrs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *const c_double, b: *mut c_double, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_cpptrs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *const c_float_complex, b: *mut c_float_complex, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_zpptrs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *const c_double_complex, b: *mut c_double_complex, ldb: c_int)
                          -> c_int;

    pub fn LAPACKE_spstrf(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float,
                          lda: c_int, piv: *mut c_int, rank: *mut c_int, tol: c_float)
                          -> c_int;
    pub fn LAPACKE_dpstrf(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double,
                          lda: c_int, piv: *mut c_int, rank: *mut c_int, tol: c_double)
                          -> c_int;
    pub fn LAPACKE_cpstrf(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float_complex,
                          lda: c_int, piv: *mut c_int, rank: *mut c_int, tol: c_float)
                          -> c_int;
    pub fn LAPACKE_zpstrf(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double_complex,
                          lda: c_int, piv: *mut c_int, rank: *mut c_int, tol: c_double)
                          -> c_int;

    pub fn LAPACKE_sptcon(n: c_int, d: *const c_float, e: *const c_float, anorm: c_float,
                          rcond: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dptcon(n: c_int, d: *const c_double, e: *const c_double, anorm: c_double,
                          rcond: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cptcon(n: c_int, d: *const c_float, e: *const c_float_complex, anorm: c_float,
                          rcond: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zptcon(n: c_int, d: *const c_double, e: *const c_double_complex,
                          anorm: c_double, rcond: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_spteqr(matrix_layout: c_int, compz: c_char, n: c_int, d: *mut c_float,
                          e: *mut c_float, z: *mut c_float, ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_dpteqr(matrix_layout: c_int, compz: c_char, n: c_int, d: *mut c_double,
                          e: *mut c_double, z: *mut c_double, ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_cpteqr(matrix_layout: c_int, compz: c_char, n: c_int, d: *mut c_float,
                          e: *mut c_float, z: *mut c_float_complex, ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_zpteqr(matrix_layout: c_int, compz: c_char, n: c_int, d: *mut c_double,
                          e: *mut c_double, z: *mut c_double_complex, ldz: c_int)
                          -> c_int;

    pub fn LAPACKE_sptrfs(matrix_layout: c_int, n: c_int, nrhs: c_int, d: *const c_float,
                          e: *const c_float, df: *const c_float, ef: *const c_float,
                          b: *const c_float, ldb: c_int, x: *mut c_float, ldx: c_int,
                          ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dptrfs(matrix_layout: c_int, n: c_int, nrhs: c_int, d: *const c_double,
                          e: *const c_double, df: *const c_double, ef: *const c_double,
                          b: *const c_double, ldb: c_int, x: *mut c_double, ldx: c_int,
                          ferr: *mut c_double, berr: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cptrfs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          d: *const c_float, e: *const c_float_complex, df: *const c_float,
                          ef: *const c_float_complex, b: *const c_float_complex, ldb: c_int,
                          x: *mut c_float_complex, ldx: c_int, ferr: *mut c_float,
                          berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zptrfs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          d: *const c_double, e: *const c_double_complex, df: *const c_double,
                          ef: *const c_double_complex, b: *const c_double_complex, ldb: c_int,
                          x: *mut c_double_complex, ldx: c_int, ferr: *mut c_double,
                          berr: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sptsv(matrix_layout: c_int, n: c_int, nrhs: c_int, d: *mut c_float,
                         e: *mut c_float, b: *mut c_float, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_dptsv(matrix_layout: c_int, n: c_int, nrhs: c_int, d: *mut c_double,
                         e: *mut c_double, b: *mut c_double, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_cptsv(matrix_layout: c_int, n: c_int, nrhs: c_int, d: *mut c_float,
                         e: *mut c_float_complex, b: *mut c_float_complex, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_zptsv(matrix_layout: c_int, n: c_int, nrhs: c_int, d: *mut c_double,
                         e: *mut c_double_complex, b: *mut c_double_complex, ldb: c_int)
                         -> c_int;

    pub fn LAPACKE_sptsvx(matrix_layout: c_int, fact: c_char, n: c_int, nrhs: c_int,
                          d: *const c_float, e: *const c_float, df: *mut c_float, ef: *mut c_float,
                          b: *const c_float, ldb: c_int, x: *mut c_float, ldx: c_int,
                          rcond: *mut c_float, ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dptsvx(matrix_layout: c_int, fact: c_char, n: c_int, nrhs: c_int,
                          d: *const c_double, e: *const c_double, df: *mut c_double,
                          ef: *mut c_double, b: *const c_double, ldb: c_int, x: *mut c_double,
                          ldx: c_int, rcond: *mut c_double, ferr: *mut c_double,
                          berr: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cptsvx(matrix_layout: c_int, fact: c_char, n: c_int, nrhs: c_int,
                          d: *const c_float, e: *const c_float_complex, df: *mut c_float,
                          ef: *mut c_float_complex, b: *const c_float_complex, ldb: c_int,
                          x: *mut c_float_complex, ldx: c_int, rcond: *mut c_float,
                          ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zptsvx(matrix_layout: c_int, fact: c_char, n: c_int, nrhs: c_int,
                          d: *const c_double, e: *const c_double_complex, df: *mut c_double,
                          ef: *mut c_double_complex, b: *const c_double_complex, ldb: c_int,
                          x: *mut c_double_complex, ldx: c_int, rcond: *mut c_double,
                          ferr: *mut c_double, berr: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_spttrf(n: c_int, d: *mut c_float, e: *mut c_float) -> c_int;
    pub fn LAPACKE_dpttrf(n: c_int, d: *mut c_double, e: *mut c_double) -> c_int;
    pub fn LAPACKE_cpttrf(n: c_int, d: *mut c_float, e: *mut c_float_complex) -> c_int;
    pub fn LAPACKE_zpttrf(n: c_int, d: *mut c_double, e: *mut c_double_complex) -> c_int;

    pub fn LAPACKE_spttrs(matrix_layout: c_int, n: c_int, nrhs: c_int, d: *const c_float,
                          e: *const c_float, b: *mut c_float, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_dpttrs(matrix_layout: c_int, n: c_int, nrhs: c_int, d: *const c_double,
                          e: *const c_double, b: *mut c_double, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_cpttrs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          d: *const c_float, e: *const c_float_complex, b: *mut c_float_complex,
                          ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_zpttrs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          d: *const c_double, e: *const c_double_complex, b: *mut c_double_complex,
                          ldb: c_int)
                          -> c_int;

    pub fn LAPACKE_ssbev(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int, kd: c_int,
                         ab: *mut c_float, ldab: c_int, w: *mut c_float, z: *mut c_float,
                         ldz: c_int)
                         -> c_int;
    pub fn LAPACKE_dsbev(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int, kd: c_int,
                         ab: *mut c_double, ldab: c_int, w: *mut c_double, z: *mut c_double,
                         ldz: c_int)
                         -> c_int;

    pub fn LAPACKE_ssbevd(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int, kd: c_int,
                          ab: *mut c_float, ldab: c_int, w: *mut c_float, z: *mut c_float,
                          ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_dsbevd(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int, kd: c_int,
                          ab: *mut c_double, ldab: c_int, w: *mut c_double, z: *mut c_double,
                          ldz: c_int)
                          -> c_int;

    pub fn LAPACKE_ssbevx(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                          n: c_int, kd: c_int, ab: *mut c_float, ldab: c_int, q: *mut c_float,
                          ldq: c_int, vl: c_float, vu: c_float, il: c_int, iu: c_int,
                          abstol: c_float, m: *mut c_int, w: *mut c_float, z: *mut c_float,
                          ldz: c_int, ifail: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dsbevx(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                          n: c_int, kd: c_int, ab: *mut c_double, ldab: c_int, q: *mut c_double,
                          ldq: c_int, vl: c_double, vu: c_double, il: c_int, iu: c_int,
                          abstol: c_double, m: *mut c_int, w: *mut c_double, z: *mut c_double,
                          ldz: c_int, ifail: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_ssbgst(matrix_layout: c_int, vect: c_char, uplo: c_char, n: c_int, ka: c_int,
                          kb: c_int, ab: *mut c_float, ldab: c_int, bb: *const c_float,
                          ldbb: c_int, x: *mut c_float, ldx: c_int)
                          -> c_int;
    pub fn LAPACKE_dsbgst(matrix_layout: c_int, vect: c_char, uplo: c_char, n: c_int, ka: c_int,
                          kb: c_int, ab: *mut c_double, ldab: c_int, bb: *const c_double,
                          ldbb: c_int, x: *mut c_double, ldx: c_int)
                          -> c_int;

    pub fn LAPACKE_ssbgv(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int, ka: c_int,
                         kb: c_int, ab: *mut c_float, ldab: c_int, bb: *mut c_float, ldbb: c_int,
                         w: *mut c_float, z: *mut c_float, ldz: c_int)
                         -> c_int;
    pub fn LAPACKE_dsbgv(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int, ka: c_int,
                         kb: c_int, ab: *mut c_double, ldab: c_int, bb: *mut c_double, ldbb: c_int,
                         w: *mut c_double, z: *mut c_double, ldz: c_int)
                         -> c_int;

    pub fn LAPACKE_ssbgvd(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int, ka: c_int,
                          kb: c_int, ab: *mut c_float, ldab: c_int, bb: *mut c_float, ldbb: c_int,
                          w: *mut c_float, z: *mut c_float, ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_dsbgvd(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int, ka: c_int,
                          kb: c_int, ab: *mut c_double, ldab: c_int, bb: *mut c_double,
                          ldbb: c_int, w: *mut c_double, z: *mut c_double, ldz: c_int)
                          -> c_int;

    pub fn LAPACKE_ssbgvx(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                          n: c_int, ka: c_int, kb: c_int, ab: *mut c_float, ldab: c_int,
                          bb: *mut c_float, ldbb: c_int, q: *mut c_float, ldq: c_int, vl: c_float,
                          vu: c_float, il: c_int, iu: c_int, abstol: c_float, m: *mut c_int,
                          w: *mut c_float, z: *mut c_float, ldz: c_int, ifail: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dsbgvx(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                          n: c_int, ka: c_int, kb: c_int, ab: *mut c_double, ldab: c_int,
                          bb: *mut c_double, ldbb: c_int, q: *mut c_double, ldq: c_int,
                          vl: c_double, vu: c_double, il: c_int, iu: c_int, abstol: c_double,
                          m: *mut c_int, w: *mut c_double, z: *mut c_double, ldz: c_int,
                          ifail: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_ssbtrd(matrix_layout: c_int, vect: c_char, uplo: c_char, n: c_int, kd: c_int,
                          ab: *mut c_float, ldab: c_int, d: *mut c_float, e: *mut c_float,
                          q: *mut c_float, ldq: c_int)
                          -> c_int;
    pub fn LAPACKE_dsbtrd(matrix_layout: c_int, vect: c_char, uplo: c_char, n: c_int, kd: c_int,
                          ab: *mut c_double, ldab: c_int, d: *mut c_double, e: *mut c_double,
                          q: *mut c_double, ldq: c_int)
                          -> c_int;

    pub fn LAPACKE_ssfrk(matrix_layout: c_int, transr: c_char, uplo: c_char, trans: c_char,
                         n: c_int, k: c_int, alpha: c_float, a: *const c_float, lda: c_int,
                         beta: c_float, c: *mut c_float)
                         -> c_int;
    pub fn LAPACKE_dsfrk(matrix_layout: c_int, transr: c_char, uplo: c_char, trans: c_char,
                         n: c_int, k: c_int, alpha: c_double, a: *const c_double, lda: c_int,
                         beta: c_double, c: *mut c_double)
                         -> c_int;

    pub fn LAPACKE_sspcon(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *const c_float,
                          ipiv: *const c_int, anorm: c_float, rcond: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dspcon(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *const c_double,
                          ipiv: *const c_int, anorm: c_double, rcond: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cspcon(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *const c_float_complex,
                          ipiv: *const c_int, anorm: c_float, rcond: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zspcon(matrix_layout: c_int, uplo: c_char, n: c_int,
                          ap: *const c_double_complex, ipiv: *const c_int, anorm: c_double,
                          rcond: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sspev(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                         ap: *mut c_float, w: *mut c_float, z: *mut c_float, ldz: c_int)
                         -> c_int;
    pub fn LAPACKE_dspev(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                         ap: *mut c_double, w: *mut c_double, z: *mut c_double, ldz: c_int)
                         -> c_int;

    pub fn LAPACKE_sspevd(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                          ap: *mut c_float, w: *mut c_float, z: *mut c_float, ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_dspevd(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                          ap: *mut c_double, w: *mut c_double, z: *mut c_double, ldz: c_int)
                          -> c_int;

    pub fn LAPACKE_sspevx(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                          n: c_int, ap: *mut c_float, vl: c_float, vu: c_float, il: c_int,
                          iu: c_int, abstol: c_float, m: *mut c_int, w: *mut c_float,
                          z: *mut c_float, ldz: c_int, ifail: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dspevx(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                          n: c_int, ap: *mut c_double, vl: c_double, vu: c_double, il: c_int,
                          iu: c_int, abstol: c_double, m: *mut c_int, w: *mut c_double,
                          z: *mut c_double, ldz: c_int, ifail: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_sspgst(matrix_layout: c_int, itype: c_int, uplo: c_char, n: c_int,
                          ap: *mut c_float, bp: *const c_float)
                          -> c_int;
    pub fn LAPACKE_dspgst(matrix_layout: c_int, itype: c_int, uplo: c_char, n: c_int,
                          ap: *mut c_double, bp: *const c_double)
                          -> c_int;

    pub fn LAPACKE_sspgv(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char, n: c_int,
                         ap: *mut c_float, bp: *mut c_float, w: *mut c_float, z: *mut c_float,
                         ldz: c_int)
                         -> c_int;
    pub fn LAPACKE_dspgv(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char, n: c_int,
                         ap: *mut c_double, bp: *mut c_double, w: *mut c_double, z: *mut c_double,
                         ldz: c_int)
                         -> c_int;

    pub fn LAPACKE_sspgvd(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char, n: c_int,
                          ap: *mut c_float, bp: *mut c_float, w: *mut c_float, z: *mut c_float,
                          ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_dspgvd(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char, n: c_int,
                          ap: *mut c_double, bp: *mut c_double, w: *mut c_double, z: *mut c_double,
                          ldz: c_int)
                          -> c_int;

    pub fn LAPACKE_sspgvx(matrix_layout: c_int, itype: c_int, jobz: c_char, range: c_char,
                          uplo: c_char, n: c_int, ap: *mut c_float, bp: *mut c_float, vl: c_float,
                          vu: c_float, il: c_int, iu: c_int, abstol: c_float, m: *mut c_int,
                          w: *mut c_float, z: *mut c_float, ldz: c_int, ifail: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dspgvx(matrix_layout: c_int, itype: c_int, jobz: c_char, range: c_char,
                          uplo: c_char, n: c_int, ap: *mut c_double, bp: *mut c_double,
                          vl: c_double, vu: c_double, il: c_int, iu: c_int, abstol: c_double,
                          m: *mut c_int, w: *mut c_double, z: *mut c_double, ldz: c_int,
                          ifail: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_ssprfs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *const c_float, afp: *const c_float, ipiv: *const c_int,
                          b: *const c_float, ldb: c_int, x: *mut c_float, ldx: c_int,
                          ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dsprfs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *const c_double, afp: *const c_double, ipiv: *const c_int,
                          b: *const c_double, ldb: c_int, x: *mut c_double, ldx: c_int,
                          ferr: *mut c_double, berr: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_csprfs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *const c_float_complex, afp: *const c_float_complex,
                          ipiv: *const c_int, b: *const c_float_complex, ldb: c_int,
                          x: *mut c_float_complex, ldx: c_int, ferr: *mut c_float,
                          berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zsprfs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *const c_double_complex, afp: *const c_double_complex,
                          ipiv: *const c_int, b: *const c_double_complex, ldb: c_int,
                          x: *mut c_double_complex, ldx: c_int, ferr: *mut c_double,
                          berr: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_sspsv(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                         ap: *mut c_float, ipiv: *mut c_int, b: *mut c_float, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_dspsv(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                         ap: *mut c_double, ipiv: *mut c_int, b: *mut c_double, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_cspsv(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                         ap: *mut c_float_complex, ipiv: *mut c_int, b: *mut c_float_complex,
                         ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_zspsv(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                         ap: *mut c_double_complex, ipiv: *mut c_int, b: *mut c_double_complex,
                         ldb: c_int)
                         -> c_int;

    pub fn LAPACKE_sspsvx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *const c_float, afp: *mut c_float, ipiv: *mut c_int,
                          b: *const c_float, ldb: c_int, x: *mut c_float, ldx: c_int,
                          rcond: *mut c_float, ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dspsvx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *const c_double, afp: *mut c_double, ipiv: *mut c_int,
                          b: *const c_double, ldb: c_int, x: *mut c_double, ldx: c_int,
                          rcond: *mut c_double, ferr: *mut c_double, berr: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_cspsvx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *const c_float_complex, afp: *mut c_float_complex, ipiv: *mut c_int,
                          b: *const c_float_complex, ldb: c_int, x: *mut c_float_complex,
                          ldx: c_int, rcond: *mut c_float, ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zspsvx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *const c_double_complex, afp: *mut c_double_complex,
                          ipiv: *mut c_int, b: *const c_double_complex, ldb: c_int,
                          x: *mut c_double_complex, ldx: c_int, rcond: *mut c_double,
                          ferr: *mut c_double, berr: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_ssptrd(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_float,
                          d: *mut c_float, e: *mut c_float, tau: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dsptrd(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_double,
                          d: *mut c_double, e: *mut c_double, tau: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_ssptrf(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_float,
                          ipiv: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dsptrf(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_double,
                          ipiv: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_csptrf(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_float_complex,
                          ipiv: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zsptrf(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_double_complex,
                          ipiv: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_ssptri(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_float,
                          ipiv: *const c_int)
                          -> c_int;
    pub fn LAPACKE_dsptri(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_double,
                          ipiv: *const c_int)
                          -> c_int;
    pub fn LAPACKE_csptri(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_float_complex,
                          ipiv: *const c_int)
                          -> c_int;
    pub fn LAPACKE_zsptri(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_double_complex,
                          ipiv: *const c_int)
                          -> c_int;

    pub fn LAPACKE_ssptrs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *const c_float, ipiv: *const c_int, b: *mut c_float, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_dsptrs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *const c_double, ipiv: *const c_int, b: *mut c_double, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_csptrs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *const c_float_complex, ipiv: *const c_int, b: *mut c_float_complex,
                          ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_zsptrs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          ap: *const c_double_complex, ipiv: *const c_int,
                          b: *mut c_double_complex, ldb: c_int)
                          -> c_int;

    pub fn LAPACKE_sstebz(range: c_char, order: c_char, n: c_int, vl: c_float, vu: c_float,
                          il: c_int, iu: c_int, abstol: c_float, d: *const c_float,
                          e: *const c_float, m: *mut c_int, nsplit: *mut c_int, w: *mut c_float,
                          iblock: *mut c_int, isplit: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dstebz(range: c_char, order: c_char, n: c_int, vl: c_double, vu: c_double,
                          il: c_int, iu: c_int, abstol: c_double, d: *const c_double,
                          e: *const c_double, m: *mut c_int, nsplit: *mut c_int, w: *mut c_double,
                          iblock: *mut c_int, isplit: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_sstedc(matrix_layout: c_int, compz: c_char, n: c_int, d: *mut c_float,
                          e: *mut c_float, z: *mut c_float, ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_dstedc(matrix_layout: c_int, compz: c_char, n: c_int, d: *mut c_double,
                          e: *mut c_double, z: *mut c_double, ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_cstedc(matrix_layout: c_int, compz: c_char, n: c_int, d: *mut c_float,
                          e: *mut c_float, z: *mut c_float_complex, ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_zstedc(matrix_layout: c_int, compz: c_char, n: c_int, d: *mut c_double,
                          e: *mut c_double, z: *mut c_double_complex, ldz: c_int)
                          -> c_int;

    pub fn LAPACKE_sstegr(matrix_layout: c_int, jobz: c_char, range: c_char, n: c_int,
                          d: *mut c_float, e: *mut c_float, vl: c_float, vu: c_float, il: c_int,
                          iu: c_int, abstol: c_float, m: *mut c_int, w: *mut c_float,
                          z: *mut c_float, ldz: c_int, isuppz: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dstegr(matrix_layout: c_int, jobz: c_char, range: c_char, n: c_int,
                          d: *mut c_double, e: *mut c_double, vl: c_double, vu: c_double,
                          il: c_int, iu: c_int, abstol: c_double, m: *mut c_int, w: *mut c_double,
                          z: *mut c_double, ldz: c_int, isuppz: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_cstegr(matrix_layout: c_int, jobz: c_char, range: c_char, n: c_int,
                          d: *mut c_float, e: *mut c_float, vl: c_float, vu: c_float, il: c_int,
                          iu: c_int, abstol: c_float, m: *mut c_int, w: *mut c_float,
                          z: *mut c_float_complex, ldz: c_int, isuppz: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zstegr(matrix_layout: c_int, jobz: c_char, range: c_char, n: c_int,
                          d: *mut c_double, e: *mut c_double, vl: c_double, vu: c_double,
                          il: c_int, iu: c_int, abstol: c_double, m: *mut c_int, w: *mut c_double,
                          z: *mut c_double_complex, ldz: c_int, isuppz: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_sstein(matrix_layout: c_int, n: c_int, d: *const c_float, e: *const c_float,
                          m: c_int, w: *const c_float, iblock: *const c_int, isplit: *const c_int,
                          z: *mut c_float, ldz: c_int, ifailv: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dstein(matrix_layout: c_int, n: c_int, d: *const c_double, e: *const c_double,
                          m: c_int, w: *const c_double, iblock: *const c_int, isplit: *const c_int,
                          z: *mut c_double, ldz: c_int, ifailv: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_cstein(matrix_layout: c_int, n: c_int, d: *const c_float, e: *const c_float,
                          m: c_int, w: *const c_float, iblock: *const c_int, isplit: *const c_int,
                          z: *mut c_float_complex, ldz: c_int, ifailv: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zstein(matrix_layout: c_int, n: c_int, d: *const c_double, e: *const c_double,
                          m: c_int, w: *const c_double, iblock: *const c_int, isplit: *const c_int,
                          z: *mut c_double_complex, ldz: c_int, ifailv: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_sstemr(matrix_layout: c_int, jobz: c_char, range: c_char, n: c_int,
                          d: *mut c_float, e: *mut c_float, vl: c_float, vu: c_float, il: c_int,
                          iu: c_int, m: *mut c_int, w: *mut c_float, z: *mut c_float, ldz: c_int,
                          nzc: c_int, isuppz: *mut c_int, tryrac: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dstemr(matrix_layout: c_int, jobz: c_char, range: c_char, n: c_int,
                          d: *mut c_double, e: *mut c_double, vl: c_double, vu: c_double,
                          il: c_int, iu: c_int, m: *mut c_int, w: *mut c_double, z: *mut c_double,
                          ldz: c_int, nzc: c_int, isuppz: *mut c_int, tryrac: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_cstemr(matrix_layout: c_int, jobz: c_char, range: c_char, n: c_int,
                          d: *mut c_float, e: *mut c_float, vl: c_float, vu: c_float, il: c_int,
                          iu: c_int, m: *mut c_int, w: *mut c_float, z: *mut c_float_complex,
                          ldz: c_int, nzc: c_int, isuppz: *mut c_int, tryrac: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zstemr(matrix_layout: c_int, jobz: c_char, range: c_char, n: c_int,
                          d: *mut c_double, e: *mut c_double, vl: c_double, vu: c_double,
                          il: c_int, iu: c_int, m: *mut c_int, w: *mut c_double,
                          z: *mut c_double_complex, ldz: c_int, nzc: c_int, isuppz: *mut c_int,
                          tryrac: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_ssteqr(matrix_layout: c_int, compz: c_char, n: c_int, d: *mut c_float,
                          e: *mut c_float, z: *mut c_float, ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_dsteqr(matrix_layout: c_int, compz: c_char, n: c_int, d: *mut c_double,
                          e: *mut c_double, z: *mut c_double, ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_csteqr(matrix_layout: c_int, compz: c_char, n: c_int, d: *mut c_float,
                          e: *mut c_float, z: *mut c_float_complex, ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_zsteqr(matrix_layout: c_int, compz: c_char, n: c_int, d: *mut c_double,
                          e: *mut c_double, z: *mut c_double_complex, ldz: c_int)
                          -> c_int;

    pub fn LAPACKE_ssterf(n: c_int, d: *mut c_float, e: *mut c_float) -> c_int;
    pub fn LAPACKE_dsterf(n: c_int, d: *mut c_double, e: *mut c_double) -> c_int;

    pub fn LAPACKE_sstev(matrix_layout: c_int, jobz: c_char, n: c_int, d: *mut c_float,
                         e: *mut c_float, z: *mut c_float, ldz: c_int)
                         -> c_int;
    pub fn LAPACKE_dstev(matrix_layout: c_int, jobz: c_char, n: c_int, d: *mut c_double,
                         e: *mut c_double, z: *mut c_double, ldz: c_int)
                         -> c_int;

    pub fn LAPACKE_sstevd(matrix_layout: c_int, jobz: c_char, n: c_int, d: *mut c_float,
                          e: *mut c_float, z: *mut c_float, ldz: c_int)
                          -> c_int;
    pub fn LAPACKE_dstevd(matrix_layout: c_int, jobz: c_char, n: c_int, d: *mut c_double,
                          e: *mut c_double, z: *mut c_double, ldz: c_int)
                          -> c_int;

    pub fn LAPACKE_sstevr(matrix_layout: c_int, jobz: c_char, range: c_char, n: c_int,
                          d: *mut c_float, e: *mut c_float, vl: c_float, vu: c_float, il: c_int,
                          iu: c_int, abstol: c_float, m: *mut c_int, w: *mut c_float,
                          z: *mut c_float, ldz: c_int, isuppz: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dstevr(matrix_layout: c_int, jobz: c_char, range: c_char, n: c_int,
                          d: *mut c_double, e: *mut c_double, vl: c_double, vu: c_double,
                          il: c_int, iu: c_int, abstol: c_double, m: *mut c_int, w: *mut c_double,
                          z: *mut c_double, ldz: c_int, isuppz: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_sstevx(matrix_layout: c_int, jobz: c_char, range: c_char, n: c_int,
                          d: *mut c_float, e: *mut c_float, vl: c_float, vu: c_float, il: c_int,
                          iu: c_int, abstol: c_float, m: *mut c_int, w: *mut c_float,
                          z: *mut c_float, ldz: c_int, ifail: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dstevx(matrix_layout: c_int, jobz: c_char, range: c_char, n: c_int,
                          d: *mut c_double, e: *mut c_double, vl: c_double, vu: c_double,
                          il: c_int, iu: c_int, abstol: c_double, m: *mut c_int, w: *mut c_double,
                          z: *mut c_double, ldz: c_int, ifail: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_ssycon(matrix_layout: c_int, uplo: c_char, n: c_int, a: *const c_float,
                          lda: c_int, ipiv: *const c_int, anorm: c_float, rcond: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dsycon(matrix_layout: c_int, uplo: c_char, n: c_int, a: *const c_double,
                          lda: c_int, ipiv: *const c_int, anorm: c_double, rcond: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_csycon(matrix_layout: c_int, uplo: c_char, n: c_int, a: *const c_float_complex,
                          lda: c_int, ipiv: *const c_int, anorm: c_float, rcond: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zsycon(matrix_layout: c_int, uplo: c_char, n: c_int, a: *const c_double_complex,
                          lda: c_int, ipiv: *const c_int, anorm: c_double, rcond: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_ssyequb(matrix_layout: c_int, uplo: c_char, n: c_int, a: *const c_float,
                           lda: c_int, s: *mut c_float, scond: *mut c_float, amax: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_dsyequb(matrix_layout: c_int, uplo: c_char, n: c_int, a: *const c_double,
                           lda: c_int, s: *mut c_double, scond: *mut c_double, amax: *mut c_double)
                           -> c_int;
    pub fn LAPACKE_csyequb(matrix_layout: c_int, uplo: c_char, n: c_int, a: *const c_float_complex,
                           lda: c_int, s: *mut c_float, scond: *mut c_float, amax: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_zsyequb(matrix_layout: c_int, uplo: c_char, n: c_int,
                           a: *const c_double_complex, lda: c_int, s: *mut c_double,
                           scond: *mut c_double, amax: *mut c_double)
                           -> c_int;

    pub fn LAPACKE_ssyev(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                         a: *mut c_float, lda: c_int, w: *mut c_float)
                         -> c_int;
    pub fn LAPACKE_dsyev(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                         a: *mut c_double, lda: c_int, w: *mut c_double)
                         -> c_int;

    pub fn LAPACKE_ssyevd(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                          a: *mut c_float, lda: c_int, w: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dsyevd(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                          a: *mut c_double, lda: c_int, w: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_ssyevr(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                          n: c_int, a: *mut c_float, lda: c_int, vl: c_float, vu: c_float,
                          il: c_int, iu: c_int, abstol: c_float, m: *mut c_int, w: *mut c_float,
                          z: *mut c_float, ldz: c_int, isuppz: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dsyevr(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                          n: c_int, a: *mut c_double, lda: c_int, vl: c_double, vu: c_double,
                          il: c_int, iu: c_int, abstol: c_double, m: *mut c_int, w: *mut c_double,
                          z: *mut c_double, ldz: c_int, isuppz: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_ssyevx(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                          n: c_int, a: *mut c_float, lda: c_int, vl: c_float, vu: c_float,
                          il: c_int, iu: c_int, abstol: c_float, m: *mut c_int, w: *mut c_float,
                          z: *mut c_float, ldz: c_int, ifail: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dsyevx(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                          n: c_int, a: *mut c_double, lda: c_int, vl: c_double, vu: c_double,
                          il: c_int, iu: c_int, abstol: c_double, m: *mut c_int, w: *mut c_double,
                          z: *mut c_double, ldz: c_int, ifail: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_ssygst(matrix_layout: c_int, itype: c_int, uplo: c_char, n: c_int,
                          a: *mut c_float, lda: c_int, b: *const c_float, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_dsygst(matrix_layout: c_int, itype: c_int, uplo: c_char, n: c_int,
                          a: *mut c_double, lda: c_int, b: *const c_double, ldb: c_int)
                          -> c_int;

    pub fn LAPACKE_ssygv(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char, n: c_int,
                         a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int, w: *mut c_float)
                         -> c_int;
    pub fn LAPACKE_dsygv(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char, n: c_int,
                         a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int,
                         w: *mut c_double)
                         -> c_int;

    pub fn LAPACKE_ssygvd(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char, n: c_int,
                          a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int,
                          w: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dsygvd(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char, n: c_int,
                          a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int,
                          w: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_ssygvx(matrix_layout: c_int, itype: c_int, jobz: c_char, range: c_char,
                          uplo: c_char, n: c_int, a: *mut c_float, lda: c_int, b: *mut c_float,
                          ldb: c_int, vl: c_float, vu: c_float, il: c_int, iu: c_int,
                          abstol: c_float, m: *mut c_int, w: *mut c_float, z: *mut c_float,
                          ldz: c_int, ifail: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dsygvx(matrix_layout: c_int, itype: c_int, jobz: c_char, range: c_char,
                          uplo: c_char, n: c_int, a: *mut c_double, lda: c_int, b: *mut c_double,
                          ldb: c_int, vl: c_double, vu: c_double, il: c_int, iu: c_int,
                          abstol: c_double, m: *mut c_int, w: *mut c_double, z: *mut c_double,
                          ldz: c_int, ifail: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_ssyrfs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *const c_float, lda: c_int, af: *const c_float, ldaf: c_int,
                          ipiv: *const c_int, b: *const c_float, ldb: c_int, x: *mut c_float,
                          ldx: c_int, ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dsyrfs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *const c_double, lda: c_int, af: *const c_double, ldaf: c_int,
                          ipiv: *const c_int, b: *const c_double, ldb: c_int, x: *mut c_double,
                          ldx: c_int, ferr: *mut c_double, berr: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_csyrfs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *const c_float_complex, lda: c_int, af: *const c_float_complex,
                          ldaf: c_int, ipiv: *const c_int, b: *const c_float_complex, ldb: c_int,
                          x: *mut c_float_complex, ldx: c_int, ferr: *mut c_float,
                          berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zsyrfs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *const c_double_complex, lda: c_int, af: *const c_double_complex,
                          ldaf: c_int, ipiv: *const c_int, b: *const c_double_complex, ldb: c_int,
                          x: *mut c_double_complex, ldx: c_int, ferr: *mut c_double,
                          berr: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_ssyrfsx(matrix_layout: c_int, uplo: c_char, equed: c_char, n: c_int,
                           nrhs: c_int, a: *const c_float, lda: c_int, af: *const c_float,
                           ldaf: c_int, ipiv: *const c_int, s: *const c_float, b: *const c_float,
                           ldb: c_int, x: *mut c_float, ldx: c_int, rcond: *mut c_float,
                           berr: *mut c_float, n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                           err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_dsyrfsx(matrix_layout: c_int, uplo: c_char, equed: c_char, n: c_int,
                           nrhs: c_int, a: *const c_double, lda: c_int, af: *const c_double,
                           ldaf: c_int, ipiv: *const c_int, s: *const c_double, b: *const c_double,
                           ldb: c_int, x: *mut c_double, ldx: c_int, rcond: *mut c_double,
                           berr: *mut c_double, n_err_bnds: c_int, err_bnds_norm: *mut c_double,
                           err_bnds_comp: *mut c_double, nparams: c_int, params: *mut c_double)
                           -> c_int;
    pub fn LAPACKE_csyrfsx(matrix_layout: c_int, uplo: c_char, equed: c_char, n: c_int,
                           nrhs: c_int, a: *const c_float_complex, lda: c_int,
                           af: *const c_float_complex, ldaf: c_int, ipiv: *const c_int,
                           s: *const c_float, b: *const c_float_complex, ldb: c_int,
                           x: *mut c_float_complex, ldx: c_int, rcond: *mut c_float,
                           berr: *mut c_float, n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                           err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_zsyrfsx(matrix_layout: c_int, uplo: c_char, equed: c_char, n: c_int,
                           nrhs: c_int, a: *const c_double_complex, lda: c_int,
                           af: *const c_double_complex, ldaf: c_int, ipiv: *const c_int,
                           s: *const c_double, b: *const c_double_complex, ldb: c_int,
                           x: *mut c_double_complex, ldx: c_int, rcond: *mut c_double,
                           berr: *mut c_double, n_err_bnds: c_int, err_bnds_norm: *mut c_double,
                           err_bnds_comp: *mut c_double, nparams: c_int, params: *mut c_double)
                           -> c_int;

    pub fn LAPACKE_ssysv(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                         a: *mut c_float, lda: c_int, ipiv: *mut c_int, b: *mut c_float,
                         ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_dsysv(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                         a: *mut c_double, lda: c_int, ipiv: *mut c_int, b: *mut c_double,
                         ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_csysv(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                         a: *mut c_float_complex, lda: c_int, ipiv: *mut c_int,
                         b: *mut c_float_complex, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_zsysv(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                         a: *mut c_double_complex, lda: c_int, ipiv: *mut c_int,
                         b: *mut c_double_complex, ldb: c_int)
                         -> c_int;

    pub fn LAPACKE_ssysvx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *const c_float, lda: c_int, af: *mut c_float, ldaf: c_int,
                          ipiv: *mut c_int, b: *const c_float, ldb: c_int, x: *mut c_float,
                          ldx: c_int, rcond: *mut c_float, ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dsysvx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *const c_double, lda: c_int, af: *mut c_double, ldaf: c_int,
                          ipiv: *mut c_int, b: *const c_double, ldb: c_int, x: *mut c_double,
                          ldx: c_int, rcond: *mut c_double, ferr: *mut c_double,
                          berr: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_csysvx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *const c_float_complex, lda: c_int, af: *mut c_float_complex,
                          ldaf: c_int, ipiv: *mut c_int, b: *const c_float_complex, ldb: c_int,
                          x: *mut c_float_complex, ldx: c_int, rcond: *mut c_float,
                          ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_zsysvx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *const c_double_complex, lda: c_int, af: *mut c_double_complex,
                          ldaf: c_int, ipiv: *mut c_int, b: *const c_double_complex, ldb: c_int,
                          x: *mut c_double_complex, ldx: c_int, rcond: *mut c_double,
                          ferr: *mut c_double, berr: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_ssysvxx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                           a: *mut c_float, lda: c_int, af: *mut c_float, ldaf: c_int,
                           ipiv: *mut c_int, equed: *mut c_char, s: *mut c_float, b: *mut c_float,
                           ldb: c_int, x: *mut c_float, ldx: c_int, rcond: *mut c_float,
                           rpvgrw: *mut c_float, berr: *mut c_float, n_err_bnds: c_int,
                           err_bnds_norm: *mut c_float, err_bnds_comp: *mut c_float,
                           nparams: c_int, params: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_dsysvxx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                           a: *mut c_double, lda: c_int, af: *mut c_double, ldaf: c_int,
                           ipiv: *mut c_int, equed: *mut c_char, s: *mut c_double,
                           b: *mut c_double, ldb: c_int, x: *mut c_double, ldx: c_int,
                           rcond: *mut c_double, rpvgrw: *mut c_double, berr: *mut c_double,
                           n_err_bnds: c_int, err_bnds_norm: *mut c_double,
                           err_bnds_comp: *mut c_double, nparams: c_int, params: *mut c_double)
                           -> c_int;
    pub fn LAPACKE_csysvxx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                           a: *mut c_float_complex, lda: c_int, af: *mut c_float_complex,
                           ldaf: c_int, ipiv: *mut c_int, equed: *mut c_char, s: *mut c_float,
                           b: *mut c_float_complex, ldb: c_int, x: *mut c_float_complex,
                           ldx: c_int, rcond: *mut c_float, rpvgrw: *mut c_float,
                           berr: *mut c_float, n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                           err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_zsysvxx(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int, nrhs: c_int,
                           a: *mut c_double_complex, lda: c_int, af: *mut c_double_complex,
                           ldaf: c_int, ipiv: *mut c_int, equed: *mut c_char, s: *mut c_double,
                           b: *mut c_double_complex, ldb: c_int, x: *mut c_double_complex,
                           ldx: c_int, rcond: *mut c_double, rpvgrw: *mut c_double,
                           berr: *mut c_double, n_err_bnds: c_int, err_bnds_norm: *mut c_double,
                           err_bnds_comp: *mut c_double, nparams: c_int, params: *mut c_double)
                           -> c_int;

    pub fn LAPACKE_ssytrd(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float,
                          lda: c_int, d: *mut c_float, e: *mut c_float, tau: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dsytrd(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double,
                          lda: c_int, d: *mut c_double, e: *mut c_double, tau: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_ssytrf(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float,
                          lda: c_int, ipiv: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dsytrf(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double,
                          lda: c_int, ipiv: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_csytrf(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float_complex,
                          lda: c_int, ipiv: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zsytrf(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double_complex,
                          lda: c_int, ipiv: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_ssytri(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float,
                          lda: c_int, ipiv: *const c_int)
                          -> c_int;
    pub fn LAPACKE_dsytri(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double,
                          lda: c_int, ipiv: *const c_int)
                          -> c_int;
    pub fn LAPACKE_csytri(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float_complex,
                          lda: c_int, ipiv: *const c_int)
                          -> c_int;
    pub fn LAPACKE_zsytri(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double_complex,
                          lda: c_int, ipiv: *const c_int)
                          -> c_int;

    pub fn LAPACKE_ssytrs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *const c_float, lda: c_int, ipiv: *const c_int, b: *mut c_float,
                          ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_dsytrs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *const c_double, lda: c_int, ipiv: *const c_int, b: *mut c_double,
                          ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_csytrs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *const c_float_complex, lda: c_int, ipiv: *const c_int,
                          b: *mut c_float_complex, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_zsytrs(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                          a: *const c_double_complex, lda: c_int, ipiv: *const c_int,
                          b: *mut c_double_complex, ldb: c_int)
                          -> c_int;

    pub fn LAPACKE_stbcon(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char, n: c_int,
                          kd: c_int, ab: *const c_float, ldab: c_int, rcond: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dtbcon(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char, n: c_int,
                          kd: c_int, ab: *const c_double, ldab: c_int, rcond: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_ctbcon(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char, n: c_int,
                          kd: c_int, ab: *const c_float_complex, ldab: c_int, rcond: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_ztbcon(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char, n: c_int,
                          kd: c_int, ab: *const c_double_complex, ldab: c_int,
                          rcond: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_stbrfs(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                          n: c_int, kd: c_int, nrhs: c_int, ab: *const c_float, ldab: c_int,
                          b: *const c_float, ldb: c_int, x: *const c_float, ldx: c_int,
                          ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dtbrfs(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                          n: c_int, kd: c_int, nrhs: c_int, ab: *const c_double, ldab: c_int,
                          b: *const c_double, ldb: c_int, x: *const c_double, ldx: c_int,
                          ferr: *mut c_double, berr: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_ctbrfs(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                          n: c_int, kd: c_int, nrhs: c_int, ab: *const c_float_complex,
                          ldab: c_int, b: *const c_float_complex, ldb: c_int,
                          x: *const c_float_complex, ldx: c_int, ferr: *mut c_float,
                          berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_ztbrfs(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                          n: c_int, kd: c_int, nrhs: c_int, ab: *const c_double_complex,
                          ldab: c_int, b: *const c_double_complex, ldb: c_int,
                          x: *const c_double_complex, ldx: c_int, ferr: *mut c_double,
                          berr: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_stbtrs(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                          n: c_int, kd: c_int, nrhs: c_int, ab: *const c_float, ldab: c_int,
                          b: *mut c_float, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_dtbtrs(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                          n: c_int, kd: c_int, nrhs: c_int, ab: *const c_double, ldab: c_int,
                          b: *mut c_double, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_ctbtrs(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                          n: c_int, kd: c_int, nrhs: c_int, ab: *const c_float_complex,
                          ldab: c_int, b: *mut c_float_complex, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_ztbtrs(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                          n: c_int, kd: c_int, nrhs: c_int, ab: *const c_double_complex,
                          ldab: c_int, b: *mut c_double_complex, ldb: c_int)
                          -> c_int;

    pub fn LAPACKE_stfsm(matrix_layout: c_int, transr: c_char, side: c_char, uplo: c_char,
                         trans: c_char, diag: c_char, m: c_int, n: c_int, alpha: c_float,
                         a: *const c_float, b: *mut c_float, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_dtfsm(matrix_layout: c_int, transr: c_char, side: c_char, uplo: c_char,
                         trans: c_char, diag: c_char, m: c_int, n: c_int, alpha: c_double,
                         a: *const c_double, b: *mut c_double, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_ctfsm(matrix_layout: c_int, transr: c_char, side: c_char, uplo: c_char,
                         trans: c_char, diag: c_char, m: c_int, n: c_int, alpha: c_float_complex,
                         a: *const c_float_complex, b: *mut c_float_complex, ldb: c_int)
                         -> c_int;
    pub fn LAPACKE_ztfsm(matrix_layout: c_int, transr: c_char, side: c_char, uplo: c_char,
                         trans: c_char, diag: c_char, m: c_int, n: c_int, alpha: c_double_complex,
                         a: *const c_double_complex, b: *mut c_double_complex, ldb: c_int)
                         -> c_int;

    pub fn LAPACKE_stftri(matrix_layout: c_int, transr: c_char, uplo: c_char, diag: c_char,
                          n: c_int, a: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dtftri(matrix_layout: c_int, transr: c_char, uplo: c_char, diag: c_char,
                          n: c_int, a: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_ctftri(matrix_layout: c_int, transr: c_char, uplo: c_char, diag: c_char,
                          n: c_int, a: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_ztftri(matrix_layout: c_int, transr: c_char, uplo: c_char, diag: c_char,
                          n: c_int, a: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_stfttp(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          arf: *const c_float, ap: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dtfttp(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          arf: *const c_double, ap: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_ctfttp(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          arf: *const c_float_complex, ap: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_ztfttp(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          arf: *const c_double_complex, ap: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_stfttr(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          arf: *const c_float, a: *mut c_float, lda: c_int)
                          -> c_int;
    pub fn LAPACKE_dtfttr(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          arf: *const c_double, a: *mut c_double, lda: c_int)
                          -> c_int;
    pub fn LAPACKE_ctfttr(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          arf: *const c_float_complex, a: *mut c_float_complex, lda: c_int)
                          -> c_int;
    pub fn LAPACKE_ztfttr(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          arf: *const c_double_complex, a: *mut c_double_complex, lda: c_int)
                          -> c_int;

    pub fn LAPACKE_stgevc(matrix_layout: c_int, side: c_char, howmny: c_char, select: *const c_int,
                          n: c_int, s: *const c_float, lds: c_int, p: *const c_float, ldp: c_int,
                          vl: *mut c_float, ldvl: c_int, vr: *mut c_float, ldvr: c_int, mm: c_int,
                          m: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dtgevc(matrix_layout: c_int, side: c_char, howmny: c_char, select: *const c_int,
                          n: c_int, s: *const c_double, lds: c_int, p: *const c_double, ldp: c_int,
                          vl: *mut c_double, ldvl: c_int, vr: *mut c_double, ldvr: c_int,
                          mm: c_int, m: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_ctgevc(matrix_layout: c_int, side: c_char, howmny: c_char, select: *const c_int,
                          n: c_int, s: *const c_float_complex, lds: c_int,
                          p: *const c_float_complex, ldp: c_int, vl: *mut c_float_complex,
                          ldvl: c_int, vr: *mut c_float_complex, ldvr: c_int, mm: c_int,
                          m: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_ztgevc(matrix_layout: c_int, side: c_char, howmny: c_char, select: *const c_int,
                          n: c_int, s: *const c_double_complex, lds: c_int,
                          p: *const c_double_complex, ldp: c_int, vl: *mut c_double_complex,
                          ldvl: c_int, vr: *mut c_double_complex, ldvr: c_int, mm: c_int,
                          m: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_stgexc(matrix_layout: c_int, wantq: c_int, wantz: c_int, n: c_int,
                          a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int,
                          q: *mut c_float, ldq: c_int, z: *mut c_float, ldz: c_int,
                          ifst: *mut c_int, ilst: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dtgexc(matrix_layout: c_int, wantq: c_int, wantz: c_int, n: c_int,
                          a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int,
                          q: *mut c_double, ldq: c_int, z: *mut c_double, ldz: c_int,
                          ifst: *mut c_int, ilst: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_ctgexc(matrix_layout: c_int, wantq: c_int, wantz: c_int, n: c_int,
                          a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex, ldb: c_int,
                          q: *mut c_float_complex, ldq: c_int, z: *mut c_float_complex, ldz: c_int,
                          ifst: c_int, ilst: c_int)
                          -> c_int;
    pub fn LAPACKE_ztgexc(matrix_layout: c_int, wantq: c_int, wantz: c_int, n: c_int,
                          a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                          ldb: c_int, q: *mut c_double_complex, ldq: c_int,
                          z: *mut c_double_complex, ldz: c_int, ifst: c_int, ilst: c_int)
                          -> c_int;

    pub fn LAPACKE_stgsen(matrix_layout: c_int, ijob: c_int, wantq: c_int, wantz: c_int,
                          select: *const c_int, n: c_int, a: *mut c_float, lda: c_int,
                          b: *mut c_float, ldb: c_int, alphar: *mut c_float, alphai: *mut c_float,
                          beta: *mut c_float, q: *mut c_float, ldq: c_int, z: *mut c_float,
                          ldz: c_int, m: *mut c_int, pl: *mut c_float, pr: *mut c_float,
                          dif: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dtgsen(matrix_layout: c_int, ijob: c_int, wantq: c_int, wantz: c_int,
                          select: *const c_int, n: c_int, a: *mut c_double, lda: c_int,
                          b: *mut c_double, ldb: c_int, alphar: *mut c_double,
                          alphai: *mut c_double, beta: *mut c_double, q: *mut c_double, ldq: c_int,
                          z: *mut c_double, ldz: c_int, m: *mut c_int, pl: *mut c_double,
                          pr: *mut c_double, dif: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_ctgsen(matrix_layout: c_int, ijob: c_int, wantq: c_int, wantz: c_int,
                          select: *const c_int, n: c_int, a: *mut c_float_complex, lda: c_int,
                          b: *mut c_float_complex, ldb: c_int, alpha: *mut c_float_complex,
                          beta: *mut c_float_complex, q: *mut c_float_complex, ldq: c_int,
                          z: *mut c_float_complex, ldz: c_int, m: *mut c_int, pl: *mut c_float,
                          pr: *mut c_float, dif: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_ztgsen(matrix_layout: c_int, ijob: c_int, wantq: c_int, wantz: c_int,
                          select: *const c_int, n: c_int, a: *mut c_double_complex, lda: c_int,
                          b: *mut c_double_complex, ldb: c_int, alpha: *mut c_double_complex,
                          beta: *mut c_double_complex, q: *mut c_double_complex, ldq: c_int,
                          z: *mut c_double_complex, ldz: c_int, m: *mut c_int, pl: *mut c_double,
                          pr: *mut c_double, dif: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_stgsja(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char, m: c_int,
                          p: c_int, n: c_int, k: c_int, l: c_int, a: *mut c_float, lda: c_int,
                          b: *mut c_float, ldb: c_int, tola: c_float, tolb: c_float,
                          alpha: *mut c_float, beta: *mut c_float, u: *mut c_float, ldu: c_int,
                          v: *mut c_float, ldv: c_int, q: *mut c_float, ldq: c_int,
                          ncycle: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dtgsja(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char, m: c_int,
                          p: c_int, n: c_int, k: c_int, l: c_int, a: *mut c_double, lda: c_int,
                          b: *mut c_double, ldb: c_int, tola: c_double, tolb: c_double,
                          alpha: *mut c_double, beta: *mut c_double, u: *mut c_double, ldu: c_int,
                          v: *mut c_double, ldv: c_int, q: *mut c_double, ldq: c_int,
                          ncycle: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_ctgsja(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char, m: c_int,
                          p: c_int, n: c_int, k: c_int, l: c_int, a: *mut c_float_complex,
                          lda: c_int, b: *mut c_float_complex, ldb: c_int, tola: c_float,
                          tolb: c_float, alpha: *mut c_float, beta: *mut c_float,
                          u: *mut c_float_complex, ldu: c_int, v: *mut c_float_complex, ldv: c_int,
                          q: *mut c_float_complex, ldq: c_int, ncycle: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_ztgsja(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char, m: c_int,
                          p: c_int, n: c_int, k: c_int, l: c_int, a: *mut c_double_complex,
                          lda: c_int, b: *mut c_double_complex, ldb: c_int, tola: c_double,
                          tolb: c_double, alpha: *mut c_double, beta: *mut c_double,
                          u: *mut c_double_complex, ldu: c_int, v: *mut c_double_complex,
                          ldv: c_int, q: *mut c_double_complex, ldq: c_int, ncycle: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_stgsna(matrix_layout: c_int, job: c_char, howmny: c_char, select: *const c_int,
                          n: c_int, a: *const c_float, lda: c_int, b: *const c_float, ldb: c_int,
                          vl: *const c_float, ldvl: c_int, vr: *const c_float, ldvr: c_int,
                          s: *mut c_float, dif: *mut c_float, mm: c_int, m: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dtgsna(matrix_layout: c_int, job: c_char, howmny: c_char, select: *const c_int,
                          n: c_int, a: *const c_double, lda: c_int, b: *const c_double, ldb: c_int,
                          vl: *const c_double, ldvl: c_int, vr: *const c_double, ldvr: c_int,
                          s: *mut c_double, dif: *mut c_double, mm: c_int, m: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_ctgsna(matrix_layout: c_int, job: c_char, howmny: c_char, select: *const c_int,
                          n: c_int, a: *const c_float_complex, lda: c_int,
                          b: *const c_float_complex, ldb: c_int, vl: *const c_float_complex,
                          ldvl: c_int, vr: *const c_float_complex, ldvr: c_int, s: *mut c_float,
                          dif: *mut c_float, mm: c_int, m: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_ztgsna(matrix_layout: c_int, job: c_char, howmny: c_char, select: *const c_int,
                          n: c_int, a: *const c_double_complex, lda: c_int,
                          b: *const c_double_complex, ldb: c_int, vl: *const c_double_complex,
                          ldvl: c_int, vr: *const c_double_complex, ldvr: c_int, s: *mut c_double,
                          dif: *mut c_double, mm: c_int, m: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_stgsyl(matrix_layout: c_int, trans: c_char, ijob: c_int, m: c_int, n: c_int,
                          a: *const c_float, lda: c_int, b: *const c_float, ldb: c_int,
                          c: *mut c_float, ldc: c_int, d: *const c_float, ldd: c_int,
                          e: *const c_float, lde: c_int, f: *mut c_float, ldf: c_int,
                          scale: *mut c_float, dif: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dtgsyl(matrix_layout: c_int, trans: c_char, ijob: c_int, m: c_int, n: c_int,
                          a: *const c_double, lda: c_int, b: *const c_double, ldb: c_int,
                          c: *mut c_double, ldc: c_int, d: *const c_double, ldd: c_int,
                          e: *const c_double, lde: c_int, f: *mut c_double, ldf: c_int,
                          scale: *mut c_double, dif: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_ctgsyl(matrix_layout: c_int, trans: c_char, ijob: c_int, m: c_int, n: c_int,
                          a: *const c_float_complex, lda: c_int, b: *const c_float_complex,
                          ldb: c_int, c: *mut c_float_complex, ldc: c_int,
                          d: *const c_float_complex, ldd: c_int, e: *const c_float_complex,
                          lde: c_int, f: *mut c_float_complex, ldf: c_int, scale: *mut c_float,
                          dif: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_ztgsyl(matrix_layout: c_int, trans: c_char, ijob: c_int, m: c_int, n: c_int,
                          a: *const c_double_complex, lda: c_int, b: *const c_double_complex,
                          ldb: c_int, c: *mut c_double_complex, ldc: c_int,
                          d: *const c_double_complex, ldd: c_int, e: *const c_double_complex,
                          lde: c_int, f: *mut c_double_complex, ldf: c_int, scale: *mut c_double,
                          dif: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_stpcon(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char, n: c_int,
                          ap: *const c_float, rcond: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dtpcon(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char, n: c_int,
                          ap: *const c_double, rcond: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_ctpcon(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char, n: c_int,
                          ap: *const c_float_complex, rcond: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_ztpcon(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char, n: c_int,
                          ap: *const c_double_complex, rcond: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_stprfs(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                          n: c_int, nrhs: c_int, ap: *const c_float, b: *const c_float, ldb: c_int,
                          x: *const c_float, ldx: c_int, ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dtprfs(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                          n: c_int, nrhs: c_int, ap: *const c_double, b: *const c_double,
                          ldb: c_int, x: *const c_double, ldx: c_int, ferr: *mut c_double,
                          berr: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_ctprfs(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                          n: c_int, nrhs: c_int, ap: *const c_float_complex,
                          b: *const c_float_complex, ldb: c_int, x: *const c_float_complex,
                          ldx: c_int, ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_ztprfs(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                          n: c_int, nrhs: c_int, ap: *const c_double_complex,
                          b: *const c_double_complex, ldb: c_int, x: *const c_double_complex,
                          ldx: c_int, ferr: *mut c_double, berr: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_stptri(matrix_layout: c_int, uplo: c_char, diag: c_char, n: c_int,
                          ap: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dtptri(matrix_layout: c_int, uplo: c_char, diag: c_char, n: c_int,
                          ap: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_ctptri(matrix_layout: c_int, uplo: c_char, diag: c_char, n: c_int,
                          ap: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_ztptri(matrix_layout: c_int, uplo: c_char, diag: c_char, n: c_int,
                          ap: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_stptrs(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                          n: c_int, nrhs: c_int, ap: *const c_float, b: *mut c_float, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_dtptrs(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                          n: c_int, nrhs: c_int, ap: *const c_double, b: *mut c_double, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_ctptrs(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                          n: c_int, nrhs: c_int, ap: *const c_float_complex,
                          b: *mut c_float_complex, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_ztptrs(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                          n: c_int, nrhs: c_int, ap: *const c_double_complex,
                          b: *mut c_double_complex, ldb: c_int)
                          -> c_int;

    pub fn LAPACKE_stpttf(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          ap: *const c_float, arf: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dtpttf(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          ap: *const c_double, arf: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_ctpttf(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          ap: *const c_float_complex, arf: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_ztpttf(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          ap: *const c_double_complex, arf: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_stpttr(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *const c_float,
                          a: *mut c_float, lda: c_int)
                          -> c_int;
    pub fn LAPACKE_dtpttr(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *const c_double,
                          a: *mut c_double, lda: c_int)
                          -> c_int;
    pub fn LAPACKE_ctpttr(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *const c_float_complex,
                          a: *mut c_float_complex, lda: c_int)
                          -> c_int;
    pub fn LAPACKE_ztpttr(matrix_layout: c_int, uplo: c_char, n: c_int,
                          ap: *const c_double_complex, a: *mut c_double_complex, lda: c_int)
                          -> c_int;

    pub fn LAPACKE_strcon(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char, n: c_int,
                          a: *const c_float, lda: c_int, rcond: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dtrcon(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char, n: c_int,
                          a: *const c_double, lda: c_int, rcond: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_ctrcon(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char, n: c_int,
                          a: *const c_float_complex, lda: c_int, rcond: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_ztrcon(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char, n: c_int,
                          a: *const c_double_complex, lda: c_int, rcond: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_strevc(matrix_layout: c_int, side: c_char, howmny: c_char, select: *mut c_int,
                          n: c_int, t: *const c_float, ldt: c_int, vl: *mut c_float, ldvl: c_int,
                          vr: *mut c_float, ldvr: c_int, mm: c_int, m: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dtrevc(matrix_layout: c_int, side: c_char, howmny: c_char, select: *mut c_int,
                          n: c_int, t: *const c_double, ldt: c_int, vl: *mut c_double, ldvl: c_int,
                          vr: *mut c_double, ldvr: c_int, mm: c_int, m: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_ctrevc(matrix_layout: c_int, side: c_char, howmny: c_char, select: *const c_int,
                          n: c_int, t: *mut c_float_complex, ldt: c_int, vl: *mut c_float_complex,
                          ldvl: c_int, vr: *mut c_float_complex, ldvr: c_int, mm: c_int,
                          m: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_ztrevc(matrix_layout: c_int, side: c_char, howmny: c_char, select: *const c_int,
                          n: c_int, t: *mut c_double_complex, ldt: c_int,
                          vl: *mut c_double_complex, ldvl: c_int, vr: *mut c_double_complex,
                          ldvr: c_int, mm: c_int, m: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_strexc(matrix_layout: c_int, compq: c_char, n: c_int, t: *mut c_float,
                          ldt: c_int, q: *mut c_float, ldq: c_int, ifst: *mut c_int,
                          ilst: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dtrexc(matrix_layout: c_int, compq: c_char, n: c_int, t: *mut c_double,
                          ldt: c_int, q: *mut c_double, ldq: c_int, ifst: *mut c_int,
                          ilst: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_ctrexc(matrix_layout: c_int, compq: c_char, n: c_int, t: *mut c_float_complex,
                          ldt: c_int, q: *mut c_float_complex, ldq: c_int, ifst: c_int,
                          ilst: c_int)
                          -> c_int;
    pub fn LAPACKE_ztrexc(matrix_layout: c_int, compq: c_char, n: c_int, t: *mut c_double_complex,
                          ldt: c_int, q: *mut c_double_complex, ldq: c_int, ifst: c_int,
                          ilst: c_int)
                          -> c_int;

    pub fn LAPACKE_strrfs(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                          n: c_int, nrhs: c_int, a: *const c_float, lda: c_int, b: *const c_float,
                          ldb: c_int, x: *const c_float, ldx: c_int, ferr: *mut c_float,
                          berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dtrrfs(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                          n: c_int, nrhs: c_int, a: *const c_double, lda: c_int,
                          b: *const c_double, ldb: c_int, x: *const c_double, ldx: c_int,
                          ferr: *mut c_double, berr: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_ctrrfs(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                          n: c_int, nrhs: c_int, a: *const c_float_complex, lda: c_int,
                          b: *const c_float_complex, ldb: c_int, x: *const c_float_complex,
                          ldx: c_int, ferr: *mut c_float, berr: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_ztrrfs(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                          n: c_int, nrhs: c_int, a: *const c_double_complex, lda: c_int,
                          b: *const c_double_complex, ldb: c_int, x: *const c_double_complex,
                          ldx: c_int, ferr: *mut c_double, berr: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_strsen(matrix_layout: c_int, job: c_char, compq: c_char, select: *const c_int,
                          n: c_int, t: *mut c_float, ldt: c_int, q: *mut c_float, ldq: c_int,
                          wr: *mut c_float, wi: *mut c_float, m: *mut c_int, s: *mut c_float,
                          sep: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dtrsen(matrix_layout: c_int, job: c_char, compq: c_char, select: *const c_int,
                          n: c_int, t: *mut c_double, ldt: c_int, q: *mut c_double, ldq: c_int,
                          wr: *mut c_double, wi: *mut c_double, m: *mut c_int, s: *mut c_double,
                          sep: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_ctrsen(matrix_layout: c_int, job: c_char, compq: c_char, select: *const c_int,
                          n: c_int, t: *mut c_float_complex, ldt: c_int, q: *mut c_float_complex,
                          ldq: c_int, w: *mut c_float_complex, m: *mut c_int, s: *mut c_float,
                          sep: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_ztrsen(matrix_layout: c_int, job: c_char, compq: c_char, select: *const c_int,
                          n: c_int, t: *mut c_double_complex, ldt: c_int, q: *mut c_double_complex,
                          ldq: c_int, w: *mut c_double_complex, m: *mut c_int, s: *mut c_double,
                          sep: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_strsna(matrix_layout: c_int, job: c_char, howmny: c_char, select: *const c_int,
                          n: c_int, t: *const c_float, ldt: c_int, vl: *const c_float, ldvl: c_int,
                          vr: *const c_float, ldvr: c_int, s: *mut c_float, sep: *mut c_float,
                          mm: c_int, m: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dtrsna(matrix_layout: c_int, job: c_char, howmny: c_char, select: *const c_int,
                          n: c_int, t: *const c_double, ldt: c_int, vl: *const c_double,
                          ldvl: c_int, vr: *const c_double, ldvr: c_int, s: *mut c_double,
                          sep: *mut c_double, mm: c_int, m: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_ctrsna(matrix_layout: c_int, job: c_char, howmny: c_char, select: *const c_int,
                          n: c_int, t: *const c_float_complex, ldt: c_int,
                          vl: *const c_float_complex, ldvl: c_int, vr: *const c_float_complex,
                          ldvr: c_int, s: *mut c_float, sep: *mut c_float, mm: c_int,
                          m: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_ztrsna(matrix_layout: c_int, job: c_char, howmny: c_char, select: *const c_int,
                          n: c_int, t: *const c_double_complex, ldt: c_int,
                          vl: *const c_double_complex, ldvl: c_int, vr: *const c_double_complex,
                          ldvr: c_int, s: *mut c_double, sep: *mut c_double, mm: c_int,
                          m: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_strsyl(matrix_layout: c_int, trana: c_char, tranb: c_char, isgn: c_int,
                          m: c_int, n: c_int, a: *const c_float, lda: c_int, b: *const c_float,
                          ldb: c_int, c: *mut c_float, ldc: c_int, scale: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dtrsyl(matrix_layout: c_int, trana: c_char, tranb: c_char, isgn: c_int,
                          m: c_int, n: c_int, a: *const c_double, lda: c_int, b: *const c_double,
                          ldb: c_int, c: *mut c_double, ldc: c_int, scale: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_ctrsyl(matrix_layout: c_int, trana: c_char, tranb: c_char, isgn: c_int,
                          m: c_int, n: c_int, a: *const c_float_complex, lda: c_int,
                          b: *const c_float_complex, ldb: c_int, c: *mut c_float_complex,
                          ldc: c_int, scale: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_ztrsyl(matrix_layout: c_int, trana: c_char, tranb: c_char, isgn: c_int,
                          m: c_int, n: c_int, a: *const c_double_complex, lda: c_int,
                          b: *const c_double_complex, ldb: c_int, c: *mut c_double_complex,
                          ldc: c_int, scale: *mut c_double)
                          -> c_int;

    pub fn LAPACKE_strtri(matrix_layout: c_int, uplo: c_char, diag: c_char, n: c_int,
                          a: *mut c_float, lda: c_int)
                          -> c_int;
    pub fn LAPACKE_dtrtri(matrix_layout: c_int, uplo: c_char, diag: c_char, n: c_int,
                          a: *mut c_double, lda: c_int)
                          -> c_int;
    pub fn LAPACKE_ctrtri(matrix_layout: c_int, uplo: c_char, diag: c_char, n: c_int,
                          a: *mut c_float_complex, lda: c_int)
                          -> c_int;
    pub fn LAPACKE_ztrtri(matrix_layout: c_int, uplo: c_char, diag: c_char, n: c_int,
                          a: *mut c_double_complex, lda: c_int)
                          -> c_int;

    pub fn LAPACKE_strtrs(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                          n: c_int, nrhs: c_int, a: *const c_float, lda: c_int, b: *mut c_float,
                          ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_dtrtrs(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                          n: c_int, nrhs: c_int, a: *const c_double, lda: c_int, b: *mut c_double,
                          ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_ctrtrs(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                          n: c_int, nrhs: c_int, a: *const c_float_complex, lda: c_int,
                          b: *mut c_float_complex, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_ztrtrs(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                          n: c_int, nrhs: c_int, a: *const c_double_complex, lda: c_int,
                          b: *mut c_double_complex, ldb: c_int)
                          -> c_int;

    pub fn LAPACKE_strttf(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          a: *const c_float, lda: c_int, arf: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dtrttf(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          a: *const c_double, lda: c_int, arf: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_ctrttf(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          a: *const c_float_complex, lda: c_int, arf: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_ztrttf(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                          a: *const c_double_complex, lda: c_int, arf: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_strttp(matrix_layout: c_int, uplo: c_char, n: c_int, a: *const c_float,
                          lda: c_int, ap: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dtrttp(matrix_layout: c_int, uplo: c_char, n: c_int, a: *const c_double,
                          lda: c_int, ap: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_ctrttp(matrix_layout: c_int, uplo: c_char, n: c_int, a: *const c_float_complex,
                          lda: c_int, ap: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_ztrttp(matrix_layout: c_int, uplo: c_char, n: c_int, a: *const c_double_complex,
                          lda: c_int, ap: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_stzrzf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float, lda: c_int,
                          tau: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_dtzrzf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double, lda: c_int,
                          tau: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_ctzrzf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                          lda: c_int, tau: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_ztzrzf(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                          lda: c_int, tau: *mut c_double_complex)
                          -> c_int;

    pub fn LAPACKE_cungbr(matrix_layout: c_int, vect: c_char, m: c_int, n: c_int, k: c_int,
                          a: *mut c_float_complex, lda: c_int, tau: *const c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zungbr(matrix_layout: c_int, vect: c_char, m: c_int, n: c_int, k: c_int,
                          a: *mut c_double_complex, lda: c_int, tau: *const c_double_complex)
                          -> c_int;

    pub fn LAPACKE_cunghr(matrix_layout: c_int, n: c_int, ilo: c_int, ihi: c_int,
                          a: *mut c_float_complex, lda: c_int, tau: *const c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zunghr(matrix_layout: c_int, n: c_int, ilo: c_int, ihi: c_int,
                          a: *mut c_double_complex, lda: c_int, tau: *const c_double_complex)
                          -> c_int;

    pub fn LAPACKE_cunglq(matrix_layout: c_int, m: c_int, n: c_int, k: c_int,
                          a: *mut c_float_complex, lda: c_int, tau: *const c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zunglq(matrix_layout: c_int, m: c_int, n: c_int, k: c_int,
                          a: *mut c_double_complex, lda: c_int, tau: *const c_double_complex)
                          -> c_int;

    pub fn LAPACKE_cungql(matrix_layout: c_int, m: c_int, n: c_int, k: c_int,
                          a: *mut c_float_complex, lda: c_int, tau: *const c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zungql(matrix_layout: c_int, m: c_int, n: c_int, k: c_int,
                          a: *mut c_double_complex, lda: c_int, tau: *const c_double_complex)
                          -> c_int;

    pub fn LAPACKE_cungqr(matrix_layout: c_int, m: c_int, n: c_int, k: c_int,
                          a: *mut c_float_complex, lda: c_int, tau: *const c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zungqr(matrix_layout: c_int, m: c_int, n: c_int, k: c_int,
                          a: *mut c_double_complex, lda: c_int, tau: *const c_double_complex)
                          -> c_int;

    pub fn LAPACKE_cungrq(matrix_layout: c_int, m: c_int, n: c_int, k: c_int,
                          a: *mut c_float_complex, lda: c_int, tau: *const c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zungrq(matrix_layout: c_int, m: c_int, n: c_int, k: c_int,
                          a: *mut c_double_complex, lda: c_int, tau: *const c_double_complex)
                          -> c_int;

    pub fn LAPACKE_cungtr(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float_complex,
                          lda: c_int, tau: *const c_float_complex)
                          -> c_int;
    pub fn LAPACKE_zungtr(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double_complex,
                          lda: c_int, tau: *const c_double_complex)
                          -> c_int;

    pub fn LAPACKE_cunmbr(matrix_layout: c_int, vect: c_char, side: c_char, trans: c_char,
                          m: c_int, n: c_int, k: c_int, a: *const c_float_complex, lda: c_int,
                          tau: *const c_float_complex, c: *mut c_float_complex, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_zunmbr(matrix_layout: c_int, vect: c_char, side: c_char, trans: c_char,
                          m: c_int, n: c_int, k: c_int, a: *const c_double_complex, lda: c_int,
                          tau: *const c_double_complex, c: *mut c_double_complex, ldc: c_int)
                          -> c_int;

    pub fn LAPACKE_cunmhr(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                          ilo: c_int, ihi: c_int, a: *const c_float_complex, lda: c_int,
                          tau: *const c_float_complex, c: *mut c_float_complex, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_zunmhr(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                          ilo: c_int, ihi: c_int, a: *const c_double_complex, lda: c_int,
                          tau: *const c_double_complex, c: *mut c_double_complex, ldc: c_int)
                          -> c_int;

    pub fn LAPACKE_cunmlq(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                          k: c_int, a: *const c_float_complex, lda: c_int,
                          tau: *const c_float_complex, c: *mut c_float_complex, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_zunmlq(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                          k: c_int, a: *const c_double_complex, lda: c_int,
                          tau: *const c_double_complex, c: *mut c_double_complex, ldc: c_int)
                          -> c_int;

    pub fn LAPACKE_cunmql(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                          k: c_int, a: *const c_float_complex, lda: c_int,
                          tau: *const c_float_complex, c: *mut c_float_complex, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_zunmql(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                          k: c_int, a: *const c_double_complex, lda: c_int,
                          tau: *const c_double_complex, c: *mut c_double_complex, ldc: c_int)
                          -> c_int;

    pub fn LAPACKE_cunmqr(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                          k: c_int, a: *const c_float_complex, lda: c_int,
                          tau: *const c_float_complex, c: *mut c_float_complex, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_zunmqr(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                          k: c_int, a: *const c_double_complex, lda: c_int,
                          tau: *const c_double_complex, c: *mut c_double_complex, ldc: c_int)
                          -> c_int;

    pub fn LAPACKE_cunmrq(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                          k: c_int, a: *const c_float_complex, lda: c_int,
                          tau: *const c_float_complex, c: *mut c_float_complex, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_zunmrq(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                          k: c_int, a: *const c_double_complex, lda: c_int,
                          tau: *const c_double_complex, c: *mut c_double_complex, ldc: c_int)
                          -> c_int;

    pub fn LAPACKE_cunmrz(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                          k: c_int, l: c_int, a: *const c_float_complex, lda: c_int,
                          tau: *const c_float_complex, c: *mut c_float_complex, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_zunmrz(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                          k: c_int, l: c_int, a: *const c_double_complex, lda: c_int,
                          tau: *const c_double_complex, c: *mut c_double_complex, ldc: c_int)
                          -> c_int;

    pub fn LAPACKE_cunmtr(matrix_layout: c_int, side: c_char, uplo: c_char, trans: c_char,
                          m: c_int, n: c_int, a: *const c_float_complex, lda: c_int,
                          tau: *const c_float_complex, c: *mut c_float_complex, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_zunmtr(matrix_layout: c_int, side: c_char, uplo: c_char, trans: c_char,
                          m: c_int, n: c_int, a: *const c_double_complex, lda: c_int,
                          tau: *const c_double_complex, c: *mut c_double_complex, ldc: c_int)
                          -> c_int;

    pub fn LAPACKE_cupgtr(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *const c_float_complex,
                          tau: *const c_float_complex, q: *mut c_float_complex, ldq: c_int)
                          -> c_int;
    pub fn LAPACKE_zupgtr(matrix_layout: c_int, uplo: c_char, n: c_int,
                          ap: *const c_double_complex, tau: *const c_double_complex,
                          q: *mut c_double_complex, ldq: c_int)
                          -> c_int;

    pub fn LAPACKE_cupmtr(matrix_layout: c_int, side: c_char, uplo: c_char, trans: c_char,
                          m: c_int, n: c_int, ap: *const c_float_complex,
                          tau: *const c_float_complex, c: *mut c_float_complex, ldc: c_int)
                          -> c_int;
    pub fn LAPACKE_zupmtr(matrix_layout: c_int, side: c_char, uplo: c_char, trans: c_char,
                          m: c_int, n: c_int, ap: *const c_double_complex,
                          tau: *const c_double_complex, c: *mut c_double_complex, ldc: c_int)
                          -> c_int;

    pub fn LAPACKE_sbdsdc_work(matrix_layout: c_int, uplo: c_char, compq: c_char, n: c_int,
                               d: *mut c_float, e: *mut c_float, u: *mut c_float, ldu: c_int,
                               vt: *mut c_float, ldvt: c_int, q: *mut c_float, iq: *mut c_int,
                               work: *mut c_float, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dbdsdc_work(matrix_layout: c_int, uplo: c_char, compq: c_char, n: c_int,
                               d: *mut c_double, e: *mut c_double, u: *mut c_double, ldu: c_int,
                               vt: *mut c_double, ldvt: c_int, q: *mut c_double, iq: *mut c_int,
                               work: *mut c_double, iwork: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_sbdsvdx_work(matrix_layout: c_int, uplo: c_char, jobz: c_char, range: c_char,
                                n: c_int, d: *mut c_float, e: *mut c_float, vl: c_int, vu: c_int,
                                il: c_int, iu: c_int, ns: c_int, s: *mut c_float, z: *mut c_float,
                                ldz: c_int, work: *mut c_float, iwork: *mut c_int)
                                -> c_int;
    pub fn LAPACKE_dbdsvdx_work(matrix_layout: c_int, uplo: c_char, jobz: c_char, range: c_char,
                                n: c_int, d: *mut c_double, e: *mut c_double, vl: c_int, vu: c_int,
                                il: c_int, iu: c_int, ns: c_int, s: *mut c_double,
                                z: *mut c_double, ldz: c_int, work: *mut c_double,
                                iwork: *mut c_int)
                                -> c_int;

    pub fn LAPACKE_sbdsqr_work(matrix_layout: c_int, uplo: c_char, n: c_int, ncvt: c_int,
                               nru: c_int, ncc: c_int, d: *mut c_float, e: *mut c_float,
                               vt: *mut c_float, ldvt: c_int, u: *mut c_float, ldu: c_int,
                               c: *mut c_float, ldc: c_int, work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dbdsqr_work(matrix_layout: c_int, uplo: c_char, n: c_int, ncvt: c_int,
                               nru: c_int, ncc: c_int, d: *mut c_double, e: *mut c_double,
                               vt: *mut c_double, ldvt: c_int, u: *mut c_double, ldu: c_int,
                               c: *mut c_double, ldc: c_int, work: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_cbdsqr_work(matrix_layout: c_int, uplo: c_char, n: c_int, ncvt: c_int,
                               nru: c_int, ncc: c_int, d: *mut c_float, e: *mut c_float,
                               vt: *mut c_float_complex, ldvt: c_int, u: *mut c_float_complex,
                               ldu: c_int, c: *mut c_float_complex, ldc: c_int, work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zbdsqr_work(matrix_layout: c_int, uplo: c_char, n: c_int, ncvt: c_int,
                               nru: c_int, ncc: c_int, d: *mut c_double, e: *mut c_double,
                               vt: *mut c_double_complex, ldvt: c_int, u: *mut c_double_complex,
                               ldu: c_int, c: *mut c_double_complex, ldc: c_int,
                               work: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sdisna_work(job: c_char, m: c_int, n: c_int, d: *const c_float,
                               sep: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_ddisna_work(job: c_char, m: c_int, n: c_int, d: *const c_double,
                               sep: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sgbbrd_work(matrix_layout: c_int, vect: c_char, m: c_int, n: c_int, ncc: c_int,
                               kl: c_int, ku: c_int, ab: *mut c_float, ldab: c_int,
                               d: *mut c_float, e: *mut c_float, q: *mut c_float, ldq: c_int,
                               pt: *mut c_float, ldpt: c_int, c: *mut c_float, ldc: c_int,
                               work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dgbbrd_work(matrix_layout: c_int, vect: c_char, m: c_int, n: c_int, ncc: c_int,
                               kl: c_int, ku: c_int, ab: *mut c_double, ldab: c_int,
                               d: *mut c_double, e: *mut c_double, q: *mut c_double, ldq: c_int,
                               pt: *mut c_double, ldpt: c_int, c: *mut c_double, ldc: c_int,
                               work: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_cgbbrd_work(matrix_layout: c_int, vect: c_char, m: c_int, n: c_int, ncc: c_int,
                               kl: c_int, ku: c_int, ab: *mut c_float_complex, ldab: c_int,
                               d: *mut c_float, e: *mut c_float, q: *mut c_float_complex,
                               ldq: c_int, pt: *mut c_float_complex, ldpt: c_int,
                               c: *mut c_float_complex, ldc: c_int, work: *mut c_float_complex,
                               rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zgbbrd_work(matrix_layout: c_int, vect: c_char, m: c_int, n: c_int, ncc: c_int,
                               kl: c_int, ku: c_int, ab: *mut c_double_complex, ldab: c_int,
                               d: *mut c_double, e: *mut c_double, q: *mut c_double_complex,
                               ldq: c_int, pt: *mut c_double_complex, ldpt: c_int,
                               c: *mut c_double_complex, ldc: c_int, work: *mut c_double_complex,
                               rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sgbcon_work(matrix_layout: c_int, norm: c_char, n: c_int, kl: c_int, ku: c_int,
                               ab: *const c_float, ldab: c_int, ipiv: *const c_int, anorm: c_float,
                               rcond: *mut c_float, work: *mut c_float, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dgbcon_work(matrix_layout: c_int, norm: c_char, n: c_int, kl: c_int, ku: c_int,
                               ab: *const c_double, ldab: c_int, ipiv: *const c_int,
                               anorm: c_double, rcond: *mut c_double, work: *mut c_double,
                               iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cgbcon_work(matrix_layout: c_int, norm: c_char, n: c_int, kl: c_int, ku: c_int,
                               ab: *const c_float_complex, ldab: c_int, ipiv: *const c_int,
                               anorm: c_float, rcond: *mut c_float, work: *mut c_float_complex,
                               rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zgbcon_work(matrix_layout: c_int, norm: c_char, n: c_int, kl: c_int, ku: c_int,
                               ab: *const c_double_complex, ldab: c_int, ipiv: *const c_int,
                               anorm: c_double, rcond: *mut c_double, work: *mut c_double_complex,
                               rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sgbequ_work(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                               ab: *const c_float, ldab: c_int, r: *mut c_float, c: *mut c_float,
                               rowcnd: *mut c_float, colcnd: *mut c_float, amax: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dgbequ_work(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                               ab: *const c_double, ldab: c_int, r: *mut c_double,
                               c: *mut c_double, rowcnd: *mut c_double, colcnd: *mut c_double,
                               amax: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_cgbequ_work(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                               ab: *const c_float_complex, ldab: c_int, r: *mut c_float,
                               c: *mut c_float, rowcnd: *mut c_float, colcnd: *mut c_float,
                               amax: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zgbequ_work(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                               ab: *const c_double_complex, ldab: c_int, r: *mut c_double,
                               c: *mut c_double, rowcnd: *mut c_double, colcnd: *mut c_double,
                               amax: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sgbequb_work(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                                ab: *const c_float, ldab: c_int, r: *mut c_float, c: *mut c_float,
                                rowcnd: *mut c_float, colcnd: *mut c_float, amax: *mut c_float)
                                -> c_int;
    pub fn LAPACKE_dgbequb_work(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                                ab: *const c_double, ldab: c_int, r: *mut c_double,
                                c: *mut c_double, rowcnd: *mut c_double, colcnd: *mut c_double,
                                amax: *mut c_double)
                                -> c_int;
    pub fn LAPACKE_cgbequb_work(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                                ab: *const c_float_complex, ldab: c_int, r: *mut c_float,
                                c: *mut c_float, rowcnd: *mut c_float, colcnd: *mut c_float,
                                amax: *mut c_float)
                                -> c_int;
    pub fn LAPACKE_zgbequb_work(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                                ab: *const c_double_complex, ldab: c_int, r: *mut c_double,
                                c: *mut c_double, rowcnd: *mut c_double, colcnd: *mut c_double,
                                amax: *mut c_double)
                                -> c_int;

    pub fn LAPACKE_sgbrfs_work(matrix_layout: c_int, trans: c_char, n: c_int, kl: c_int, ku: c_int,
                               nrhs: c_int, ab: *const c_float, ldab: c_int, afb: *const c_float,
                               ldafb: c_int, ipiv: *const c_int, b: *const c_float, ldb: c_int,
                               x: *mut c_float, ldx: c_int, ferr: *mut c_float, berr: *mut c_float,
                               work: *mut c_float, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dgbrfs_work(matrix_layout: c_int, trans: c_char, n: c_int, kl: c_int, ku: c_int,
                               nrhs: c_int, ab: *const c_double, ldab: c_int, afb: *const c_double,
                               ldafb: c_int, ipiv: *const c_int, b: *const c_double, ldb: c_int,
                               x: *mut c_double, ldx: c_int, ferr: *mut c_double,
                               berr: *mut c_double, work: *mut c_double, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cgbrfs_work(matrix_layout: c_int, trans: c_char, n: c_int, kl: c_int, ku: c_int,
                               nrhs: c_int, ab: *const c_float_complex, ldab: c_int,
                               afb: *const c_float_complex, ldafb: c_int, ipiv: *const c_int,
                               b: *const c_float_complex, ldb: c_int, x: *mut c_float_complex,
                               ldx: c_int, ferr: *mut c_float, berr: *mut c_float,
                               work: *mut c_float_complex, rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zgbrfs_work(matrix_layout: c_int, trans: c_char, n: c_int, kl: c_int, ku: c_int,
                               nrhs: c_int, ab: *const c_double_complex, ldab: c_int,
                               afb: *const c_double_complex, ldafb: c_int, ipiv: *const c_int,
                               b: *const c_double_complex, ldb: c_int, x: *mut c_double_complex,
                               ldx: c_int, ferr: *mut c_double, berr: *mut c_double,
                               work: *mut c_double_complex, rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sgbrfsx_work(matrix_layout: c_int, trans: c_char, equed: c_char, n: c_int,
                                kl: c_int, ku: c_int, nrhs: c_int, ab: *const c_float, ldab: c_int,
                                afb: *const c_float, ldafb: c_int, ipiv: *const c_int,
                                r: *const c_float, c: *const c_float, b: *const c_float,
                                ldb: c_int, x: *mut c_float, ldx: c_int, rcond: *mut c_float,
                                berr: *mut c_float, n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                                err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float,
                                work: *mut c_float, iwork: *mut c_int)
                                -> c_int;
    pub fn LAPACKE_dgbrfsx_work(matrix_layout: c_int, trans: c_char, equed: c_char, n: c_int,
                                kl: c_int, ku: c_int, nrhs: c_int, ab: *const c_double,
                                ldab: c_int, afb: *const c_double, ldafb: c_int,
                                ipiv: *const c_int, r: *const c_double, c: *const c_double,
                                b: *const c_double, ldb: c_int, x: *mut c_double, ldx: c_int,
                                rcond: *mut c_double, berr: *mut c_double, n_err_bnds: c_int,
                                err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                                nparams: c_int, params: *mut c_double, work: *mut c_double,
                                iwork: *mut c_int)
                                -> c_int;
    pub fn LAPACKE_cgbrfsx_work(matrix_layout: c_int, trans: c_char, equed: c_char, n: c_int,
                                kl: c_int, ku: c_int, nrhs: c_int, ab: *const c_float_complex,
                                ldab: c_int, afb: *const c_float_complex, ldafb: c_int,
                                ipiv: *const c_int, r: *const c_float, c: *const c_float,
                                b: *const c_float_complex, ldb: c_int, x: *mut c_float_complex,
                                ldx: c_int, rcond: *mut c_float, berr: *mut c_float,
                                n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                                err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float,
                                work: *mut c_float_complex, rwork: *mut c_float)
                                -> c_int;
    pub fn LAPACKE_zgbrfsx_work(matrix_layout: c_int, trans: c_char, equed: c_char, n: c_int,
                                kl: c_int, ku: c_int, nrhs: c_int, ab: *const c_double_complex,
                                ldab: c_int, afb: *const c_double_complex, ldafb: c_int,
                                ipiv: *const c_int, r: *const c_double, c: *const c_double,
                                b: *const c_double_complex, ldb: c_int, x: *mut c_double_complex,
                                ldx: c_int, rcond: *mut c_double, berr: *mut c_double,
                                n_err_bnds: c_int, err_bnds_norm: *mut c_double,
                                err_bnds_comp: *mut c_double, nparams: c_int,
                                params: *mut c_double, work: *mut c_double_complex,
                                rwork: *mut c_double)
                                -> c_int;

    pub fn LAPACKE_sgbsv_work(matrix_layout: c_int, n: c_int, kl: c_int, ku: c_int, nrhs: c_int,
                              ab: *mut c_float, ldab: c_int, ipiv: *mut c_int, b: *mut c_float,
                              ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_dgbsv_work(matrix_layout: c_int, n: c_int, kl: c_int, ku: c_int, nrhs: c_int,
                              ab: *mut c_double, ldab: c_int, ipiv: *mut c_int, b: *mut c_double,
                              ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_cgbsv_work(matrix_layout: c_int, n: c_int, kl: c_int, ku: c_int, nrhs: c_int,
                              ab: *mut c_float_complex, ldab: c_int, ipiv: *mut c_int,
                              b: *mut c_float_complex, ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_zgbsv_work(matrix_layout: c_int, n: c_int, kl: c_int, ku: c_int, nrhs: c_int,
                              ab: *mut c_double_complex, ldab: c_int, ipiv: *mut c_int,
                              b: *mut c_double_complex, ldb: c_int)
                              -> c_int;

    pub fn LAPACKE_sgbsvx_work(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int,
                               kl: c_int, ku: c_int, nrhs: c_int, ab: *mut c_float, ldab: c_int,
                               afb: *mut c_float, ldafb: c_int, ipiv: *mut c_int,
                               equed: *mut c_char, r: *mut c_float, c: *mut c_float,
                               b: *mut c_float, ldb: c_int, x: *mut c_float, ldx: c_int,
                               rcond: *mut c_float, ferr: *mut c_float, berr: *mut c_float,
                               work: *mut c_float, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dgbsvx_work(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int,
                               kl: c_int, ku: c_int, nrhs: c_int, ab: *mut c_double, ldab: c_int,
                               afb: *mut c_double, ldafb: c_int, ipiv: *mut c_int,
                               equed: *mut c_char, r: *mut c_double, c: *mut c_double,
                               b: *mut c_double, ldb: c_int, x: *mut c_double, ldx: c_int,
                               rcond: *mut c_double, ferr: *mut c_double, berr: *mut c_double,
                               work: *mut c_double, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cgbsvx_work(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int,
                               kl: c_int, ku: c_int, nrhs: c_int, ab: *mut c_float_complex,
                               ldab: c_int, afb: *mut c_float_complex, ldafb: c_int,
                               ipiv: *mut c_int, equed: *mut c_char, r: *mut c_float,
                               c: *mut c_float, b: *mut c_float_complex, ldb: c_int,
                               x: *mut c_float_complex, ldx: c_int, rcond: *mut c_float,
                               ferr: *mut c_float, berr: *mut c_float, work: *mut c_float_complex,
                               rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zgbsvx_work(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int,
                               kl: c_int, ku: c_int, nrhs: c_int, ab: *mut c_double_complex,
                               ldab: c_int, afb: *mut c_double_complex, ldafb: c_int,
                               ipiv: *mut c_int, equed: *mut c_char, r: *mut c_double,
                               c: *mut c_double, b: *mut c_double_complex, ldb: c_int,
                               x: *mut c_double_complex, ldx: c_int, rcond: *mut c_double,
                               ferr: *mut c_double, berr: *mut c_double,
                               work: *mut c_double_complex, rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sgbsvxx_work(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int,
                                kl: c_int, ku: c_int, nrhs: c_int, ab: *mut c_float, ldab: c_int,
                                afb: *mut c_float, ldafb: c_int, ipiv: *mut c_int,
                                equed: *mut c_char, r: *mut c_float, c: *mut c_float,
                                b: *mut c_float, ldb: c_int, x: *mut c_float, ldx: c_int,
                                rcond: *mut c_float, rpvgrw: *mut c_float, berr: *mut c_float,
                                n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                                err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float,
                                work: *mut c_float, iwork: *mut c_int)
                                -> c_int;
    pub fn LAPACKE_dgbsvxx_work(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int,
                                kl: c_int, ku: c_int, nrhs: c_int, ab: *mut c_double, ldab: c_int,
                                afb: *mut c_double, ldafb: c_int, ipiv: *mut c_int,
                                equed: *mut c_char, r: *mut c_double, c: *mut c_double,
                                b: *mut c_double, ldb: c_int, x: *mut c_double, ldx: c_int,
                                rcond: *mut c_double, rpvgrw: *mut c_double, berr: *mut c_double,
                                n_err_bnds: c_int, err_bnds_norm: *mut c_double,
                                err_bnds_comp: *mut c_double, nparams: c_int,
                                params: *mut c_double, work: *mut c_double, iwork: *mut c_int)
                                -> c_int;
    pub fn LAPACKE_cgbsvxx_work(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int,
                                kl: c_int, ku: c_int, nrhs: c_int, ab: *mut c_float_complex,
                                ldab: c_int, afb: *mut c_float_complex, ldafb: c_int,
                                ipiv: *mut c_int, equed: *mut c_char, r: *mut c_float,
                                c: *mut c_float, b: *mut c_float_complex, ldb: c_int,
                                x: *mut c_float_complex, ldx: c_int, rcond: *mut c_float,
                                rpvgrw: *mut c_float, berr: *mut c_float, n_err_bnds: c_int,
                                err_bnds_norm: *mut c_float, err_bnds_comp: *mut c_float,
                                nparams: c_int, params: *mut c_float, work: *mut c_float_complex,
                                rwork: *mut c_float)
                                -> c_int;
    pub fn LAPACKE_zgbsvxx_work(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int,
                                kl: c_int, ku: c_int, nrhs: c_int, ab: *mut c_double_complex,
                                ldab: c_int, afb: *mut c_double_complex, ldafb: c_int,
                                ipiv: *mut c_int, equed: *mut c_char, r: *mut c_double,
                                c: *mut c_double, b: *mut c_double_complex, ldb: c_int,
                                x: *mut c_double_complex, ldx: c_int, rcond: *mut c_double,
                                rpvgrw: *mut c_double, berr: *mut c_double, n_err_bnds: c_int,
                                err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                                nparams: c_int, params: *mut c_double, work: *mut c_double_complex,
                                rwork: *mut c_double)
                                -> c_int;

    pub fn LAPACKE_sgbtrf_work(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                               ab: *mut c_float, ldab: c_int, ipiv: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dgbtrf_work(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                               ab: *mut c_double, ldab: c_int, ipiv: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cgbtrf_work(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                               ab: *mut c_float_complex, ldab: c_int, ipiv: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zgbtrf_work(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                               ab: *mut c_double_complex, ldab: c_int, ipiv: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_sgbtrs_work(matrix_layout: c_int, trans: c_char, n: c_int, kl: c_int, ku: c_int,
                               nrhs: c_int, ab: *const c_float, ldab: c_int, ipiv: *const c_int,
                               b: *mut c_float, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_dgbtrs_work(matrix_layout: c_int, trans: c_char, n: c_int, kl: c_int, ku: c_int,
                               nrhs: c_int, ab: *const c_double, ldab: c_int, ipiv: *const c_int,
                               b: *mut c_double, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_cgbtrs_work(matrix_layout: c_int, trans: c_char, n: c_int, kl: c_int, ku: c_int,
                               nrhs: c_int, ab: *const c_float_complex, ldab: c_int,
                               ipiv: *const c_int, b: *mut c_float_complex, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_zgbtrs_work(matrix_layout: c_int, trans: c_char, n: c_int, kl: c_int, ku: c_int,
                               nrhs: c_int, ab: *const c_double_complex, ldab: c_int,
                               ipiv: *const c_int, b: *mut c_double_complex, ldb: c_int)
                               -> c_int;

    pub fn LAPACKE_sgebak_work(matrix_layout: c_int, job: c_char, side: c_char, n: c_int,
                               ilo: c_int, ihi: c_int, scale: *const c_float, m: c_int,
                               v: *mut c_float, ldv: c_int)
                               -> c_int;
    pub fn LAPACKE_dgebak_work(matrix_layout: c_int, job: c_char, side: c_char, n: c_int,
                               ilo: c_int, ihi: c_int, scale: *const c_double, m: c_int,
                               v: *mut c_double, ldv: c_int)
                               -> c_int;
    pub fn LAPACKE_cgebak_work(matrix_layout: c_int, job: c_char, side: c_char, n: c_int,
                               ilo: c_int, ihi: c_int, scale: *const c_float, m: c_int,
                               v: *mut c_float_complex, ldv: c_int)
                               -> c_int;
    pub fn LAPACKE_zgebak_work(matrix_layout: c_int, job: c_char, side: c_char, n: c_int,
                               ilo: c_int, ihi: c_int, scale: *const c_double, m: c_int,
                               v: *mut c_double_complex, ldv: c_int)
                               -> c_int;

    pub fn LAPACKE_sgebal_work(matrix_layout: c_int, job: c_char, n: c_int, a: *mut c_float,
                               lda: c_int, ilo: *mut c_int, ihi: *mut c_int, scale: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dgebal_work(matrix_layout: c_int, job: c_char, n: c_int, a: *mut c_double,
                               lda: c_int, ilo: *mut c_int, ihi: *mut c_int, scale: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_cgebal_work(matrix_layout: c_int, job: c_char, n: c_int,
                               a: *mut c_float_complex, lda: c_int, ilo: *mut c_int,
                               ihi: *mut c_int, scale: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zgebal_work(matrix_layout: c_int, job: c_char, n: c_int,
                               a: *mut c_double_complex, lda: c_int, ilo: *mut c_int,
                               ihi: *mut c_int, scale: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sgebrd_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float,
                               lda: c_int, d: *mut c_float, e: *mut c_float, tauq: *mut c_float,
                               taup: *mut c_float, work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dgebrd_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double,
                               lda: c_int, d: *mut c_double, e: *mut c_double, tauq: *mut c_double,
                               taup: *mut c_double, work: *mut c_double, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_cgebrd_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                               lda: c_int, d: *mut c_float, e: *mut c_float,
                               tauq: *mut c_float_complex, taup: *mut c_float_complex,
                               work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zgebrd_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                               lda: c_int, d: *mut c_double, e: *mut c_double,
                               tauq: *mut c_double_complex, taup: *mut c_double_complex,
                               work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sgecon_work(matrix_layout: c_int, norm: c_char, n: c_int, a: *const c_float,
                               lda: c_int, anorm: c_float, rcond: *mut c_float, work: *mut c_float,
                               iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dgecon_work(matrix_layout: c_int, norm: c_char, n: c_int, a: *const c_double,
                               lda: c_int, anorm: c_double, rcond: *mut c_double,
                               work: *mut c_double, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cgecon_work(matrix_layout: c_int, norm: c_char, n: c_int,
                               a: *const c_float_complex, lda: c_int, anorm: c_float,
                               rcond: *mut c_float, work: *mut c_float_complex,
                               rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zgecon_work(matrix_layout: c_int, norm: c_char, n: c_int,
                               a: *const c_double_complex, lda: c_int, anorm: c_double,
                               rcond: *mut c_double, work: *mut c_double_complex,
                               rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sgeequ_work(matrix_layout: c_int, m: c_int, n: c_int, a: *const c_float,
                               lda: c_int, r: *mut c_float, c: *mut c_float, rowcnd: *mut c_float,
                               colcnd: *mut c_float, amax: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dgeequ_work(matrix_layout: c_int, m: c_int, n: c_int, a: *const c_double,
                               lda: c_int, r: *mut c_double, c: *mut c_double,
                               rowcnd: *mut c_double, colcnd: *mut c_double, amax: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_cgeequ_work(matrix_layout: c_int, m: c_int, n: c_int, a: *const c_float_complex,
                               lda: c_int, r: *mut c_float, c: *mut c_float, rowcnd: *mut c_float,
                               colcnd: *mut c_float, amax: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zgeequ_work(matrix_layout: c_int, m: c_int, n: c_int,
                               a: *const c_double_complex, lda: c_int, r: *mut c_double,
                               c: *mut c_double, rowcnd: *mut c_double, colcnd: *mut c_double,
                               amax: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sgeequb_work(matrix_layout: c_int, m: c_int, n: c_int, a: *const c_float,
                                lda: c_int, r: *mut c_float, c: *mut c_float, rowcnd: *mut c_float,
                                colcnd: *mut c_float, amax: *mut c_float)
                                -> c_int;
    pub fn LAPACKE_dgeequb_work(matrix_layout: c_int, m: c_int, n: c_int, a: *const c_double,
                                lda: c_int, r: *mut c_double, c: *mut c_double,
                                rowcnd: *mut c_double, colcnd: *mut c_double, amax: *mut c_double)
                                -> c_int;
    pub fn LAPACKE_cgeequb_work(matrix_layout: c_int, m: c_int, n: c_int,
                                a: *const c_float_complex, lda: c_int, r: *mut c_float,
                                c: *mut c_float, rowcnd: *mut c_float, colcnd: *mut c_float,
                                amax: *mut c_float)
                                -> c_int;
    pub fn LAPACKE_zgeequb_work(matrix_layout: c_int, m: c_int, n: c_int,
                                a: *const c_double_complex, lda: c_int, r: *mut c_double,
                                c: *mut c_double, rowcnd: *mut c_double, colcnd: *mut c_double,
                                amax: *mut c_double)
                                -> c_int;

    pub fn LAPACKE_sgees_work(matrix_layout: c_int, jobvs: c_char, sort: c_char,
                              select: LAPACK_S_SELECT2, n: c_int, a: *mut c_float, lda: c_int,
                              sdim: *mut c_int, wr: *mut c_float, wi: *mut c_float,
                              vs: *mut c_float, ldvs: c_int, work: *mut c_float, lwork: c_int,
                              bwork: *mut c_int)
                              -> c_int;
    pub fn LAPACKE_dgees_work(matrix_layout: c_int, jobvs: c_char, sort: c_char,
                              select: LAPACK_D_SELECT2, n: c_int, a: *mut c_double, lda: c_int,
                              sdim: *mut c_int, wr: *mut c_double, wi: *mut c_double,
                              vs: *mut c_double, ldvs: c_int, work: *mut c_double, lwork: c_int,
                              bwork: *mut c_int)
                              -> c_int;
    pub fn LAPACKE_cgees_work(matrix_layout: c_int, jobvs: c_char, sort: c_char,
                              select: LAPACK_C_SELECT1, n: c_int, a: *mut c_float_complex,
                              lda: c_int, sdim: *mut c_int, w: *mut c_float_complex,
                              vs: *mut c_float_complex, ldvs: c_int, work: *mut c_float_complex,
                              lwork: c_int, rwork: *mut c_float, bwork: *mut c_int)
                              -> c_int;
    pub fn LAPACKE_zgees_work(matrix_layout: c_int, jobvs: c_char, sort: c_char,
                              select: LAPACK_Z_SELECT1, n: c_int, a: *mut c_double_complex,
                              lda: c_int, sdim: *mut c_int, w: *mut c_double_complex,
                              vs: *mut c_double_complex, ldvs: c_int, work: *mut c_double_complex,
                              lwork: c_int, rwork: *mut c_double, bwork: *mut c_int)
                              -> c_int;

    pub fn LAPACKE_sgeesx_work(matrix_layout: c_int, jobvs: c_char, sort: c_char,
                               select: LAPACK_S_SELECT2, sense: c_char, n: c_int, a: *mut c_float,
                               lda: c_int, sdim: *mut c_int, wr: *mut c_float, wi: *mut c_float,
                               vs: *mut c_float, ldvs: c_int, rconde: *mut c_float,
                               rcondv: *mut c_float, work: *mut c_float, lwork: c_int,
                               iwork: *mut c_int, liwork: c_int, bwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dgeesx_work(matrix_layout: c_int, jobvs: c_char, sort: c_char,
                               select: LAPACK_D_SELECT2, sense: c_char, n: c_int, a: *mut c_double,
                               lda: c_int, sdim: *mut c_int, wr: *mut c_double, wi: *mut c_double,
                               vs: *mut c_double, ldvs: c_int, rconde: *mut c_double,
                               rcondv: *mut c_double, work: *mut c_double, lwork: c_int,
                               iwork: *mut c_int, liwork: c_int, bwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cgeesx_work(matrix_layout: c_int, jobvs: c_char, sort: c_char,
                               select: LAPACK_C_SELECT1, sense: c_char, n: c_int,
                               a: *mut c_float_complex, lda: c_int, sdim: *mut c_int,
                               w: *mut c_float_complex, vs: *mut c_float_complex, ldvs: c_int,
                               rconde: *mut c_float, rcondv: *mut c_float,
                               work: *mut c_float_complex, lwork: c_int, rwork: *mut c_float,
                               bwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zgeesx_work(matrix_layout: c_int, jobvs: c_char, sort: c_char,
                               select: LAPACK_Z_SELECT1, sense: c_char, n: c_int,
                               a: *mut c_double_complex, lda: c_int, sdim: *mut c_int,
                               w: *mut c_double_complex, vs: *mut c_double_complex, ldvs: c_int,
                               rconde: *mut c_double, rcondv: *mut c_double,
                               work: *mut c_double_complex, lwork: c_int, rwork: *mut c_double,
                               bwork: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_sgeev_work(matrix_layout: c_int, jobvl: c_char, jobvr: c_char, n: c_int,
                              a: *mut c_float, lda: c_int, wr: *mut c_float, wi: *mut c_float,
                              vl: *mut c_float, ldvl: c_int, vr: *mut c_float, ldvr: c_int,
                              work: *mut c_float, lwork: c_int)
                              -> c_int;
    pub fn LAPACKE_dgeev_work(matrix_layout: c_int, jobvl: c_char, jobvr: c_char, n: c_int,
                              a: *mut c_double, lda: c_int, wr: *mut c_double, wi: *mut c_double,
                              vl: *mut c_double, ldvl: c_int, vr: *mut c_double, ldvr: c_int,
                              work: *mut c_double, lwork: c_int)
                              -> c_int;
    pub fn LAPACKE_cgeev_work(matrix_layout: c_int, jobvl: c_char, jobvr: c_char, n: c_int,
                              a: *mut c_float_complex, lda: c_int, w: *mut c_float_complex,
                              vl: *mut c_float_complex, ldvl: c_int, vr: *mut c_float_complex,
                              ldvr: c_int, work: *mut c_float_complex, lwork: c_int,
                              rwork: *mut c_float)
                              -> c_int;
    pub fn LAPACKE_zgeev_work(matrix_layout: c_int, jobvl: c_char, jobvr: c_char, n: c_int,
                              a: *mut c_double_complex, lda: c_int, w: *mut c_double_complex,
                              vl: *mut c_double_complex, ldvl: c_int, vr: *mut c_double_complex,
                              ldvr: c_int, work: *mut c_double_complex, lwork: c_int,
                              rwork: *mut c_double)
                              -> c_int;

    pub fn LAPACKE_sgeevx_work(matrix_layout: c_int, balanc: c_char, jobvl: c_char, jobvr: c_char,
                               sense: c_char, n: c_int, a: *mut c_float, lda: c_int,
                               wr: *mut c_float, wi: *mut c_float, vl: *mut c_float, ldvl: c_int,
                               vr: *mut c_float, ldvr: c_int, ilo: *mut c_int, ihi: *mut c_int,
                               scale: *mut c_float, abnrm: *mut c_float, rconde: *mut c_float,
                               rcondv: *mut c_float, work: *mut c_float, lwork: c_int,
                               iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dgeevx_work(matrix_layout: c_int, balanc: c_char, jobvl: c_char, jobvr: c_char,
                               sense: c_char, n: c_int, a: *mut c_double, lda: c_int,
                               wr: *mut c_double, wi: *mut c_double, vl: *mut c_double,
                               ldvl: c_int, vr: *mut c_double, ldvr: c_int, ilo: *mut c_int,
                               ihi: *mut c_int, scale: *mut c_double, abnrm: *mut c_double,
                               rconde: *mut c_double, rcondv: *mut c_double, work: *mut c_double,
                               lwork: c_int, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cgeevx_work(matrix_layout: c_int, balanc: c_char, jobvl: c_char, jobvr: c_char,
                               sense: c_char, n: c_int, a: *mut c_float_complex, lda: c_int,
                               w: *mut c_float_complex, vl: *mut c_float_complex, ldvl: c_int,
                               vr: *mut c_float_complex, ldvr: c_int, ilo: *mut c_int,
                               ihi: *mut c_int, scale: *mut c_float, abnrm: *mut c_float,
                               rconde: *mut c_float, rcondv: *mut c_float,
                               work: *mut c_float_complex, lwork: c_int, rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zgeevx_work(matrix_layout: c_int, balanc: c_char, jobvl: c_char, jobvr: c_char,
                               sense: c_char, n: c_int, a: *mut c_double_complex, lda: c_int,
                               w: *mut c_double_complex, vl: *mut c_double_complex, ldvl: c_int,
                               vr: *mut c_double_complex, ldvr: c_int, ilo: *mut c_int,
                               ihi: *mut c_int, scale: *mut c_double, abnrm: *mut c_double,
                               rconde: *mut c_double, rcondv: *mut c_double,
                               work: *mut c_double_complex, lwork: c_int, rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sgehrd_work(matrix_layout: c_int, n: c_int, ilo: c_int, ihi: c_int,
                               a: *mut c_float, lda: c_int, tau: *mut c_float, work: *mut c_float,
                               lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dgehrd_work(matrix_layout: c_int, n: c_int, ilo: c_int, ihi: c_int,
                               a: *mut c_double, lda: c_int, tau: *mut c_double,
                               work: *mut c_double, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_cgehrd_work(matrix_layout: c_int, n: c_int, ilo: c_int, ihi: c_int,
                               a: *mut c_float_complex, lda: c_int, tau: *mut c_float_complex,
                               work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zgehrd_work(matrix_layout: c_int, n: c_int, ilo: c_int, ihi: c_int,
                               a: *mut c_double_complex, lda: c_int, tau: *mut c_double_complex,
                               work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sgejsv_work(matrix_layout: c_int, joba: c_char, jobu: c_char, jobv: c_char,
                               jobr: c_char, jobt: c_char, jobp: c_char, m: c_int, n: c_int,
                               a: *mut c_float, lda: c_int, sva: *mut c_float, u: *mut c_float,
                               ldu: c_int, v: *mut c_float, ldv: c_int, work: *mut c_float,
                               lwork: c_int, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dgejsv_work(matrix_layout: c_int, joba: c_char, jobu: c_char, jobv: c_char,
                               jobr: c_char, jobt: c_char, jobp: c_char, m: c_int, n: c_int,
                               a: *mut c_double, lda: c_int, sva: *mut c_double, u: *mut c_double,
                               ldu: c_int, v: *mut c_double, ldv: c_int, work: *mut c_double,
                               lwork: c_int, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cgejsv_work(matrix_layout: c_int, joba: c_char, jobu: c_char, jobv: c_char,
                               jobr: c_char, jobt: c_char, jobp: c_char, m: c_int, n: c_int,
                               a: *mut c_float_complex, lda: c_int, sva: *mut c_float,
                               u: *mut c_float_complex, ldu: c_int, v: *mut c_float_complex,
                               ldv: c_int, cwork: *mut c_float_complex, lwork: c_int,
                               work: *mut c_float, lrwork: c_int, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zgejsv_work(matrix_layout: c_int, joba: c_char, jobu: c_char, jobv: c_char,
                               jobr: c_char, jobt: c_char, jobp: c_char, m: c_int, n: c_int,
                               a: *mut c_double_complex, lda: c_int, sva: *mut c_double,
                               u: *mut c_double_complex, ldu: c_int, v: *mut c_double_complex,
                               ldv: c_int, cwork: *mut c_double_complex, lwork: c_int,
                               work: *mut c_double, lrwork: c_int, iwork: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_sgelq2_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float,
                               lda: c_int, tau: *mut c_float, work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dgelq2_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double,
                               lda: c_int, tau: *mut c_double, work: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_cgelq2_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                               lda: c_int, tau: *mut c_float_complex, work: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zgelq2_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                               lda: c_int, tau: *mut c_double_complex, work: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_sgelqf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float,
                               lda: c_int, tau: *mut c_float, work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dgelqf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double,
                               lda: c_int, tau: *mut c_double, work: *mut c_double, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_cgelqf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                               lda: c_int, tau: *mut c_float_complex, work: *mut c_float_complex,
                               lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zgelqf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                               lda: c_int, tau: *mut c_double_complex, work: *mut c_double_complex,
                               lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sgels_work(matrix_layout: c_int, trans: c_char, m: c_int, n: c_int, nrhs: c_int,
                              a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int,
                              work: *mut c_float, lwork: c_int)
                              -> c_int;
    pub fn LAPACKE_dgels_work(matrix_layout: c_int, trans: c_char, m: c_int, n: c_int, nrhs: c_int,
                              a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int,
                              work: *mut c_double, lwork: c_int)
                              -> c_int;
    pub fn LAPACKE_cgels_work(matrix_layout: c_int, trans: c_char, m: c_int, n: c_int, nrhs: c_int,
                              a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex,
                              ldb: c_int, work: *mut c_float_complex, lwork: c_int)
                              -> c_int;
    pub fn LAPACKE_zgels_work(matrix_layout: c_int, trans: c_char, m: c_int, n: c_int, nrhs: c_int,
                              a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                              ldb: c_int, work: *mut c_double_complex, lwork: c_int)
                              -> c_int;

    pub fn LAPACKE_sgelsd_work(matrix_layout: c_int, m: c_int, n: c_int, nrhs: c_int,
                               a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int,
                               s: *mut c_float, rcond: c_float, rank: *mut c_int,
                               work: *mut c_float, lwork: c_int, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dgelsd_work(matrix_layout: c_int, m: c_int, n: c_int, nrhs: c_int,
                               a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int,
                               s: *mut c_double, rcond: c_double, rank: *mut c_int,
                               work: *mut c_double, lwork: c_int, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cgelsd_work(matrix_layout: c_int, m: c_int, n: c_int, nrhs: c_int,
                               a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex,
                               ldb: c_int, s: *mut c_float, rcond: c_float, rank: *mut c_int,
                               work: *mut c_float_complex, lwork: c_int, rwork: *mut c_float,
                               iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zgelsd_work(matrix_layout: c_int, m: c_int, n: c_int, nrhs: c_int,
                               a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                               ldb: c_int, s: *mut c_double, rcond: c_double, rank: *mut c_int,
                               work: *mut c_double_complex, lwork: c_int, rwork: *mut c_double,
                               iwork: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_sgelss_work(matrix_layout: c_int, m: c_int, n: c_int, nrhs: c_int,
                               a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int,
                               s: *mut c_float, rcond: c_float, rank: *mut c_int,
                               work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dgelss_work(matrix_layout: c_int, m: c_int, n: c_int, nrhs: c_int,
                               a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int,
                               s: *mut c_double, rcond: c_double, rank: *mut c_int,
                               work: *mut c_double, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_cgelss_work(matrix_layout: c_int, m: c_int, n: c_int, nrhs: c_int,
                               a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex,
                               ldb: c_int, s: *mut c_float, rcond: c_float, rank: *mut c_int,
                               work: *mut c_float_complex, lwork: c_int, rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zgelss_work(matrix_layout: c_int, m: c_int, n: c_int, nrhs: c_int,
                               a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                               ldb: c_int, s: *mut c_double, rcond: c_double, rank: *mut c_int,
                               work: *mut c_double_complex, lwork: c_int, rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sgelsy_work(matrix_layout: c_int, m: c_int, n: c_int, nrhs: c_int,
                               a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int,
                               jpvt: *mut c_int, rcond: c_float, rank: *mut c_int,
                               work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dgelsy_work(matrix_layout: c_int, m: c_int, n: c_int, nrhs: c_int,
                               a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int,
                               jpvt: *mut c_int, rcond: c_double, rank: *mut c_int,
                               work: *mut c_double, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_cgelsy_work(matrix_layout: c_int, m: c_int, n: c_int, nrhs: c_int,
                               a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex,
                               ldb: c_int, jpvt: *mut c_int, rcond: c_float, rank: *mut c_int,
                               work: *mut c_float_complex, lwork: c_int, rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zgelsy_work(matrix_layout: c_int, m: c_int, n: c_int, nrhs: c_int,
                               a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                               ldb: c_int, jpvt: *mut c_int, rcond: c_double, rank: *mut c_int,
                               work: *mut c_double_complex, lwork: c_int, rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sgeqlf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float,
                               lda: c_int, tau: *mut c_float, work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dgeqlf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double,
                               lda: c_int, tau: *mut c_double, work: *mut c_double, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_cgeqlf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                               lda: c_int, tau: *mut c_float_complex, work: *mut c_float_complex,
                               lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zgeqlf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                               lda: c_int, tau: *mut c_double_complex, work: *mut c_double_complex,
                               lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sgeqp3_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float,
                               lda: c_int, jpvt: *mut c_int, tau: *mut c_float, work: *mut c_float,
                               lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dgeqp3_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double,
                               lda: c_int, jpvt: *mut c_int, tau: *mut c_double,
                               work: *mut c_double, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_cgeqp3_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                               lda: c_int, jpvt: *mut c_int, tau: *mut c_float_complex,
                               work: *mut c_float_complex, lwork: c_int, rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zgeqp3_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                               lda: c_int, jpvt: *mut c_int, tau: *mut c_double_complex,
                               work: *mut c_double_complex, lwork: c_int, rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sgeqpf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float,
                               lda: c_int, jpvt: *mut c_int, tau: *mut c_float, work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dgeqpf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double,
                               lda: c_int, jpvt: *mut c_int, tau: *mut c_double,
                               work: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_cgeqpf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                               lda: c_int, jpvt: *mut c_int, tau: *mut c_float_complex,
                               work: *mut c_float_complex, rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zgeqpf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                               lda: c_int, jpvt: *mut c_int, tau: *mut c_double_complex,
                               work: *mut c_double_complex, rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sgeqr2_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float,
                               lda: c_int, tau: *mut c_float, work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dgeqr2_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double,
                               lda: c_int, tau: *mut c_double, work: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_cgeqr2_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                               lda: c_int, tau: *mut c_float_complex, work: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zgeqr2_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                               lda: c_int, tau: *mut c_double_complex, work: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_sgeqrf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float,
                               lda: c_int, tau: *mut c_float, work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dgeqrf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double,
                               lda: c_int, tau: *mut c_double, work: *mut c_double, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_cgeqrf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                               lda: c_int, tau: *mut c_float_complex, work: *mut c_float_complex,
                               lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zgeqrf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                               lda: c_int, tau: *mut c_double_complex, work: *mut c_double_complex,
                               lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sgeqrfp_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float,
                                lda: c_int, tau: *mut c_float, work: *mut c_float, lwork: c_int)
                                -> c_int;
    pub fn LAPACKE_dgeqrfp_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double,
                                lda: c_int, tau: *mut c_double, work: *mut c_double, lwork: c_int)
                                -> c_int;
    pub fn LAPACKE_cgeqrfp_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                                lda: c_int, tau: *mut c_float_complex, work: *mut c_float_complex,
                                lwork: c_int)
                                -> c_int;
    pub fn LAPACKE_zgeqrfp_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                                lda: c_int, tau: *mut c_double_complex,
                                work: *mut c_double_complex, lwork: c_int)
                                -> c_int;

    pub fn LAPACKE_sgerfs_work(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                               a: *const c_float, lda: c_int, af: *const c_float, ldaf: c_int,
                               ipiv: *const c_int, b: *const c_float, ldb: c_int, x: *mut c_float,
                               ldx: c_int, ferr: *mut c_float, berr: *mut c_float,
                               work: *mut c_float, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dgerfs_work(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                               a: *const c_double, lda: c_int, af: *const c_double, ldaf: c_int,
                               ipiv: *const c_int, b: *const c_double, ldb: c_int,
                               x: *mut c_double, ldx: c_int, ferr: *mut c_double,
                               berr: *mut c_double, work: *mut c_double, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cgerfs_work(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                               a: *const c_float_complex, lda: c_int, af: *const c_float_complex,
                               ldaf: c_int, ipiv: *const c_int, b: *const c_float_complex,
                               ldb: c_int, x: *mut c_float_complex, ldx: c_int, ferr: *mut c_float,
                               berr: *mut c_float, work: *mut c_float_complex, rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zgerfs_work(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                               a: *const c_double_complex, lda: c_int, af: *const c_double_complex,
                               ldaf: c_int, ipiv: *const c_int, b: *const c_double_complex,
                               ldb: c_int, x: *mut c_double_complex, ldx: c_int,
                               ferr: *mut c_double, berr: *mut c_double,
                               work: *mut c_double_complex, rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sgerfsx_work(matrix_layout: c_int, trans: c_char, equed: c_char, n: c_int,
                                nrhs: c_int, a: *const c_float, lda: c_int, af: *const c_float,
                                ldaf: c_int, ipiv: *const c_int, r: *const c_float,
                                c: *const c_float, b: *const c_float, ldb: c_int, x: *mut c_float,
                                ldx: c_int, rcond: *mut c_float, berr: *mut c_float,
                                n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                                err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float,
                                work: *mut c_float, iwork: *mut c_int)
                                -> c_int;
    pub fn LAPACKE_dgerfsx_work(matrix_layout: c_int, trans: c_char, equed: c_char, n: c_int,
                                nrhs: c_int, a: *const c_double, lda: c_int, af: *const c_double,
                                ldaf: c_int, ipiv: *const c_int, r: *const c_double,
                                c: *const c_double, b: *const c_double, ldb: c_int,
                                x: *mut c_double, ldx: c_int, rcond: *mut c_double,
                                berr: *mut c_double, n_err_bnds: c_int,
                                err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                                nparams: c_int, params: *mut c_double, work: *mut c_double,
                                iwork: *mut c_int)
                                -> c_int;
    pub fn LAPACKE_cgerfsx_work(matrix_layout: c_int, trans: c_char, equed: c_char, n: c_int,
                                nrhs: c_int, a: *const c_float_complex, lda: c_int,
                                af: *const c_float_complex, ldaf: c_int, ipiv: *const c_int,
                                r: *const c_float, c: *const c_float, b: *const c_float_complex,
                                ldb: c_int, x: *mut c_float_complex, ldx: c_int,
                                rcond: *mut c_float, berr: *mut c_float, n_err_bnds: c_int,
                                err_bnds_norm: *mut c_float, err_bnds_comp: *mut c_float,
                                nparams: c_int, params: *mut c_float, work: *mut c_float_complex,
                                rwork: *mut c_float)
                                -> c_int;
    pub fn LAPACKE_zgerfsx_work(matrix_layout: c_int, trans: c_char, equed: c_char, n: c_int,
                                nrhs: c_int, a: *const c_double_complex, lda: c_int,
                                af: *const c_double_complex, ldaf: c_int, ipiv: *const c_int,
                                r: *const c_double, c: *const c_double, b: *const c_double_complex,
                                ldb: c_int, x: *mut c_double_complex, ldx: c_int,
                                rcond: *mut c_double, berr: *mut c_double, n_err_bnds: c_int,
                                err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                                nparams: c_int, params: *mut c_double, work: *mut c_double_complex,
                                rwork: *mut c_double)
                                -> c_int;

    pub fn LAPACKE_sgerqf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float,
                               lda: c_int, tau: *mut c_float, work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dgerqf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double,
                               lda: c_int, tau: *mut c_double, work: *mut c_double, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_cgerqf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                               lda: c_int, tau: *mut c_float_complex, work: *mut c_float_complex,
                               lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zgerqf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                               lda: c_int, tau: *mut c_double_complex, work: *mut c_double_complex,
                               lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sgesdd_work(matrix_layout: c_int, jobz: c_char, m: c_int, n: c_int,
                               a: *mut c_float, lda: c_int, s: *mut c_float, u: *mut c_float,
                               ldu: c_int, vt: *mut c_float, ldvt: c_int, work: *mut c_float,
                               lwork: c_int, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dgesdd_work(matrix_layout: c_int, jobz: c_char, m: c_int, n: c_int,
                               a: *mut c_double, lda: c_int, s: *mut c_double, u: *mut c_double,
                               ldu: c_int, vt: *mut c_double, ldvt: c_int, work: *mut c_double,
                               lwork: c_int, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cgesdd_work(matrix_layout: c_int, jobz: c_char, m: c_int, n: c_int,
                               a: *mut c_float_complex, lda: c_int, s: *mut c_float,
                               u: *mut c_float_complex, ldu: c_int, vt: *mut c_float_complex,
                               ldvt: c_int, work: *mut c_float_complex, lwork: c_int,
                               rwork: *mut c_float, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zgesdd_work(matrix_layout: c_int, jobz: c_char, m: c_int, n: c_int,
                               a: *mut c_double_complex, lda: c_int, s: *mut c_double,
                               u: *mut c_double_complex, ldu: c_int, vt: *mut c_double_complex,
                               ldvt: c_int, work: *mut c_double_complex, lwork: c_int,
                               rwork: *mut c_double, iwork: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_sgesv_work(matrix_layout: c_int, n: c_int, nrhs: c_int, a: *mut c_float,
                              lda: c_int, ipiv: *mut c_int, b: *mut c_float, ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_dgesv_work(matrix_layout: c_int, n: c_int, nrhs: c_int, a: *mut c_double,
                              lda: c_int, ipiv: *mut c_int, b: *mut c_double, ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_cgesv_work(matrix_layout: c_int, n: c_int, nrhs: c_int, a: *mut c_float_complex,
                              lda: c_int, ipiv: *mut c_int, b: *mut c_float_complex, ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_zgesv_work(matrix_layout: c_int, n: c_int, nrhs: c_int,
                              a: *mut c_double_complex, lda: c_int, ipiv: *mut c_int,
                              b: *mut c_double_complex, ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_dsgesv_work(matrix_layout: c_int, n: c_int, nrhs: c_int, a: *mut c_double,
                               lda: c_int, ipiv: *mut c_int, b: *mut c_double, ldb: c_int,
                               x: *mut c_double, ldx: c_int, work: *mut c_double,
                               swork: *mut c_float, iter: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zcgesv_work(matrix_layout: c_int, n: c_int, nrhs: c_int,
                               a: *mut c_double_complex, lda: c_int, ipiv: *mut c_int,
                               b: *mut c_double_complex, ldb: c_int, x: *mut c_double_complex,
                               ldx: c_int, work: *mut c_double_complex,
                               swork: *mut c_float_complex, rwork: *mut c_double, iter: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_sgesvd_work(matrix_layout: c_int, jobu: c_char, jobvt: c_char, m: c_int,
                               n: c_int, a: *mut c_float, lda: c_int, s: *mut c_float,
                               u: *mut c_float, ldu: c_int, vt: *mut c_float, ldvt: c_int,
                               work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dgesvd_work(matrix_layout: c_int, jobu: c_char, jobvt: c_char, m: c_int,
                               n: c_int, a: *mut c_double, lda: c_int, s: *mut c_double,
                               u: *mut c_double, ldu: c_int, vt: *mut c_double, ldvt: c_int,
                               work: *mut c_double, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_cgesvd_work(matrix_layout: c_int, jobu: c_char, jobvt: c_char, m: c_int,
                               n: c_int, a: *mut c_float_complex, lda: c_int, s: *mut c_float,
                               u: *mut c_float_complex, ldu: c_int, vt: *mut c_float_complex,
                               ldvt: c_int, work: *mut c_float_complex, lwork: c_int,
                               rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zgesvd_work(matrix_layout: c_int, jobu: c_char, jobvt: c_char, m: c_int,
                               n: c_int, a: *mut c_double_complex, lda: c_int, s: *mut c_double,
                               u: *mut c_double_complex, ldu: c_int, vt: *mut c_double_complex,
                               ldvt: c_int, work: *mut c_double_complex, lwork: c_int,
                               rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sgesvdx_work(matrix_layout: c_int, jobu: c_char, jobvt: c_char, range: c_char,
                                m: c_int, n: c_int, a: *mut c_float, lda: c_int, vl: c_int,
                                vu: c_int, il: c_int, iu: c_int, ns: c_int, s: *mut c_float,
                                u: *mut c_float, ldu: c_int, vt: *mut c_float, ldvt: c_int,
                                work: *mut c_float, lwork: c_int, iwork: *mut c_int)
                                -> c_int;
    pub fn LAPACKE_dgesvdx_work(matrix_layout: c_int, jobu: c_char, jobvt: c_char, range: c_char,
                                m: c_int, n: c_int, a: *mut c_double, lda: c_int, vl: c_int,
                                vu: c_int, il: c_int, iu: c_int, ns: c_int, s: *mut c_double,
                                u: *mut c_double, ldu: c_int, vt: *mut c_double, ldvt: c_int,
                                work: *mut c_double, lwork: c_int, iwork: *mut c_int)
                                -> c_int;
    pub fn LAPACKE_cgesvdx_work(matrix_layout: c_int, jobu: c_char, jobvt: c_char, range: c_char,
                                m: c_int, n: c_int, a: *mut c_float_complex, lda: c_int, vl: c_int,
                                vu: c_int, il: c_int, iu: c_int, ns: c_int, s: *mut c_float,
                                u: *mut c_float_complex, ldu: c_int, vt: *mut c_float_complex,
                                ldvt: c_int, work: *mut c_float_complex, lwork: c_int,
                                rwork: *mut c_float, iwork: *mut c_int)
                                -> c_int;
    pub fn LAPACKE_zgesvdx_work(matrix_layout: c_int, jobu: c_char, jobvt: c_char, range: c_char,
                                m: c_int, n: c_int, a: *mut c_double_complex, lda: c_int,
                                vl: c_int, vu: c_int, il: c_int, iu: c_int, ns: c_int,
                                s: *mut c_double, u: *mut c_double_complex, ldu: c_int,
                                vt: *mut c_double_complex, ldvt: c_int,
                                work: *mut c_double_complex, lwork: c_int, rwork: *mut c_double,
                                iwork: *mut c_int)
                                -> c_int;

    pub fn LAPACKE_sgesvj_work(matrix_layout: c_int, joba: c_char, jobu: c_char, jobv: c_char,
                               m: c_int, n: c_int, a: *mut c_float, lda: c_int, sva: *mut c_float,
                               mv: c_int, v: *mut c_float, ldv: c_int, work: *mut c_float,
                               lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dgesvj_work(matrix_layout: c_int, joba: c_char, jobu: c_char, jobv: c_char,
                               m: c_int, n: c_int, a: *mut c_double, lda: c_int,
                               sva: *mut c_double, mv: c_int, v: *mut c_double, ldv: c_int,
                               work: *mut c_double, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_cgesvj_work(matrix_layout: c_int, joba: c_char, jobu: c_char, jobv: c_char,
                               m: c_int, n: c_int, a: *mut c_float_complex, lda: c_int,
                               sva: *mut c_float, mv: c_int, v: *mut c_float_complex, ldv: c_int,
                               cwork: *mut c_float_complex, lwork: c_int, rwork: *mut c_float,
                               lrwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zgesvj_work(matrix_layout: c_int, joba: c_char, jobu: c_char, jobv: c_char,
                               m: c_int, n: c_int, a: *mut c_double_complex, lda: c_int,
                               sva: *mut c_double, mv: c_int, v: *mut c_double_complex, ldv: c_int,
                               cwork: *mut c_double_complex, lwork: c_int, rwork: *mut c_double,
                               lrwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sgesvx_work(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int,
                               nrhs: c_int, a: *mut c_float, lda: c_int, af: *mut c_float,
                               ldaf: c_int, ipiv: *mut c_int, equed: *mut c_char, r: *mut c_float,
                               c: *mut c_float, b: *mut c_float, ldb: c_int, x: *mut c_float,
                               ldx: c_int, rcond: *mut c_float, ferr: *mut c_float,
                               berr: *mut c_float, work: *mut c_float, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dgesvx_work(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int,
                               nrhs: c_int, a: *mut c_double, lda: c_int, af: *mut c_double,
                               ldaf: c_int, ipiv: *mut c_int, equed: *mut c_char, r: *mut c_double,
                               c: *mut c_double, b: *mut c_double, ldb: c_int, x: *mut c_double,
                               ldx: c_int, rcond: *mut c_double, ferr: *mut c_double,
                               berr: *mut c_double, work: *mut c_double, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cgesvx_work(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int,
                               nrhs: c_int, a: *mut c_float_complex, lda: c_int,
                               af: *mut c_float_complex, ldaf: c_int, ipiv: *mut c_int,
                               equed: *mut c_char, r: *mut c_float, c: *mut c_float,
                               b: *mut c_float_complex, ldb: c_int, x: *mut c_float_complex,
                               ldx: c_int, rcond: *mut c_float, ferr: *mut c_float,
                               berr: *mut c_float, work: *mut c_float_complex, rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zgesvx_work(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int,
                               nrhs: c_int, a: *mut c_double_complex, lda: c_int,
                               af: *mut c_double_complex, ldaf: c_int, ipiv: *mut c_int,
                               equed: *mut c_char, r: *mut c_double, c: *mut c_double,
                               b: *mut c_double_complex, ldb: c_int, x: *mut c_double_complex,
                               ldx: c_int, rcond: *mut c_double, ferr: *mut c_double,
                               berr: *mut c_double, work: *mut c_double_complex,
                               rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sgesvxx_work(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int,
                                nrhs: c_int, a: *mut c_float, lda: c_int, af: *mut c_float,
                                ldaf: c_int, ipiv: *mut c_int, equed: *mut c_char, r: *mut c_float,
                                c: *mut c_float, b: *mut c_float, ldb: c_int, x: *mut c_float,
                                ldx: c_int, rcond: *mut c_float, rpvgrw: *mut c_float,
                                berr: *mut c_float, n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                                err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float,
                                work: *mut c_float, iwork: *mut c_int)
                                -> c_int;
    pub fn LAPACKE_dgesvxx_work(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int,
                                nrhs: c_int, a: *mut c_double, lda: c_int, af: *mut c_double,
                                ldaf: c_int, ipiv: *mut c_int, equed: *mut c_char,
                                r: *mut c_double, c: *mut c_double, b: *mut c_double, ldb: c_int,
                                x: *mut c_double, ldx: c_int, rcond: *mut c_double,
                                rpvgrw: *mut c_double, berr: *mut c_double, n_err_bnds: c_int,
                                err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                                nparams: c_int, params: *mut c_double, work: *mut c_double,
                                iwork: *mut c_int)
                                -> c_int;
    pub fn LAPACKE_cgesvxx_work(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int,
                                nrhs: c_int, a: *mut c_float_complex, lda: c_int,
                                af: *mut c_float_complex, ldaf: c_int, ipiv: *mut c_int,
                                equed: *mut c_char, r: *mut c_float, c: *mut c_float,
                                b: *mut c_float_complex, ldb: c_int, x: *mut c_float_complex,
                                ldx: c_int, rcond: *mut c_float, rpvgrw: *mut c_float,
                                berr: *mut c_float, n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                                err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float,
                                work: *mut c_float_complex, rwork: *mut c_float)
                                -> c_int;
    pub fn LAPACKE_zgesvxx_work(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int,
                                nrhs: c_int, a: *mut c_double_complex, lda: c_int,
                                af: *mut c_double_complex, ldaf: c_int, ipiv: *mut c_int,
                                equed: *mut c_char, r: *mut c_double, c: *mut c_double,
                                b: *mut c_double_complex, ldb: c_int, x: *mut c_double_complex,
                                ldx: c_int, rcond: *mut c_double, rpvgrw: *mut c_double,
                                berr: *mut c_double, n_err_bnds: c_int,
                                err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                                nparams: c_int, params: *mut c_double, work: *mut c_double_complex,
                                rwork: *mut c_double)
                                -> c_int;

    pub fn LAPACKE_sgetf2_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float,
                               lda: c_int, ipiv: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dgetf2_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double,
                               lda: c_int, ipiv: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cgetf2_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                               lda: c_int, ipiv: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zgetf2_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                               lda: c_int, ipiv: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_sgetrf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float,
                               lda: c_int, ipiv: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dgetrf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double,
                               lda: c_int, ipiv: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cgetrf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                               lda: c_int, ipiv: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zgetrf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                               lda: c_int, ipiv: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_sgetrf2_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float,
                                lda: c_int, ipiv: *mut c_int)
                                -> c_int;
    pub fn LAPACKE_dgetrf2_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double,
                                lda: c_int, ipiv: *mut c_int)
                                -> c_int;
    pub fn LAPACKE_cgetrf2_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                                lda: c_int, ipiv: *mut c_int)
                                -> c_int;
    pub fn LAPACKE_zgetrf2_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                                lda: c_int, ipiv: *mut c_int)
                                -> c_int;

    pub fn LAPACKE_sgetri_work(matrix_layout: c_int, n: c_int, a: *mut c_float, lda: c_int,
                               ipiv: *const c_int, work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dgetri_work(matrix_layout: c_int, n: c_int, a: *mut c_double, lda: c_int,
                               ipiv: *const c_int, work: *mut c_double, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_cgetri_work(matrix_layout: c_int, n: c_int, a: *mut c_float_complex, lda: c_int,
                               ipiv: *const c_int, work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zgetri_work(matrix_layout: c_int, n: c_int, a: *mut c_double_complex,
                               lda: c_int, ipiv: *const c_int, work: *mut c_double_complex,
                               lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sgetrs_work(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                               a: *const c_float, lda: c_int, ipiv: *const c_int, b: *mut c_float,
                               ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_dgetrs_work(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                               a: *const c_double, lda: c_int, ipiv: *const c_int,
                               b: *mut c_double, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_cgetrs_work(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                               a: *const c_float_complex, lda: c_int, ipiv: *const c_int,
                               b: *mut c_float_complex, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_zgetrs_work(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                               a: *const c_double_complex, lda: c_int, ipiv: *const c_int,
                               b: *mut c_double_complex, ldb: c_int)
                               -> c_int;

    pub fn LAPACKE_sggbak_work(matrix_layout: c_int, job: c_char, side: c_char, n: c_int,
                               ilo: c_int, ihi: c_int, lscale: *const c_float,
                               rscale: *const c_float, m: c_int, v: *mut c_float, ldv: c_int)
                               -> c_int;
    pub fn LAPACKE_dggbak_work(matrix_layout: c_int, job: c_char, side: c_char, n: c_int,
                               ilo: c_int, ihi: c_int, lscale: *const c_double,
                               rscale: *const c_double, m: c_int, v: *mut c_double, ldv: c_int)
                               -> c_int;
    pub fn LAPACKE_cggbak_work(matrix_layout: c_int, job: c_char, side: c_char, n: c_int,
                               ilo: c_int, ihi: c_int, lscale: *const c_float,
                               rscale: *const c_float, m: c_int, v: *mut c_float_complex,
                               ldv: c_int)
                               -> c_int;
    pub fn LAPACKE_zggbak_work(matrix_layout: c_int, job: c_char, side: c_char, n: c_int,
                               ilo: c_int, ihi: c_int, lscale: *const c_double,
                               rscale: *const c_double, m: c_int, v: *mut c_double_complex,
                               ldv: c_int)
                               -> c_int;

    pub fn LAPACKE_sggbal_work(matrix_layout: c_int, job: c_char, n: c_int, a: *mut c_float,
                               lda: c_int, b: *mut c_float, ldb: c_int, ilo: *mut c_int,
                               ihi: *mut c_int, lscale: *mut c_float, rscale: *mut c_float,
                               work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dggbal_work(matrix_layout: c_int, job: c_char, n: c_int, a: *mut c_double,
                               lda: c_int, b: *mut c_double, ldb: c_int, ilo: *mut c_int,
                               ihi: *mut c_int, lscale: *mut c_double, rscale: *mut c_double,
                               work: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_cggbal_work(matrix_layout: c_int, job: c_char, n: c_int,
                               a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex,
                               ldb: c_int, ilo: *mut c_int, ihi: *mut c_int, lscale: *mut c_float,
                               rscale: *mut c_float, work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zggbal_work(matrix_layout: c_int, job: c_char, n: c_int,
                               a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                               ldb: c_int, ilo: *mut c_int, ihi: *mut c_int, lscale: *mut c_double,
                               rscale: *mut c_double, work: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sgges_work(matrix_layout: c_int, jobvsl: c_char, jobvsr: c_char, sort: c_char,
                              selctg: LAPACK_S_SELECT3, n: c_int, a: *mut c_float, lda: c_int,
                              b: *mut c_float, ldb: c_int, sdim: *mut c_int, alphar: *mut c_float,
                              alphai: *mut c_float, beta: *mut c_float, vsl: *mut c_float,
                              ldvsl: c_int, vsr: *mut c_float, ldvsr: c_int, work: *mut c_float,
                              lwork: c_int, bwork: *mut c_int)
                              -> c_int;
    pub fn LAPACKE_dgges_work(matrix_layout: c_int, jobvsl: c_char, jobvsr: c_char, sort: c_char,
                              selctg: LAPACK_D_SELECT3, n: c_int, a: *mut c_double, lda: c_int,
                              b: *mut c_double, ldb: c_int, sdim: *mut c_int,
                              alphar: *mut c_double, alphai: *mut c_double, beta: *mut c_double,
                              vsl: *mut c_double, ldvsl: c_int, vsr: *mut c_double, ldvsr: c_int,
                              work: *mut c_double, lwork: c_int, bwork: *mut c_int)
                              -> c_int;
    pub fn LAPACKE_cgges_work(matrix_layout: c_int, jobvsl: c_char, jobvsr: c_char, sort: c_char,
                              selctg: LAPACK_C_SELECT2, n: c_int, a: *mut c_float_complex,
                              lda: c_int, b: *mut c_float_complex, ldb: c_int, sdim: *mut c_int,
                              alpha: *mut c_float_complex, beta: *mut c_float_complex,
                              vsl: *mut c_float_complex, ldvsl: c_int, vsr: *mut c_float_complex,
                              ldvsr: c_int, work: *mut c_float_complex, lwork: c_int,
                              rwork: *mut c_float, bwork: *mut c_int)
                              -> c_int;
    pub fn LAPACKE_zgges_work(matrix_layout: c_int, jobvsl: c_char, jobvsr: c_char, sort: c_char,
                              selctg: LAPACK_Z_SELECT2, n: c_int, a: *mut c_double_complex,
                              lda: c_int, b: *mut c_double_complex, ldb: c_int, sdim: *mut c_int,
                              alpha: *mut c_double_complex, beta: *mut c_double_complex,
                              vsl: *mut c_double_complex, ldvsl: c_int, vsr: *mut c_double_complex,
                              ldvsr: c_int, work: *mut c_double_complex, lwork: c_int,
                              rwork: *mut c_double, bwork: *mut c_int)
                              -> c_int;

    pub fn LAPACKE_sgges3_work(matrix_layout: c_int, jobvsl: c_char, jobvsr: c_char, sort: c_char,
                               selctg: LAPACK_S_SELECT3, n: c_int, a: *mut c_float, lda: c_int,
                               b: *mut c_float, ldb: c_int, sdim: *mut c_int, alphar: *mut c_float,
                               alphai: *mut c_float, beta: *mut c_float, vsl: *mut c_float,
                               ldvsl: c_int, vsr: *mut c_float, ldvsr: c_int, work: *mut c_float,
                               lwork: c_int, bwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dgges3_work(matrix_layout: c_int, jobvsl: c_char, jobvsr: c_char, sort: c_char,
                               selctg: LAPACK_D_SELECT3, n: c_int, a: *mut c_double, lda: c_int,
                               b: *mut c_double, ldb: c_int, sdim: *mut c_int,
                               alphar: *mut c_double, alphai: *mut c_double, beta: *mut c_double,
                               vsl: *mut c_double, ldvsl: c_int, vsr: *mut c_double, ldvsr: c_int,
                               work: *mut c_double, lwork: c_int, bwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cgges3_work(matrix_layout: c_int, jobvsl: c_char, jobvsr: c_char, sort: c_char,
                               selctg: LAPACK_C_SELECT2, n: c_int, a: *mut c_float_complex,
                               lda: c_int, b: *mut c_float_complex, ldb: c_int, sdim: *mut c_int,
                               alpha: *mut c_float_complex, beta: *mut c_float_complex,
                               vsl: *mut c_float_complex, ldvsl: c_int, vsr: *mut c_float_complex,
                               ldvsr: c_int, work: *mut c_float_complex, lwork: c_int,
                               rwork: *mut c_float, bwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zgges3_work(matrix_layout: c_int, jobvsl: c_char, jobvsr: c_char, sort: c_char,
                               selctg: LAPACK_Z_SELECT2, n: c_int, a: *mut c_double_complex,
                               lda: c_int, b: *mut c_double_complex, ldb: c_int, sdim: *mut c_int,
                               alpha: *mut c_double_complex, beta: *mut c_double_complex,
                               vsl: *mut c_double_complex, ldvsl: c_int,
                               vsr: *mut c_double_complex, ldvsr: c_int,
                               work: *mut c_double_complex, lwork: c_int, rwork: *mut c_double,
                               bwork: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_sggesx_work(matrix_layout: c_int, jobvsl: c_char, jobvsr: c_char, sort: c_char,
                               selctg: LAPACK_S_SELECT3, sense: c_char, n: c_int, a: *mut c_float,
                               lda: c_int, b: *mut c_float, ldb: c_int, sdim: *mut c_int,
                               alphar: *mut c_float, alphai: *mut c_float, beta: *mut c_float,
                               vsl: *mut c_float, ldvsl: c_int, vsr: *mut c_float, ldvsr: c_int,
                               rconde: *mut c_float, rcondv: *mut c_float, work: *mut c_float,
                               lwork: c_int, iwork: *mut c_int, liwork: c_int, bwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dggesx_work(matrix_layout: c_int, jobvsl: c_char, jobvsr: c_char, sort: c_char,
                               selctg: LAPACK_D_SELECT3, sense: c_char, n: c_int, a: *mut c_double,
                               lda: c_int, b: *mut c_double, ldb: c_int, sdim: *mut c_int,
                               alphar: *mut c_double, alphai: *mut c_double, beta: *mut c_double,
                               vsl: *mut c_double, ldvsl: c_int, vsr: *mut c_double, ldvsr: c_int,
                               rconde: *mut c_double, rcondv: *mut c_double, work: *mut c_double,
                               lwork: c_int, iwork: *mut c_int, liwork: c_int, bwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cggesx_work(matrix_layout: c_int, jobvsl: c_char, jobvsr: c_char, sort: c_char,
                               selctg: LAPACK_C_SELECT2, sense: c_char, n: c_int,
                               a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex,
                               ldb: c_int, sdim: *mut c_int, alpha: *mut c_float_complex,
                               beta: *mut c_float_complex, vsl: *mut c_float_complex, ldvsl: c_int,
                               vsr: *mut c_float_complex, ldvsr: c_int, rconde: *mut c_float,
                               rcondv: *mut c_float, work: *mut c_float_complex, lwork: c_int,
                               rwork: *mut c_float, iwork: *mut c_int, liwork: c_int,
                               bwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zggesx_work(matrix_layout: c_int, jobvsl: c_char, jobvsr: c_char, sort: c_char,
                               selctg: LAPACK_Z_SELECT2, sense: c_char, n: c_int,
                               a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                               ldb: c_int, sdim: *mut c_int, alpha: *mut c_double_complex,
                               beta: *mut c_double_complex, vsl: *mut c_double_complex,
                               ldvsl: c_int, vsr: *mut c_double_complex, ldvsr: c_int,
                               rconde: *mut c_double, rcondv: *mut c_double,
                               work: *mut c_double_complex, lwork: c_int, rwork: *mut c_double,
                               iwork: *mut c_int, liwork: c_int, bwork: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_sggev_work(matrix_layout: c_int, jobvl: c_char, jobvr: c_char, n: c_int,
                              a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int,
                              alphar: *mut c_float, alphai: *mut c_float, beta: *mut c_float,
                              vl: *mut c_float, ldvl: c_int, vr: *mut c_float, ldvr: c_int,
                              work: *mut c_float, lwork: c_int)
                              -> c_int;
    pub fn LAPACKE_dggev_work(matrix_layout: c_int, jobvl: c_char, jobvr: c_char, n: c_int,
                              a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int,
                              alphar: *mut c_double, alphai: *mut c_double, beta: *mut c_double,
                              vl: *mut c_double, ldvl: c_int, vr: *mut c_double, ldvr: c_int,
                              work: *mut c_double, lwork: c_int)
                              -> c_int;
    pub fn LAPACKE_cggev_work(matrix_layout: c_int, jobvl: c_char, jobvr: c_char, n: c_int,
                              a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex,
                              ldb: c_int, alpha: *mut c_float_complex, beta: *mut c_float_complex,
                              vl: *mut c_float_complex, ldvl: c_int, vr: *mut c_float_complex,
                              ldvr: c_int, work: *mut c_float_complex, lwork: c_int,
                              rwork: *mut c_float)
                              -> c_int;
    pub fn LAPACKE_zggev_work(matrix_layout: c_int, jobvl: c_char, jobvr: c_char, n: c_int,
                              a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                              ldb: c_int, alpha: *mut c_double_complex,
                              beta: *mut c_double_complex, vl: *mut c_double_complex, ldvl: c_int,
                              vr: *mut c_double_complex, ldvr: c_int, work: *mut c_double_complex,
                              lwork: c_int, rwork: *mut c_double)
                              -> c_int;

    pub fn LAPACKE_sggev3_work(matrix_layout: c_int, jobvl: c_char, jobvr: c_char, n: c_int,
                               a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int,
                               alphar: *mut c_float, alphai: *mut c_float, beta: *mut c_float,
                               vl: *mut c_float, ldvl: c_int, vr: *mut c_float, ldvr: c_int,
                               work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dggev3_work(matrix_layout: c_int, jobvl: c_char, jobvr: c_char, n: c_int,
                               a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int,
                               alphar: *mut c_double, alphai: *mut c_double, beta: *mut c_double,
                               vl: *mut c_double, ldvl: c_int, vr: *mut c_double, ldvr: c_int,
                               work: *mut c_double, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_cggev3_work(matrix_layout: c_int, jobvl: c_char, jobvr: c_char, n: c_int,
                               a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex,
                               ldb: c_int, alpha: *mut c_float_complex, beta: *mut c_float_complex,
                               vl: *mut c_float_complex, ldvl: c_int, vr: *mut c_float_complex,
                               ldvr: c_int, work: *mut c_float_complex, lwork: c_int,
                               rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zggev3_work(matrix_layout: c_int, jobvl: c_char, jobvr: c_char, n: c_int,
                               a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                               ldb: c_int, alpha: *mut c_double_complex,
                               beta: *mut c_double_complex, vl: *mut c_double_complex, ldvl: c_int,
                               vr: *mut c_double_complex, ldvr: c_int, work: *mut c_double_complex,
                               lwork: c_int, rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sggevx_work(matrix_layout: c_int, balanc: c_char, jobvl: c_char, jobvr: c_char,
                               sense: c_char, n: c_int, a: *mut c_float, lda: c_int,
                               b: *mut c_float, ldb: c_int, alphar: *mut c_float,
                               alphai: *mut c_float, beta: *mut c_float, vl: *mut c_float,
                               ldvl: c_int, vr: *mut c_float, ldvr: c_int, ilo: *mut c_int,
                               ihi: *mut c_int, lscale: *mut c_float, rscale: *mut c_float,
                               abnrm: *mut c_float, bbnrm: *mut c_float, rconde: *mut c_float,
                               rcondv: *mut c_float, work: *mut c_float, lwork: c_int,
                               iwork: *mut c_int, bwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dggevx_work(matrix_layout: c_int, balanc: c_char, jobvl: c_char, jobvr: c_char,
                               sense: c_char, n: c_int, a: *mut c_double, lda: c_int,
                               b: *mut c_double, ldb: c_int, alphar: *mut c_double,
                               alphai: *mut c_double, beta: *mut c_double, vl: *mut c_double,
                               ldvl: c_int, vr: *mut c_double, ldvr: c_int, ilo: *mut c_int,
                               ihi: *mut c_int, lscale: *mut c_double, rscale: *mut c_double,
                               abnrm: *mut c_double, bbnrm: *mut c_double, rconde: *mut c_double,
                               rcondv: *mut c_double, work: *mut c_double, lwork: c_int,
                               iwork: *mut c_int, bwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cggevx_work(matrix_layout: c_int, balanc: c_char, jobvl: c_char, jobvr: c_char,
                               sense: c_char, n: c_int, a: *mut c_float_complex, lda: c_int,
                               b: *mut c_float_complex, ldb: c_int, alpha: *mut c_float_complex,
                               beta: *mut c_float_complex, vl: *mut c_float_complex, ldvl: c_int,
                               vr: *mut c_float_complex, ldvr: c_int, ilo: *mut c_int,
                               ihi: *mut c_int, lscale: *mut c_float, rscale: *mut c_float,
                               abnrm: *mut c_float, bbnrm: *mut c_float, rconde: *mut c_float,
                               rcondv: *mut c_float, work: *mut c_float_complex, lwork: c_int,
                               rwork: *mut c_float, iwork: *mut c_int, bwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zggevx_work(matrix_layout: c_int, balanc: c_char, jobvl: c_char, jobvr: c_char,
                               sense: c_char, n: c_int, a: *mut c_double_complex, lda: c_int,
                               b: *mut c_double_complex, ldb: c_int, alpha: *mut c_double_complex,
                               beta: *mut c_double_complex, vl: *mut c_double_complex, ldvl: c_int,
                               vr: *mut c_double_complex, ldvr: c_int, ilo: *mut c_int,
                               ihi: *mut c_int, lscale: *mut c_double, rscale: *mut c_double,
                               abnrm: *mut c_double, bbnrm: *mut c_double, rconde: *mut c_double,
                               rcondv: *mut c_double, work: *mut c_double_complex, lwork: c_int,
                               rwork: *mut c_double, iwork: *mut c_int, bwork: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_sggglm_work(matrix_layout: c_int, n: c_int, m: c_int, p: c_int, a: *mut c_float,
                               lda: c_int, b: *mut c_float, ldb: c_int, d: *mut c_float,
                               x: *mut c_float, y: *mut c_float, work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dggglm_work(matrix_layout: c_int, n: c_int, m: c_int, p: c_int,
                               a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int,
                               d: *mut c_double, x: *mut c_double, y: *mut c_double,
                               work: *mut c_double, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_cggglm_work(matrix_layout: c_int, n: c_int, m: c_int, p: c_int,
                               a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex,
                               ldb: c_int, d: *mut c_float_complex, x: *mut c_float_complex,
                               y: *mut c_float_complex, work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zggglm_work(matrix_layout: c_int, n: c_int, m: c_int, p: c_int,
                               a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                               ldb: c_int, d: *mut c_double_complex, x: *mut c_double_complex,
                               y: *mut c_double_complex, work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sgghrd_work(matrix_layout: c_int, compq: c_char, compz: c_char, n: c_int,
                               ilo: c_int, ihi: c_int, a: *mut c_float, lda: c_int,
                               b: *mut c_float, ldb: c_int, q: *mut c_float, ldq: c_int,
                               z: *mut c_float, ldz: c_int)
                               -> c_int;
    pub fn LAPACKE_dgghrd_work(matrix_layout: c_int, compq: c_char, compz: c_char, n: c_int,
                               ilo: c_int, ihi: c_int, a: *mut c_double, lda: c_int,
                               b: *mut c_double, ldb: c_int, q: *mut c_double, ldq: c_int,
                               z: *mut c_double, ldz: c_int)
                               -> c_int;
    pub fn LAPACKE_cgghrd_work(matrix_layout: c_int, compq: c_char, compz: c_char, n: c_int,
                               ilo: c_int, ihi: c_int, a: *mut c_float_complex, lda: c_int,
                               b: *mut c_float_complex, ldb: c_int, q: *mut c_float_complex,
                               ldq: c_int, z: *mut c_float_complex, ldz: c_int)
                               -> c_int;
    pub fn LAPACKE_zgghrd_work(matrix_layout: c_int, compq: c_char, compz: c_char, n: c_int,
                               ilo: c_int, ihi: c_int, a: *mut c_double_complex, lda: c_int,
                               b: *mut c_double_complex, ldb: c_int, q: *mut c_double_complex,
                               ldq: c_int, z: *mut c_double_complex, ldz: c_int)
                               -> c_int;

    pub fn LAPACKE_sgghd3_work(matrix_layout: c_int, compq: c_char, compz: c_char, n: c_int,
                               ilo: c_int, ihi: c_int, a: *mut c_float, lda: c_int,
                               b: *mut c_float, ldb: c_int, q: *mut c_float, ldq: c_int,
                               z: *mut c_float, ldz: c_int, work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dgghd3_work(matrix_layout: c_int, compq: c_char, compz: c_char, n: c_int,
                               ilo: c_int, ihi: c_int, a: *mut c_double, lda: c_int,
                               b: *mut c_double, ldb: c_int, q: *mut c_double, ldq: c_int,
                               z: *mut c_double, ldz: c_int, work: *mut c_double, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_cgghd3_work(matrix_layout: c_int, compq: c_char, compz: c_char, n: c_int,
                               ilo: c_int, ihi: c_int, a: *mut c_float_complex, lda: c_int,
                               b: *mut c_float_complex, ldb: c_int, q: *mut c_float_complex,
                               ldq: c_int, z: *mut c_float_complex, ldz: c_int,
                               work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zgghd3_work(matrix_layout: c_int, compq: c_char, compz: c_char, n: c_int,
                               ilo: c_int, ihi: c_int, a: *mut c_double_complex, lda: c_int,
                               b: *mut c_double_complex, ldb: c_int, q: *mut c_double_complex,
                               ldq: c_int, z: *mut c_double_complex, ldz: c_int,
                               work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sgglse_work(matrix_layout: c_int, m: c_int, n: c_int, p: c_int, a: *mut c_float,
                               lda: c_int, b: *mut c_float, ldb: c_int, c: *mut c_float,
                               d: *mut c_float, x: *mut c_float, work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dgglse_work(matrix_layout: c_int, m: c_int, n: c_int, p: c_int,
                               a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int,
                               c: *mut c_double, d: *mut c_double, x: *mut c_double,
                               work: *mut c_double, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_cgglse_work(matrix_layout: c_int, m: c_int, n: c_int, p: c_int,
                               a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex,
                               ldb: c_int, c: *mut c_float_complex, d: *mut c_float_complex,
                               x: *mut c_float_complex, work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zgglse_work(matrix_layout: c_int, m: c_int, n: c_int, p: c_int,
                               a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                               ldb: c_int, c: *mut c_double_complex, d: *mut c_double_complex,
                               x: *mut c_double_complex, work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sggqrf_work(matrix_layout: c_int, n: c_int, m: c_int, p: c_int, a: *mut c_float,
                               lda: c_int, taua: *mut c_float, b: *mut c_float, ldb: c_int,
                               taub: *mut c_float, work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dggqrf_work(matrix_layout: c_int, n: c_int, m: c_int, p: c_int,
                               a: *mut c_double, lda: c_int, taua: *mut c_double, b: *mut c_double,
                               ldb: c_int, taub: *mut c_double, work: *mut c_double, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_cggqrf_work(matrix_layout: c_int, n: c_int, m: c_int, p: c_int,
                               a: *mut c_float_complex, lda: c_int, taua: *mut c_float_complex,
                               b: *mut c_float_complex, ldb: c_int, taub: *mut c_float_complex,
                               work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zggqrf_work(matrix_layout: c_int, n: c_int, m: c_int, p: c_int,
                               a: *mut c_double_complex, lda: c_int, taua: *mut c_double_complex,
                               b: *mut c_double_complex, ldb: c_int, taub: *mut c_double_complex,
                               work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sggrqf_work(matrix_layout: c_int, m: c_int, p: c_int, n: c_int, a: *mut c_float,
                               lda: c_int, taua: *mut c_float, b: *mut c_float, ldb: c_int,
                               taub: *mut c_float, work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dggrqf_work(matrix_layout: c_int, m: c_int, p: c_int, n: c_int,
                               a: *mut c_double, lda: c_int, taua: *mut c_double, b: *mut c_double,
                               ldb: c_int, taub: *mut c_double, work: *mut c_double, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_cggrqf_work(matrix_layout: c_int, m: c_int, p: c_int, n: c_int,
                               a: *mut c_float_complex, lda: c_int, taua: *mut c_float_complex,
                               b: *mut c_float_complex, ldb: c_int, taub: *mut c_float_complex,
                               work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zggrqf_work(matrix_layout: c_int, m: c_int, p: c_int, n: c_int,
                               a: *mut c_double_complex, lda: c_int, taua: *mut c_double_complex,
                               b: *mut c_double_complex, ldb: c_int, taub: *mut c_double_complex,
                               work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sggsvd_work(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                               m: c_int, n: c_int, p: c_int, k: *mut c_int, l: *mut c_int,
                               a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int,
                               alpha: *mut c_float, beta: *mut c_float, u: *mut c_float,
                               ldu: c_int, v: *mut c_float, ldv: c_int, q: *mut c_float,
                               ldq: c_int, work: *mut c_float, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dggsvd_work(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                               m: c_int, n: c_int, p: c_int, k: *mut c_int, l: *mut c_int,
                               a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int,
                               alpha: *mut c_double, beta: *mut c_double, u: *mut c_double,
                               ldu: c_int, v: *mut c_double, ldv: c_int, q: *mut c_double,
                               ldq: c_int, work: *mut c_double, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cggsvd_work(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                               m: c_int, n: c_int, p: c_int, k: *mut c_int, l: *mut c_int,
                               a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex,
                               ldb: c_int, alpha: *mut c_float, beta: *mut c_float,
                               u: *mut c_float_complex, ldu: c_int, v: *mut c_float_complex,
                               ldv: c_int, q: *mut c_float_complex, ldq: c_int,
                               work: *mut c_float_complex, rwork: *mut c_float, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zggsvd_work(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                               m: c_int, n: c_int, p: c_int, k: *mut c_int, l: *mut c_int,
                               a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                               ldb: c_int, alpha: *mut c_double, beta: *mut c_double,
                               u: *mut c_double_complex, ldu: c_int, v: *mut c_double_complex,
                               ldv: c_int, q: *mut c_double_complex, ldq: c_int,
                               work: *mut c_double_complex, rwork: *mut c_double,
                               iwork: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_sggsvd3_work(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                                m: c_int, n: c_int, p: c_int, k: *mut c_int, l: *mut c_int,
                                a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int,
                                alpha: *mut c_float, beta: *mut c_float, u: *mut c_float,
                                ldu: c_int, v: *mut c_float, ldv: c_int, q: *mut c_float,
                                ldq: c_int, work: *mut c_float, lwork: c_int, iwork: *mut c_int)
                                -> c_int;
    pub fn LAPACKE_dggsvd3_work(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                                m: c_int, n: c_int, p: c_int, k: *mut c_int, l: *mut c_int,
                                a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int,
                                alpha: *mut c_double, beta: *mut c_double, u: *mut c_double,
                                ldu: c_int, v: *mut c_double, ldv: c_int, q: *mut c_double,
                                ldq: c_int, work: *mut c_double, lwork: c_int, iwork: *mut c_int)
                                -> c_int;
    pub fn LAPACKE_cggsvd3_work(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                                m: c_int, n: c_int, p: c_int, k: *mut c_int, l: *mut c_int,
                                a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex,
                                ldb: c_int, alpha: *mut c_float, beta: *mut c_float,
                                u: *mut c_float_complex, ldu: c_int, v: *mut c_float_complex,
                                ldv: c_int, q: *mut c_float_complex, ldq: c_int,
                                work: *mut c_float_complex, lwork: c_int, rwork: *mut c_float,
                                iwork: *mut c_int)
                                -> c_int;
    pub fn LAPACKE_zggsvd3_work(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                                m: c_int, n: c_int, p: c_int, k: *mut c_int, l: *mut c_int,
                                a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                                ldb: c_int, alpha: *mut c_double, beta: *mut c_double,
                                u: *mut c_double_complex, ldu: c_int, v: *mut c_double_complex,
                                ldv: c_int, q: *mut c_double_complex, ldq: c_int,
                                work: *mut c_double_complex, lwork: c_int, rwork: *mut c_double,
                                iwork: *mut c_int)
                                -> c_int;

    pub fn LAPACKE_sggsvp_work(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                               m: c_int, p: c_int, n: c_int, a: *mut c_float, lda: c_int,
                               b: *mut c_float, ldb: c_int, tola: c_float, tolb: c_float,
                               k: *mut c_int, l: *mut c_int, u: *mut c_float, ldu: c_int,
                               v: *mut c_float, ldv: c_int, q: *mut c_float, ldq: c_int,
                               iwork: *mut c_int, tau: *mut c_float, work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dggsvp_work(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                               m: c_int, p: c_int, n: c_int, a: *mut c_double, lda: c_int,
                               b: *mut c_double, ldb: c_int, tola: c_double, tolb: c_double,
                               k: *mut c_int, l: *mut c_int, u: *mut c_double, ldu: c_int,
                               v: *mut c_double, ldv: c_int, q: *mut c_double, ldq: c_int,
                               iwork: *mut c_int, tau: *mut c_double, work: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_cggsvp_work(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                               m: c_int, p: c_int, n: c_int, a: *mut c_float_complex, lda: c_int,
                               b: *mut c_float_complex, ldb: c_int, tola: c_float, tolb: c_float,
                               k: *mut c_int, l: *mut c_int, u: *mut c_float_complex, ldu: c_int,
                               v: *mut c_float_complex, ldv: c_int, q: *mut c_float_complex,
                               ldq: c_int, iwork: *mut c_int, rwork: *mut c_float,
                               tau: *mut c_float_complex, work: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zggsvp_work(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                               m: c_int, p: c_int, n: c_int, a: *mut c_double_complex, lda: c_int,
                               b: *mut c_double_complex, ldb: c_int, tola: c_double,
                               tolb: c_double, k: *mut c_int, l: *mut c_int,
                               u: *mut c_double_complex, ldu: c_int, v: *mut c_double_complex,
                               ldv: c_int, q: *mut c_double_complex, ldq: c_int, iwork: *mut c_int,
                               rwork: *mut c_double, tau: *mut c_double_complex,
                               work: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_sggsvp3_work(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                                m: c_int, p: c_int, n: c_int, a: *mut c_float, lda: c_int,
                                b: *mut c_float, ldb: c_int, tola: c_float, tolb: c_float,
                                k: *mut c_int, l: *mut c_int, u: *mut c_float, ldu: c_int,
                                v: *mut c_float, ldv: c_int, q: *mut c_float, ldq: c_int,
                                iwork: *mut c_int, tau: *mut c_float, work: *mut c_float,
                                lwork: c_int)
                                -> c_int;
    pub fn LAPACKE_dggsvp3_work(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                                m: c_int, p: c_int, n: c_int, a: *mut c_double, lda: c_int,
                                b: *mut c_double, ldb: c_int, tola: c_double, tolb: c_double,
                                k: *mut c_int, l: *mut c_int, u: *mut c_double, ldu: c_int,
                                v: *mut c_double, ldv: c_int, q: *mut c_double, ldq: c_int,
                                iwork: *mut c_int, tau: *mut c_double, work: *mut c_double,
                                lwork: c_int)
                                -> c_int;
    pub fn LAPACKE_cggsvp3_work(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                                m: c_int, p: c_int, n: c_int, a: *mut c_float_complex, lda: c_int,
                                b: *mut c_float_complex, ldb: c_int, tola: c_float, tolb: c_float,
                                k: *mut c_int, l: *mut c_int, u: *mut c_float_complex, ldu: c_int,
                                v: *mut c_float_complex, ldv: c_int, q: *mut c_float_complex,
                                ldq: c_int, iwork: *mut c_int, rwork: *mut c_float,
                                tau: *mut c_float_complex, work: *mut c_float_complex,
                                lwork: c_int)
                                -> c_int;
    pub fn LAPACKE_zggsvp3_work(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                                m: c_int, p: c_int, n: c_int, a: *mut c_double_complex, lda: c_int,
                                b: *mut c_double_complex, ldb: c_int, tola: c_double,
                                tolb: c_double, k: *mut c_int, l: *mut c_int,
                                u: *mut c_double_complex, ldu: c_int, v: *mut c_double_complex,
                                ldv: c_int, q: *mut c_double_complex, ldq: c_int,
                                iwork: *mut c_int, rwork: *mut c_double,
                                tau: *mut c_double_complex, work: *mut c_double_complex,
                                lwork: c_int)
                                -> c_int;

    pub fn LAPACKE_sgtcon_work(norm: c_char, n: c_int, dl: *const c_float, d: *const c_float,
                               du: *const c_float, du2: *const c_float, ipiv: *const c_int,
                               anorm: c_float, rcond: *mut c_float, work: *mut c_float,
                               iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dgtcon_work(norm: c_char, n: c_int, dl: *const c_double, d: *const c_double,
                               du: *const c_double, du2: *const c_double, ipiv: *const c_int,
                               anorm: c_double, rcond: *mut c_double, work: *mut c_double,
                               iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cgtcon_work(norm: c_char, n: c_int, dl: *const c_float_complex,
                               d: *const c_float_complex, du: *const c_float_complex,
                               du2: *const c_float_complex, ipiv: *const c_int, anorm: c_float,
                               rcond: *mut c_float, work: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zgtcon_work(norm: c_char, n: c_int, dl: *const c_double_complex,
                               d: *const c_double_complex, du: *const c_double_complex,
                               du2: *const c_double_complex, ipiv: *const c_int, anorm: c_double,
                               rcond: *mut c_double, work: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_sgtrfs_work(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                               dl: *const c_float, d: *const c_float, du: *const c_float,
                               dlf: *const c_float, df: *const c_float, duf: *const c_float,
                               du2: *const c_float, ipiv: *const c_int, b: *const c_float,
                               ldb: c_int, x: *mut c_float, ldx: c_int, ferr: *mut c_float,
                               berr: *mut c_float, work: *mut c_float, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dgtrfs_work(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                               dl: *const c_double, d: *const c_double, du: *const c_double,
                               dlf: *const c_double, df: *const c_double, duf: *const c_double,
                               du2: *const c_double, ipiv: *const c_int, b: *const c_double,
                               ldb: c_int, x: *mut c_double, ldx: c_int, ferr: *mut c_double,
                               berr: *mut c_double, work: *mut c_double, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cgtrfs_work(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                               dl: *const c_float_complex, d: *const c_float_complex,
                               du: *const c_float_complex, dlf: *const c_float_complex,
                               df: *const c_float_complex, duf: *const c_float_complex,
                               du2: *const c_float_complex, ipiv: *const c_int,
                               b: *const c_float_complex, ldb: c_int, x: *mut c_float_complex,
                               ldx: c_int, ferr: *mut c_float, berr: *mut c_float,
                               work: *mut c_float_complex, rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zgtrfs_work(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                               dl: *const c_double_complex, d: *const c_double_complex,
                               du: *const c_double_complex, dlf: *const c_double_complex,
                               df: *const c_double_complex, duf: *const c_double_complex,
                               du2: *const c_double_complex, ipiv: *const c_int,
                               b: *const c_double_complex, ldb: c_int, x: *mut c_double_complex,
                               ldx: c_int, ferr: *mut c_double, berr: *mut c_double,
                               work: *mut c_double_complex, rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sgtsv_work(matrix_layout: c_int, n: c_int, nrhs: c_int, dl: *mut c_float,
                              d: *mut c_float, du: *mut c_float, b: *mut c_float, ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_dgtsv_work(matrix_layout: c_int, n: c_int, nrhs: c_int, dl: *mut c_double,
                              d: *mut c_double, du: *mut c_double, b: *mut c_double, ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_cgtsv_work(matrix_layout: c_int, n: c_int, nrhs: c_int,
                              dl: *mut c_float_complex, d: *mut c_float_complex,
                              du: *mut c_float_complex, b: *mut c_float_complex, ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_zgtsv_work(matrix_layout: c_int, n: c_int, nrhs: c_int,
                              dl: *mut c_double_complex, d: *mut c_double_complex,
                              du: *mut c_double_complex, b: *mut c_double_complex, ldb: c_int)
                              -> c_int;

    pub fn LAPACKE_sgtsvx_work(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int,
                               nrhs: c_int, dl: *const c_float, d: *const c_float,
                               du: *const c_float, dlf: *mut c_float, df: *mut c_float,
                               duf: *mut c_float, du2: *mut c_float, ipiv: *mut c_int,
                               b: *const c_float, ldb: c_int, x: *mut c_float, ldx: c_int,
                               rcond: *mut c_float, ferr: *mut c_float, berr: *mut c_float,
                               work: *mut c_float, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dgtsvx_work(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int,
                               nrhs: c_int, dl: *const c_double, d: *const c_double,
                               du: *const c_double, dlf: *mut c_double, df: *mut c_double,
                               duf: *mut c_double, du2: *mut c_double, ipiv: *mut c_int,
                               b: *const c_double, ldb: c_int, x: *mut c_double, ldx: c_int,
                               rcond: *mut c_double, ferr: *mut c_double, berr: *mut c_double,
                               work: *mut c_double, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cgtsvx_work(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int,
                               nrhs: c_int, dl: *const c_float_complex, d: *const c_float_complex,
                               du: *const c_float_complex, dlf: *mut c_float_complex,
                               df: *mut c_float_complex, duf: *mut c_float_complex,
                               du2: *mut c_float_complex, ipiv: *mut c_int,
                               b: *const c_float_complex, ldb: c_int, x: *mut c_float_complex,
                               ldx: c_int, rcond: *mut c_float, ferr: *mut c_float,
                               berr: *mut c_float, work: *mut c_float_complex, rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zgtsvx_work(matrix_layout: c_int, fact: c_char, trans: c_char, n: c_int,
                               nrhs: c_int, dl: *const c_double_complex,
                               d: *const c_double_complex, du: *const c_double_complex,
                               dlf: *mut c_double_complex, df: *mut c_double_complex,
                               duf: *mut c_double_complex, du2: *mut c_double_complex,
                               ipiv: *mut c_int, b: *const c_double_complex, ldb: c_int,
                               x: *mut c_double_complex, ldx: c_int, rcond: *mut c_double,
                               ferr: *mut c_double, berr: *mut c_double,
                               work: *mut c_double_complex, rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sgttrf_work(n: c_int, dl: *mut c_float, d: *mut c_float, du: *mut c_float,
                               du2: *mut c_float, ipiv: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dgttrf_work(n: c_int, dl: *mut c_double, d: *mut c_double, du: *mut c_double,
                               du2: *mut c_double, ipiv: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cgttrf_work(n: c_int, dl: *mut c_float_complex, d: *mut c_float_complex,
                               du: *mut c_float_complex, du2: *mut c_float_complex,
                               ipiv: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zgttrf_work(n: c_int, dl: *mut c_double_complex, d: *mut c_double_complex,
                               du: *mut c_double_complex, du2: *mut c_double_complex,
                               ipiv: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_sgttrs_work(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                               dl: *const c_float, d: *const c_float, du: *const c_float,
                               du2: *const c_float, ipiv: *const c_int, b: *mut c_float,
                               ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_dgttrs_work(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                               dl: *const c_double, d: *const c_double, du: *const c_double,
                               du2: *const c_double, ipiv: *const c_int, b: *mut c_double,
                               ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_cgttrs_work(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                               dl: *const c_float_complex, d: *const c_float_complex,
                               du: *const c_float_complex, du2: *const c_float_complex,
                               ipiv: *const c_int, b: *mut c_float_complex, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_zgttrs_work(matrix_layout: c_int, trans: c_char, n: c_int, nrhs: c_int,
                               dl: *const c_double_complex, d: *const c_double_complex,
                               du: *const c_double_complex, du2: *const c_double_complex,
                               ipiv: *const c_int, b: *mut c_double_complex, ldb: c_int)
                               -> c_int;

    pub fn LAPACKE_chbev_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                              kd: c_int, ab: *mut c_float_complex, ldab: c_int, w: *mut c_float,
                              z: *mut c_float_complex, ldz: c_int, work: *mut c_float_complex,
                              rwork: *mut c_float)
                              -> c_int;
    pub fn LAPACKE_zhbev_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                              kd: c_int, ab: *mut c_double_complex, ldab: c_int, w: *mut c_double,
                              z: *mut c_double_complex, ldz: c_int, work: *mut c_double_complex,
                              rwork: *mut c_double)
                              -> c_int;

    pub fn LAPACKE_chbevd_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                               kd: c_int, ab: *mut c_float_complex, ldab: c_int, w: *mut c_float,
                               z: *mut c_float_complex, ldz: c_int, work: *mut c_float_complex,
                               lwork: c_int, rwork: *mut c_float, lrwork: c_int, iwork: *mut c_int,
                               liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zhbevd_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                               kd: c_int, ab: *mut c_double_complex, ldab: c_int, w: *mut c_double,
                               z: *mut c_double_complex, ldz: c_int, work: *mut c_double_complex,
                               lwork: c_int, rwork: *mut c_double, lrwork: c_int,
                               iwork: *mut c_int, liwork: c_int)
                               -> c_int;

    pub fn LAPACKE_chbevx_work(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                               n: c_int, kd: c_int, ab: *mut c_float_complex, ldab: c_int,
                               q: *mut c_float_complex, ldq: c_int, vl: c_float, vu: c_float,
                               il: c_int, iu: c_int, abstol: c_float, m: *mut c_int,
                               w: *mut c_float, z: *mut c_float_complex, ldz: c_int,
                               work: *mut c_float_complex, rwork: *mut c_float, iwork: *mut c_int,
                               ifail: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zhbevx_work(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                               n: c_int, kd: c_int, ab: *mut c_double_complex, ldab: c_int,
                               q: *mut c_double_complex, ldq: c_int, vl: c_double, vu: c_double,
                               il: c_int, iu: c_int, abstol: c_double, m: *mut c_int,
                               w: *mut c_double, z: *mut c_double_complex, ldz: c_int,
                               work: *mut c_double_complex, rwork: *mut c_double,
                               iwork: *mut c_int, ifail: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_chbgst_work(matrix_layout: c_int, vect: c_char, uplo: c_char, n: c_int,
                               ka: c_int, kb: c_int, ab: *mut c_float_complex, ldab: c_int,
                               bb: *const c_float_complex, ldbb: c_int, x: *mut c_float_complex,
                               ldx: c_int, work: *mut c_float_complex, rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zhbgst_work(matrix_layout: c_int, vect: c_char, uplo: c_char, n: c_int,
                               ka: c_int, kb: c_int, ab: *mut c_double_complex, ldab: c_int,
                               bb: *const c_double_complex, ldbb: c_int, x: *mut c_double_complex,
                               ldx: c_int, work: *mut c_double_complex, rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_chbgv_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                              ka: c_int, kb: c_int, ab: *mut c_float_complex, ldab: c_int,
                              bb: *mut c_float_complex, ldbb: c_int, w: *mut c_float,
                              z: *mut c_float_complex, ldz: c_int, work: *mut c_float_complex,
                              rwork: *mut c_float)
                              -> c_int;
    pub fn LAPACKE_zhbgv_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                              ka: c_int, kb: c_int, ab: *mut c_double_complex, ldab: c_int,
                              bb: *mut c_double_complex, ldbb: c_int, w: *mut c_double,
                              z: *mut c_double_complex, ldz: c_int, work: *mut c_double_complex,
                              rwork: *mut c_double)
                              -> c_int;

    pub fn LAPACKE_chbgvd_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                               ka: c_int, kb: c_int, ab: *mut c_float_complex, ldab: c_int,
                               bb: *mut c_float_complex, ldbb: c_int, w: *mut c_float,
                               z: *mut c_float_complex, ldz: c_int, work: *mut c_float_complex,
                               lwork: c_int, rwork: *mut c_float, lrwork: c_int, iwork: *mut c_int,
                               liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zhbgvd_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                               ka: c_int, kb: c_int, ab: *mut c_double_complex, ldab: c_int,
                               bb: *mut c_double_complex, ldbb: c_int, w: *mut c_double,
                               z: *mut c_double_complex, ldz: c_int, work: *mut c_double_complex,
                               lwork: c_int, rwork: *mut c_double, lrwork: c_int,
                               iwork: *mut c_int, liwork: c_int)
                               -> c_int;

    pub fn LAPACKE_chbgvx_work(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                               n: c_int, ka: c_int, kb: c_int, ab: *mut c_float_complex,
                               ldab: c_int, bb: *mut c_float_complex, ldbb: c_int,
                               q: *mut c_float_complex, ldq: c_int, vl: c_float, vu: c_float,
                               il: c_int, iu: c_int, abstol: c_float, m: *mut c_int,
                               w: *mut c_float, z: *mut c_float_complex, ldz: c_int,
                               work: *mut c_float_complex, rwork: *mut c_float, iwork: *mut c_int,
                               ifail: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zhbgvx_work(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                               n: c_int, ka: c_int, kb: c_int, ab: *mut c_double_complex,
                               ldab: c_int, bb: *mut c_double_complex, ldbb: c_int,
                               q: *mut c_double_complex, ldq: c_int, vl: c_double, vu: c_double,
                               il: c_int, iu: c_int, abstol: c_double, m: *mut c_int,
                               w: *mut c_double, z: *mut c_double_complex, ldz: c_int,
                               work: *mut c_double_complex, rwork: *mut c_double,
                               iwork: *mut c_int, ifail: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_chbtrd_work(matrix_layout: c_int, vect: c_char, uplo: c_char, n: c_int,
                               kd: c_int, ab: *mut c_float_complex, ldab: c_int, d: *mut c_float,
                               e: *mut c_float, q: *mut c_float_complex, ldq: c_int,
                               work: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zhbtrd_work(matrix_layout: c_int, vect: c_char, uplo: c_char, n: c_int,
                               kd: c_int, ab: *mut c_double_complex, ldab: c_int, d: *mut c_double,
                               e: *mut c_double, q: *mut c_double_complex, ldq: c_int,
                               work: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_checon_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *const c_float_complex, lda: c_int, ipiv: *const c_int,
                               anorm: c_float, rcond: *mut c_float, work: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zhecon_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *const c_double_complex, lda: c_int, ipiv: *const c_int,
                               anorm: c_double, rcond: *mut c_double, work: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_cheequb_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                                a: *const c_float_complex, lda: c_int, s: *mut c_float,
                                scond: *mut c_float, amax: *mut c_float,
                                work: *mut c_float_complex)
                                -> c_int;
    pub fn LAPACKE_zheequb_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                                a: *const c_double_complex, lda: c_int, s: *mut c_double,
                                scond: *mut c_double, amax: *mut c_double,
                                work: *mut c_double_complex)
                                -> c_int;

    pub fn LAPACKE_cheev_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                              a: *mut c_float_complex, lda: c_int, w: *mut c_float,
                              work: *mut c_float_complex, lwork: c_int, rwork: *mut c_float)
                              -> c_int;
    pub fn LAPACKE_zheev_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                              a: *mut c_double_complex, lda: c_int, w: *mut c_double,
                              work: *mut c_double_complex, lwork: c_int, rwork: *mut c_double)
                              -> c_int;

    pub fn LAPACKE_cheevd_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                               a: *mut c_float_complex, lda: c_int, w: *mut c_float,
                               work: *mut c_float_complex, lwork: c_int, rwork: *mut c_float,
                               lrwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zheevd_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                               a: *mut c_double_complex, lda: c_int, w: *mut c_double,
                               work: *mut c_double_complex, lwork: c_int, rwork: *mut c_double,
                               lrwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;

    pub fn LAPACKE_cheevr_work(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                               n: c_int, a: *mut c_float_complex, lda: c_int, vl: c_float,
                               vu: c_float, il: c_int, iu: c_int, abstol: c_float, m: *mut c_int,
                               w: *mut c_float, z: *mut c_float_complex, ldz: c_int,
                               isuppz: *mut c_int, work: *mut c_float_complex, lwork: c_int,
                               rwork: *mut c_float, lrwork: c_int, iwork: *mut c_int,
                               liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zheevr_work(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                               n: c_int, a: *mut c_double_complex, lda: c_int, vl: c_double,
                               vu: c_double, il: c_int, iu: c_int, abstol: c_double, m: *mut c_int,
                               w: *mut c_double, z: *mut c_double_complex, ldz: c_int,
                               isuppz: *mut c_int, work: *mut c_double_complex, lwork: c_int,
                               rwork: *mut c_double, lrwork: c_int, iwork: *mut c_int,
                               liwork: c_int)
                               -> c_int;

    pub fn LAPACKE_cheevx_work(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                               n: c_int, a: *mut c_float_complex, lda: c_int, vl: c_float,
                               vu: c_float, il: c_int, iu: c_int, abstol: c_float, m: *mut c_int,
                               w: *mut c_float, z: *mut c_float_complex, ldz: c_int,
                               work: *mut c_float_complex, lwork: c_int, rwork: *mut c_float,
                               iwork: *mut c_int, ifail: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zheevx_work(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                               n: c_int, a: *mut c_double_complex, lda: c_int, vl: c_double,
                               vu: c_double, il: c_int, iu: c_int, abstol: c_double, m: *mut c_int,
                               w: *mut c_double, z: *mut c_double_complex, ldz: c_int,
                               work: *mut c_double_complex, lwork: c_int, rwork: *mut c_double,
                               iwork: *mut c_int, ifail: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_chegst_work(matrix_layout: c_int, itype: c_int, uplo: c_char, n: c_int,
                               a: *mut c_float_complex, lda: c_int, b: *const c_float_complex,
                               ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_zhegst_work(matrix_layout: c_int, itype: c_int, uplo: c_char, n: c_int,
                               a: *mut c_double_complex, lda: c_int, b: *const c_double_complex,
                               ldb: c_int)
                               -> c_int;

    pub fn LAPACKE_chegv_work(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char,
                              n: c_int, a: *mut c_float_complex, lda: c_int,
                              b: *mut c_float_complex, ldb: c_int, w: *mut c_float,
                              work: *mut c_float_complex, lwork: c_int, rwork: *mut c_float)
                              -> c_int;
    pub fn LAPACKE_zhegv_work(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char,
                              n: c_int, a: *mut c_double_complex, lda: c_int,
                              b: *mut c_double_complex, ldb: c_int, w: *mut c_double,
                              work: *mut c_double_complex, lwork: c_int, rwork: *mut c_double)
                              -> c_int;

    pub fn LAPACKE_chegvd_work(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char,
                               n: c_int, a: *mut c_float_complex, lda: c_int,
                               b: *mut c_float_complex, ldb: c_int, w: *mut c_float,
                               work: *mut c_float_complex, lwork: c_int, rwork: *mut c_float,
                               lrwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zhegvd_work(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char,
                               n: c_int, a: *mut c_double_complex, lda: c_int,
                               b: *mut c_double_complex, ldb: c_int, w: *mut c_double,
                               work: *mut c_double_complex, lwork: c_int, rwork: *mut c_double,
                               lrwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;

    pub fn LAPACKE_chegvx_work(matrix_layout: c_int, itype: c_int, jobz: c_char, range: c_char,
                               uplo: c_char, n: c_int, a: *mut c_float_complex, lda: c_int,
                               b: *mut c_float_complex, ldb: c_int, vl: c_float, vu: c_float,
                               il: c_int, iu: c_int, abstol: c_float, m: *mut c_int,
                               w: *mut c_float, z: *mut c_float_complex, ldz: c_int,
                               work: *mut c_float_complex, lwork: c_int, rwork: *mut c_float,
                               iwork: *mut c_int, ifail: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zhegvx_work(matrix_layout: c_int, itype: c_int, jobz: c_char, range: c_char,
                               uplo: c_char, n: c_int, a: *mut c_double_complex, lda: c_int,
                               b: *mut c_double_complex, ldb: c_int, vl: c_double, vu: c_double,
                               il: c_int, iu: c_int, abstol: c_double, m: *mut c_int,
                               w: *mut c_double, z: *mut c_double_complex, ldz: c_int,
                               work: *mut c_double_complex, lwork: c_int, rwork: *mut c_double,
                               iwork: *mut c_int, ifail: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_cherfs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *const c_float_complex, lda: c_int, af: *const c_float_complex,
                               ldaf: c_int, ipiv: *const c_int, b: *const c_float_complex,
                               ldb: c_int, x: *mut c_float_complex, ldx: c_int, ferr: *mut c_float,
                               berr: *mut c_float, work: *mut c_float_complex, rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zherfs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *const c_double_complex, lda: c_int, af: *const c_double_complex,
                               ldaf: c_int, ipiv: *const c_int, b: *const c_double_complex,
                               ldb: c_int, x: *mut c_double_complex, ldx: c_int,
                               ferr: *mut c_double, berr: *mut c_double,
                               work: *mut c_double_complex, rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_cherfsx_work(matrix_layout: c_int, uplo: c_char, equed: c_char, n: c_int,
                                nrhs: c_int, a: *const c_float_complex, lda: c_int,
                                af: *const c_float_complex, ldaf: c_int, ipiv: *const c_int,
                                s: *const c_float, b: *const c_float_complex, ldb: c_int,
                                x: *mut c_float_complex, ldx: c_int, rcond: *mut c_float,
                                berr: *mut c_float, n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                                err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float,
                                work: *mut c_float_complex, rwork: *mut c_float)
                                -> c_int;
    pub fn LAPACKE_zherfsx_work(matrix_layout: c_int, uplo: c_char, equed: c_char, n: c_int,
                                nrhs: c_int, a: *const c_double_complex, lda: c_int,
                                af: *const c_double_complex, ldaf: c_int, ipiv: *const c_int,
                                s: *const c_double, b: *const c_double_complex, ldb: c_int,
                                x: *mut c_double_complex, ldx: c_int, rcond: *mut c_double,
                                berr: *mut c_double, n_err_bnds: c_int,
                                err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                                nparams: c_int, params: *mut c_double, work: *mut c_double_complex,
                                rwork: *mut c_double)
                                -> c_int;

    pub fn LAPACKE_chesv_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                              a: *mut c_float_complex, lda: c_int, ipiv: *mut c_int,
                              b: *mut c_float_complex, ldb: c_int, work: *mut c_float_complex,
                              lwork: c_int)
                              -> c_int;
    pub fn LAPACKE_zhesv_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                              a: *mut c_double_complex, lda: c_int, ipiv: *mut c_int,
                              b: *mut c_double_complex, ldb: c_int, work: *mut c_double_complex,
                              lwork: c_int)
                              -> c_int;

    pub fn LAPACKE_chesvx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                               nrhs: c_int, a: *const c_float_complex, lda: c_int,
                               af: *mut c_float_complex, ldaf: c_int, ipiv: *mut c_int,
                               b: *const c_float_complex, ldb: c_int, x: *mut c_float_complex,
                               ldx: c_int, rcond: *mut c_float, ferr: *mut c_float,
                               berr: *mut c_float, work: *mut c_float_complex, lwork: c_int,
                               rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zhesvx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                               nrhs: c_int, a: *const c_double_complex, lda: c_int,
                               af: *mut c_double_complex, ldaf: c_int, ipiv: *mut c_int,
                               b: *const c_double_complex, ldb: c_int, x: *mut c_double_complex,
                               ldx: c_int, rcond: *mut c_double, ferr: *mut c_double,
                               berr: *mut c_double, work: *mut c_double_complex, lwork: c_int,
                               rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_chesvxx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                                nrhs: c_int, a: *mut c_float_complex, lda: c_int,
                                af: *mut c_float_complex, ldaf: c_int, ipiv: *mut c_int,
                                equed: *mut c_char, s: *mut c_float, b: *mut c_float_complex,
                                ldb: c_int, x: *mut c_float_complex, ldx: c_int,
                                rcond: *mut c_float, rpvgrw: *mut c_float, berr: *mut c_float,
                                n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                                err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float,
                                work: *mut c_float_complex, rwork: *mut c_float)
                                -> c_int;
    pub fn LAPACKE_zhesvxx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                                nrhs: c_int, a: *mut c_double_complex, lda: c_int,
                                af: *mut c_double_complex, ldaf: c_int, ipiv: *mut c_int,
                                equed: *mut c_char, s: *mut c_double, b: *mut c_double_complex,
                                ldb: c_int, x: *mut c_double_complex, ldx: c_int,
                                rcond: *mut c_double, rpvgrw: *mut c_double, berr: *mut c_double,
                                n_err_bnds: c_int, err_bnds_norm: *mut c_double,
                                err_bnds_comp: *mut c_double, nparams: c_int,
                                params: *mut c_double, work: *mut c_double_complex,
                                rwork: *mut c_double)
                                -> c_int;

    pub fn LAPACKE_chetrd_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *mut c_float_complex, lda: c_int, d: *mut c_float,
                               e: *mut c_float, tau: *mut c_float_complex,
                               work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zhetrd_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *mut c_double_complex, lda: c_int, d: *mut c_double,
                               e: *mut c_double, tau: *mut c_double_complex,
                               work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_chetrf_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *mut c_float_complex, lda: c_int, ipiv: *mut c_int,
                               work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zhetrf_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *mut c_double_complex, lda: c_int, ipiv: *mut c_int,
                               work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_chetri_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *mut c_float_complex, lda: c_int, ipiv: *const c_int,
                               work: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zhetri_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *mut c_double_complex, lda: c_int, ipiv: *const c_int,
                               work: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_chetrs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *const c_float_complex, lda: c_int, ipiv: *const c_int,
                               b: *mut c_float_complex, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_zhetrs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *const c_double_complex, lda: c_int, ipiv: *const c_int,
                               b: *mut c_double_complex, ldb: c_int)
                               -> c_int;

    pub fn LAPACKE_chfrk_work(matrix_layout: c_int, transr: c_char, uplo: c_char, trans: c_char,
                              n: c_int, k: c_int, alpha: c_float, a: *const c_float_complex,
                              lda: c_int, beta: c_float, c: *mut c_float_complex)
                              -> c_int;
    pub fn LAPACKE_zhfrk_work(matrix_layout: c_int, transr: c_char, uplo: c_char, trans: c_char,
                              n: c_int, k: c_int, alpha: c_double, a: *const c_double_complex,
                              lda: c_int, beta: c_double, c: *mut c_double_complex)
                              -> c_int;

    pub fn LAPACKE_shgeqz_work(matrix_layout: c_int, job: c_char, compq: c_char, compz: c_char,
                               n: c_int, ilo: c_int, ihi: c_int, h: *mut c_float, ldh: c_int,
                               t: *mut c_float, ldt: c_int, alphar: *mut c_float,
                               alphai: *mut c_float, beta: *mut c_float, q: *mut c_float,
                               ldq: c_int, z: *mut c_float, ldz: c_int, work: *mut c_float,
                               lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dhgeqz_work(matrix_layout: c_int, job: c_char, compq: c_char, compz: c_char,
                               n: c_int, ilo: c_int, ihi: c_int, h: *mut c_double, ldh: c_int,
                               t: *mut c_double, ldt: c_int, alphar: *mut c_double,
                               alphai: *mut c_double, beta: *mut c_double, q: *mut c_double,
                               ldq: c_int, z: *mut c_double, ldz: c_int, work: *mut c_double,
                               lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_chgeqz_work(matrix_layout: c_int, job: c_char, compq: c_char, compz: c_char,
                               n: c_int, ilo: c_int, ihi: c_int, h: *mut c_float_complex,
                               ldh: c_int, t: *mut c_float_complex, ldt: c_int,
                               alpha: *mut c_float_complex, beta: *mut c_float_complex,
                               q: *mut c_float_complex, ldq: c_int, z: *mut c_float_complex,
                               ldz: c_int, work: *mut c_float_complex, lwork: c_int,
                               rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zhgeqz_work(matrix_layout: c_int, job: c_char, compq: c_char, compz: c_char,
                               n: c_int, ilo: c_int, ihi: c_int, h: *mut c_double_complex,
                               ldh: c_int, t: *mut c_double_complex, ldt: c_int,
                               alpha: *mut c_double_complex, beta: *mut c_double_complex,
                               q: *mut c_double_complex, ldq: c_int, z: *mut c_double_complex,
                               ldz: c_int, work: *mut c_double_complex, lwork: c_int,
                               rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_chpcon_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               ap: *const c_float_complex, ipiv: *const c_int, anorm: c_float,
                               rcond: *mut c_float, work: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zhpcon_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               ap: *const c_double_complex, ipiv: *const c_int, anorm: c_double,
                               rcond: *mut c_double, work: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_chpev_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                              ap: *mut c_float_complex, w: *mut c_float, z: *mut c_float_complex,
                              ldz: c_int, work: *mut c_float_complex, rwork: *mut c_float)
                              -> c_int;
    pub fn LAPACKE_zhpev_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                              ap: *mut c_double_complex, w: *mut c_double,
                              z: *mut c_double_complex, ldz: c_int, work: *mut c_double_complex,
                              rwork: *mut c_double)
                              -> c_int;

    pub fn LAPACKE_chpevd_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                               ap: *mut c_float_complex, w: *mut c_float, z: *mut c_float_complex,
                               ldz: c_int, work: *mut c_float_complex, lwork: c_int,
                               rwork: *mut c_float, lrwork: c_int, iwork: *mut c_int,
                               liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zhpevd_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                               ap: *mut c_double_complex, w: *mut c_double,
                               z: *mut c_double_complex, ldz: c_int, work: *mut c_double_complex,
                               lwork: c_int, rwork: *mut c_double, lrwork: c_int,
                               iwork: *mut c_int, liwork: c_int)
                               -> c_int;

    pub fn LAPACKE_chpevx_work(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                               n: c_int, ap: *mut c_float_complex, vl: c_float, vu: c_float,
                               il: c_int, iu: c_int, abstol: c_float, m: *mut c_int,
                               w: *mut c_float, z: *mut c_float_complex, ldz: c_int,
                               work: *mut c_float_complex, rwork: *mut c_float, iwork: *mut c_int,
                               ifail: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zhpevx_work(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                               n: c_int, ap: *mut c_double_complex, vl: c_double, vu: c_double,
                               il: c_int, iu: c_int, abstol: c_double, m: *mut c_int,
                               w: *mut c_double, z: *mut c_double_complex, ldz: c_int,
                               work: *mut c_double_complex, rwork: *mut c_double,
                               iwork: *mut c_int, ifail: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_chpgst_work(matrix_layout: c_int, itype: c_int, uplo: c_char, n: c_int,
                               ap: *mut c_float_complex, bp: *const c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zhpgst_work(matrix_layout: c_int, itype: c_int, uplo: c_char, n: c_int,
                               ap: *mut c_double_complex, bp: *const c_double_complex)
                               -> c_int;

    pub fn LAPACKE_chpgv_work(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char,
                              n: c_int, ap: *mut c_float_complex, bp: *mut c_float_complex,
                              w: *mut c_float, z: *mut c_float_complex, ldz: c_int,
                              work: *mut c_float_complex, rwork: *mut c_float)
                              -> c_int;
    pub fn LAPACKE_zhpgv_work(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char,
                              n: c_int, ap: *mut c_double_complex, bp: *mut c_double_complex,
                              w: *mut c_double, z: *mut c_double_complex, ldz: c_int,
                              work: *mut c_double_complex, rwork: *mut c_double)
                              -> c_int;

    pub fn LAPACKE_chpgvd_work(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char,
                               n: c_int, ap: *mut c_float_complex, bp: *mut c_float_complex,
                               w: *mut c_float, z: *mut c_float_complex, ldz: c_int,
                               work: *mut c_float_complex, lwork: c_int, rwork: *mut c_float,
                               lrwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zhpgvd_work(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char,
                               n: c_int, ap: *mut c_double_complex, bp: *mut c_double_complex,
                               w: *mut c_double, z: *mut c_double_complex, ldz: c_int,
                               work: *mut c_double_complex, lwork: c_int, rwork: *mut c_double,
                               lrwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;

    pub fn LAPACKE_chpgvx_work(matrix_layout: c_int, itype: c_int, jobz: c_char, range: c_char,
                               uplo: c_char, n: c_int, ap: *mut c_float_complex,
                               bp: *mut c_float_complex, vl: c_float, vu: c_float, il: c_int,
                               iu: c_int, abstol: c_float, m: *mut c_int, w: *mut c_float,
                               z: *mut c_float_complex, ldz: c_int, work: *mut c_float_complex,
                               rwork: *mut c_float, iwork: *mut c_int, ifail: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zhpgvx_work(matrix_layout: c_int, itype: c_int, jobz: c_char, range: c_char,
                               uplo: c_char, n: c_int, ap: *mut c_double_complex,
                               bp: *mut c_double_complex, vl: c_double, vu: c_double, il: c_int,
                               iu: c_int, abstol: c_double, m: *mut c_int, w: *mut c_double,
                               z: *mut c_double_complex, ldz: c_int, work: *mut c_double_complex,
                               rwork: *mut c_double, iwork: *mut c_int, ifail: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_chprfs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               ap: *const c_float_complex, afp: *const c_float_complex,
                               ipiv: *const c_int, b: *const c_float_complex, ldb: c_int,
                               x: *mut c_float_complex, ldx: c_int, ferr: *mut c_float,
                               berr: *mut c_float, work: *mut c_float_complex, rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zhprfs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               ap: *const c_double_complex, afp: *const c_double_complex,
                               ipiv: *const c_int, b: *const c_double_complex, ldb: c_int,
                               x: *mut c_double_complex, ldx: c_int, ferr: *mut c_double,
                               berr: *mut c_double, work: *mut c_double_complex,
                               rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_chpsv_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                              ap: *mut c_float_complex, ipiv: *mut c_int, b: *mut c_float_complex,
                              ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_zhpsv_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                              ap: *mut c_double_complex, ipiv: *mut c_int,
                              b: *mut c_double_complex, ldb: c_int)
                              -> c_int;

    pub fn LAPACKE_chpsvx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                               nrhs: c_int, ap: *const c_float_complex, afp: *mut c_float_complex,
                               ipiv: *mut c_int, b: *const c_float_complex, ldb: c_int,
                               x: *mut c_float_complex, ldx: c_int, rcond: *mut c_float,
                               ferr: *mut c_float, berr: *mut c_float, work: *mut c_float_complex,
                               rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zhpsvx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                               nrhs: c_int, ap: *const c_double_complex,
                               afp: *mut c_double_complex, ipiv: *mut c_int,
                               b: *const c_double_complex, ldb: c_int, x: *mut c_double_complex,
                               ldx: c_int, rcond: *mut c_double, ferr: *mut c_double,
                               berr: *mut c_double, work: *mut c_double_complex,
                               rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_chptrd_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               ap: *mut c_float_complex, d: *mut c_float, e: *mut c_float,
                               tau: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zhptrd_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               ap: *mut c_double_complex, d: *mut c_double, e: *mut c_double,
                               tau: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_chptrf_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               ap: *mut c_float_complex, ipiv: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zhptrf_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               ap: *mut c_double_complex, ipiv: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_chptri_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               ap: *mut c_float_complex, ipiv: *const c_int,
                               work: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zhptri_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               ap: *mut c_double_complex, ipiv: *const c_int,
                               work: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_chptrs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               ap: *const c_float_complex, ipiv: *const c_int,
                               b: *mut c_float_complex, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_zhptrs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               ap: *const c_double_complex, ipiv: *const c_int,
                               b: *mut c_double_complex, ldb: c_int)
                               -> c_int;

    pub fn LAPACKE_shsein_work(matrix_layout: c_int, job: c_char, eigsrc: c_char, initv: c_char,
                               select: *mut c_int, n: c_int, h: *const c_float, ldh: c_int,
                               wr: *mut c_float, wi: *const c_float, vl: *mut c_float, ldvl: c_int,
                               vr: *mut c_float, ldvr: c_int, mm: c_int, m: *mut c_int,
                               work: *mut c_float, ifaill: *mut c_int, ifailr: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dhsein_work(matrix_layout: c_int, job: c_char, eigsrc: c_char, initv: c_char,
                               select: *mut c_int, n: c_int, h: *const c_double, ldh: c_int,
                               wr: *mut c_double, wi: *const c_double, vl: *mut c_double,
                               ldvl: c_int, vr: *mut c_double, ldvr: c_int, mm: c_int,
                               m: *mut c_int, work: *mut c_double, ifaill: *mut c_int,
                               ifailr: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_chsein_work(matrix_layout: c_int, job: c_char, eigsrc: c_char, initv: c_char,
                               select: *const c_int, n: c_int, h: *const c_float_complex,
                               ldh: c_int, w: *mut c_float_complex, vl: *mut c_float_complex,
                               ldvl: c_int, vr: *mut c_float_complex, ldvr: c_int, mm: c_int,
                               m: *mut c_int, work: *mut c_float_complex, rwork: *mut c_float,
                               ifaill: *mut c_int, ifailr: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zhsein_work(matrix_layout: c_int, job: c_char, eigsrc: c_char, initv: c_char,
                               select: *const c_int, n: c_int, h: *const c_double_complex,
                               ldh: c_int, w: *mut c_double_complex, vl: *mut c_double_complex,
                               ldvl: c_int, vr: *mut c_double_complex, ldvr: c_int, mm: c_int,
                               m: *mut c_int, work: *mut c_double_complex, rwork: *mut c_double,
                               ifaill: *mut c_int, ifailr: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_shseqr_work(matrix_layout: c_int, job: c_char, compz: c_char, n: c_int,
                               ilo: c_int, ihi: c_int, h: *mut c_float, ldh: c_int,
                               wr: *mut c_float, wi: *mut c_float, z: *mut c_float, ldz: c_int,
                               work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dhseqr_work(matrix_layout: c_int, job: c_char, compz: c_char, n: c_int,
                               ilo: c_int, ihi: c_int, h: *mut c_double, ldh: c_int,
                               wr: *mut c_double, wi: *mut c_double, z: *mut c_double, ldz: c_int,
                               work: *mut c_double, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_chseqr_work(matrix_layout: c_int, job: c_char, compz: c_char, n: c_int,
                               ilo: c_int, ihi: c_int, h: *mut c_float_complex, ldh: c_int,
                               w: *mut c_float_complex, z: *mut c_float_complex, ldz: c_int,
                               work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zhseqr_work(matrix_layout: c_int, job: c_char, compz: c_char, n: c_int,
                               ilo: c_int, ihi: c_int, h: *mut c_double_complex, ldh: c_int,
                               w: *mut c_double_complex, z: *mut c_double_complex, ldz: c_int,
                               work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_clacgv_work(n: c_int, x: *mut c_float_complex, incx: c_int) -> c_int;
    pub fn LAPACKE_zlacgv_work(n: c_int, x: *mut c_double_complex, incx: c_int) -> c_int;

    pub fn LAPACKE_slacn2_work(n: c_int, v: *mut c_float, x: *mut c_float, isgn: *mut c_int,
                               est: *mut c_float, kase: *mut c_int, isave: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dlacn2_work(n: c_int, v: *mut c_double, x: *mut c_double, isgn: *mut c_int,
                               est: *mut c_double, kase: *mut c_int, isave: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_clacn2_work(n: c_int, v: *mut c_float_complex, x: *mut c_float_complex,
                               est: *mut c_float, kase: *mut c_int, isave: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zlacn2_work(n: c_int, v: *mut c_double_complex, x: *mut c_double_complex,
                               est: *mut c_double, kase: *mut c_int, isave: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_slacpy_work(matrix_layout: c_int, uplo: c_char, m: c_int, n: c_int,
                               a: *const c_float, lda: c_int, b: *mut c_float, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_dlacpy_work(matrix_layout: c_int, uplo: c_char, m: c_int, n: c_int,
                               a: *const c_double, lda: c_int, b: *mut c_double, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_clacpy_work(matrix_layout: c_int, uplo: c_char, m: c_int, n: c_int,
                               a: *const c_float_complex, lda: c_int, b: *mut c_float_complex,
                               ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_zlacpy_work(matrix_layout: c_int, uplo: c_char, m: c_int, n: c_int,
                               a: *const c_double_complex, lda: c_int, b: *mut c_double_complex,
                               ldb: c_int)
                               -> c_int;

    pub fn LAPACKE_clacp2_work(matrix_layout: c_int, uplo: c_char, m: c_int, n: c_int,
                               a: *const c_float, lda: c_int, b: *mut c_float_complex, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_zlacp2_work(matrix_layout: c_int, uplo: c_char, m: c_int, n: c_int,
                               a: *const c_double, lda: c_int, b: *mut c_double_complex,
                               ldb: c_int)
                               -> c_int;

    pub fn LAPACKE_zlag2c_work(matrix_layout: c_int, m: c_int, n: c_int,
                               a: *const c_double_complex, lda: c_int, sa: *mut c_float_complex,
                               ldsa: c_int)
                               -> c_int;

    pub fn LAPACKE_slag2d_work(matrix_layout: c_int, m: c_int, n: c_int, sa: *const c_float,
                               ldsa: c_int, a: *mut c_double, lda: c_int)
                               -> c_int;

    pub fn LAPACKE_dlag2s_work(matrix_layout: c_int, m: c_int, n: c_int, a: *const c_double,
                               lda: c_int, sa: *mut c_float, ldsa: c_int)
                               -> c_int;

    pub fn LAPACKE_clag2z_work(matrix_layout: c_int, m: c_int, n: c_int,
                               sa: *const c_float_complex, ldsa: c_int, a: *mut c_double_complex,
                               lda: c_int)
                               -> c_int;

    pub fn LAPACKE_slagge_work(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                               d: *const c_float, a: *mut c_float, lda: c_int, iseed: *mut c_int,
                               work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dlagge_work(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                               d: *const c_double, a: *mut c_double, lda: c_int, iseed: *mut c_int,
                               work: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_clagge_work(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                               d: *const c_float, a: *mut c_float_complex, lda: c_int,
                               iseed: *mut c_int, work: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zlagge_work(matrix_layout: c_int, m: c_int, n: c_int, kl: c_int, ku: c_int,
                               d: *const c_double, a: *mut c_double_complex, lda: c_int,
                               iseed: *mut c_int, work: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_claghe_work(matrix_layout: c_int, n: c_int, k: c_int, d: *const c_float,
                               a: *mut c_float_complex, lda: c_int, iseed: *mut c_int,
                               work: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zlaghe_work(matrix_layout: c_int, n: c_int, k: c_int, d: *const c_double,
                               a: *mut c_double_complex, lda: c_int, iseed: *mut c_int,
                               work: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_slagsy_work(matrix_layout: c_int, n: c_int, k: c_int, d: *const c_float,
                               a: *mut c_float, lda: c_int, iseed: *mut c_int, work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dlagsy_work(matrix_layout: c_int, n: c_int, k: c_int, d: *const c_double,
                               a: *mut c_double, lda: c_int, iseed: *mut c_int,
                               work: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_clagsy_work(matrix_layout: c_int, n: c_int, k: c_int, d: *const c_float,
                               a: *mut c_float_complex, lda: c_int, iseed: *mut c_int,
                               work: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zlagsy_work(matrix_layout: c_int, n: c_int, k: c_int, d: *const c_double,
                               a: *mut c_double_complex, lda: c_int, iseed: *mut c_int,
                               work: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_slapmr_work(matrix_layout: c_int, forwrd: c_int, m: c_int, n: c_int,
                               x: *mut c_float, ldx: c_int, k: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dlapmr_work(matrix_layout: c_int, forwrd: c_int, m: c_int, n: c_int,
                               x: *mut c_double, ldx: c_int, k: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_clapmr_work(matrix_layout: c_int, forwrd: c_int, m: c_int, n: c_int,
                               x: *mut c_float_complex, ldx: c_int, k: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zlapmr_work(matrix_layout: c_int, forwrd: c_int, m: c_int, n: c_int,
                               x: *mut c_double_complex, ldx: c_int, k: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_slapmt_work(matrix_layout: c_int, forwrd: c_int, m: c_int, n: c_int,
                               x: *mut c_float, ldx: c_int, k: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dlapmt_work(matrix_layout: c_int, forwrd: c_int, m: c_int, n: c_int,
                               x: *mut c_double, ldx: c_int, k: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_clapmt_work(matrix_layout: c_int, forwrd: c_int, m: c_int, n: c_int,
                               x: *mut c_float_complex, ldx: c_int, k: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zlapmt_work(matrix_layout: c_int, forwrd: c_int, m: c_int, n: c_int,
                               x: *mut c_double_complex, ldx: c_int, k: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_slartgp_work(f: c_float, g: c_float, cs: *mut c_float, sn: *mut c_float,
                                r: *mut c_float)
                                -> c_int;
    pub fn LAPACKE_dlartgp_work(f: c_double, g: c_double, cs: *mut c_double, sn: *mut c_double,
                                r: *mut c_double)
                                -> c_int;

    pub fn LAPACKE_slartgs_work(x: c_float, y: c_float, sigma: c_float, cs: *mut c_float,
                                sn: *mut c_float)
                                -> c_int;
    pub fn LAPACKE_dlartgs_work(x: c_double, y: c_double, sigma: c_double, cs: *mut c_double,
                                sn: *mut c_double)
                                -> c_int;

    pub fn LAPACKE_slapy2_work(x: c_float, y: c_float) -> c_float;
    pub fn LAPACKE_dlapy2_work(x: c_double, y: c_double) -> c_double;

    pub fn LAPACKE_slapy3_work(x: c_float, y: c_float, z: c_float) -> c_float;
    pub fn LAPACKE_dlapy3_work(x: c_double, y: c_double, z: c_double) -> c_double;

    pub fn LAPACKE_slamch_work(cmach: c_char) -> c_float;
    pub fn LAPACKE_dlamch_work(cmach: c_char) -> c_double;

    pub fn LAPACKE_slange_work(matrix_layout: c_int, norm: c_char, m: c_int, n: c_int,
                               a: *const c_float, lda: c_int, work: *mut c_float)
                               -> c_float;
    pub fn LAPACKE_dlange_work(matrix_layout: c_int, norm: c_char, m: c_int, n: c_int,
                               a: *const c_double, lda: c_int, work: *mut c_double)
                               -> c_double;
    pub fn LAPACKE_clange_work(matrix_layout: c_int, norm: c_char, m: c_int, n: c_int,
                               a: *const c_float_complex, lda: c_int, work: *mut c_float)
                               -> c_float;
    pub fn LAPACKE_zlange_work(matrix_layout: c_int, norm: c_char, m: c_int, n: c_int,
                               a: *const c_double_complex, lda: c_int, work: *mut c_double)
                               -> c_double;

    pub fn LAPACKE_clanhe_work(matrix_layout: c_int, norm: c_char, uplo: c_char, n: c_int,
                               a: *const c_float_complex, lda: c_int, work: *mut c_float)
                               -> c_float;
    pub fn LAPACKE_zlanhe_work(matrix_layout: c_int, norm: c_char, uplo: c_char, n: c_int,
                               a: *const c_double_complex, lda: c_int, work: *mut c_double)
                               -> c_double;

    pub fn LAPACKE_slansy_work(matrix_layout: c_int, norm: c_char, uplo: c_char, n: c_int,
                               a: *const c_float, lda: c_int, work: *mut c_float)
                               -> c_float;
    pub fn LAPACKE_dlansy_work(matrix_layout: c_int, norm: c_char, uplo: c_char, n: c_int,
                               a: *const c_double, lda: c_int, work: *mut c_double)
                               -> c_double;
    pub fn LAPACKE_clansy_work(matrix_layout: c_int, norm: c_char, uplo: c_char, n: c_int,
                               a: *const c_float_complex, lda: c_int, work: *mut c_float)
                               -> c_float;
    pub fn LAPACKE_zlansy_work(matrix_layout: c_int, norm: c_char, uplo: c_char, n: c_int,
                               a: *const c_double_complex, lda: c_int, work: *mut c_double)
                               -> c_double;

    pub fn LAPACKE_slantr_work(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char,
                               m: c_int, n: c_int, a: *const c_float, lda: c_int,
                               work: *mut c_float)
                               -> c_float;
    pub fn LAPACKE_dlantr_work(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char,
                               m: c_int, n: c_int, a: *const c_double, lda: c_int,
                               work: *mut c_double)
                               -> c_double;
    pub fn LAPACKE_clantr_work(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char,
                               m: c_int, n: c_int, a: *const c_float_complex, lda: c_int,
                               work: *mut c_float)
                               -> c_float;
    pub fn LAPACKE_zlantr_work(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char,
                               m: c_int, n: c_int, a: *const c_double_complex, lda: c_int,
                               work: *mut c_double)
                               -> c_double;

    pub fn LAPACKE_slarfb_work(matrix_layout: c_int, side: c_char, trans: c_char, direct: c_char,
                               storev: c_char, m: c_int, n: c_int, k: c_int, v: *const c_float,
                               ldv: c_int, t: *const c_float, ldt: c_int, c: *mut c_float,
                               ldc: c_int, work: *mut c_float, ldwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dlarfb_work(matrix_layout: c_int, side: c_char, trans: c_char, direct: c_char,
                               storev: c_char, m: c_int, n: c_int, k: c_int, v: *const c_double,
                               ldv: c_int, t: *const c_double, ldt: c_int, c: *mut c_double,
                               ldc: c_int, work: *mut c_double, ldwork: c_int)
                               -> c_int;
    pub fn LAPACKE_clarfb_work(matrix_layout: c_int, side: c_char, trans: c_char, direct: c_char,
                               storev: c_char, m: c_int, n: c_int, k: c_int,
                               v: *const c_float_complex, ldv: c_int, t: *const c_float_complex,
                               ldt: c_int, c: *mut c_float_complex, ldc: c_int,
                               work: *mut c_float_complex, ldwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zlarfb_work(matrix_layout: c_int, side: c_char, trans: c_char, direct: c_char,
                               storev: c_char, m: c_int, n: c_int, k: c_int,
                               v: *const c_double_complex, ldv: c_int, t: *const c_double_complex,
                               ldt: c_int, c: *mut c_double_complex, ldc: c_int,
                               work: *mut c_double_complex, ldwork: c_int)
                               -> c_int;

    pub fn LAPACKE_slarfg_work(n: c_int, alpha: *mut c_float, x: *mut c_float, incx: c_int,
                               tau: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dlarfg_work(n: c_int, alpha: *mut c_double, x: *mut c_double, incx: c_int,
                               tau: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_clarfg_work(n: c_int, alpha: *mut c_float_complex, x: *mut c_float_complex,
                               incx: c_int, tau: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zlarfg_work(n: c_int, alpha: *mut c_double_complex, x: *mut c_double_complex,
                               incx: c_int, tau: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_slarft_work(matrix_layout: c_int, direct: c_char, storev: c_char, n: c_int,
                               k: c_int, v: *const c_float, ldv: c_int, tau: *const c_float,
                               t: *mut c_float, ldt: c_int)
                               -> c_int;
    pub fn LAPACKE_dlarft_work(matrix_layout: c_int, direct: c_char, storev: c_char, n: c_int,
                               k: c_int, v: *const c_double, ldv: c_int, tau: *const c_double,
                               t: *mut c_double, ldt: c_int)
                               -> c_int;
    pub fn LAPACKE_clarft_work(matrix_layout: c_int, direct: c_char, storev: c_char, n: c_int,
                               k: c_int, v: *const c_float_complex, ldv: c_int,
                               tau: *const c_float_complex, t: *mut c_float_complex, ldt: c_int)
                               -> c_int;
    pub fn LAPACKE_zlarft_work(matrix_layout: c_int, direct: c_char, storev: c_char, n: c_int,
                               k: c_int, v: *const c_double_complex, ldv: c_int,
                               tau: *const c_double_complex, t: *mut c_double_complex, ldt: c_int)
                               -> c_int;

    pub fn LAPACKE_slarfx_work(matrix_layout: c_int, side: c_char, m: c_int, n: c_int,
                               v: *const c_float, tau: c_float, c: *mut c_float, ldc: c_int,
                               work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dlarfx_work(matrix_layout: c_int, side: c_char, m: c_int, n: c_int,
                               v: *const c_double, tau: c_double, c: *mut c_double, ldc: c_int,
                               work: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_clarfx_work(matrix_layout: c_int, side: c_char, m: c_int, n: c_int,
                               v: *const c_float_complex, tau: c_float_complex,
                               c: *mut c_float_complex, ldc: c_int, work: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zlarfx_work(matrix_layout: c_int, side: c_char, m: c_int, n: c_int,
                               v: *const c_double_complex, tau: c_double_complex,
                               c: *mut c_double_complex, ldc: c_int, work: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_slarnv_work(idist: c_int, iseed: *mut c_int, n: c_int,
                               x: *mut c_float) -> c_int;
    pub fn LAPACKE_dlarnv_work(idist: c_int, iseed: *mut c_int, n: c_int,
                               x: *mut c_double) -> c_int;
    pub fn LAPACKE_clarnv_work(idist: c_int, iseed: *mut c_int, n: c_int, x: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zlarnv_work(idist: c_int, iseed: *mut c_int, n: c_int, x: *mut c_double_complex)
                               -> c_int;


    pub fn LAPACKE_slascl_work(matrix_layout: c_int, _type: c_char, kl: c_int, ku: c_int,
                               cfrom: c_float, cto: c_float, m: c_int, n: c_int, a: *mut c_float,
                               lda: c_int)
                               -> c_int;
    pub fn LAPACKE_dlascl_work(matrix_layout: c_int, _type: c_char, kl: c_int, ku: c_int,
                               cfrom: c_double, cto: c_double, m: c_int, n: c_int,
                               a: *mut c_double, lda: c_int)
                               -> c_int;
    pub fn LAPACKE_clascl_work(matrix_layout: c_int, _type: c_char, kl: c_int, ku: c_int,
                               cfrom: c_float, cto: c_float, m: c_int, n: c_int,
                               a: *mut c_float_complex, lda: c_int)
                               -> c_int;
    pub fn LAPACKE_zlascl_work(matrix_layout: c_int, _type: c_char, kl: c_int, ku: c_int,
                               cfrom: c_double, cto: c_double, m: c_int, n: c_int,
                               a: *mut c_double_complex, lda: c_int)
                               -> c_int;

    pub fn LAPACKE_slaset_work(matrix_layout: c_int, uplo: c_char, m: c_int, n: c_int,
                               alpha: c_float, beta: c_float, a: *mut c_float, lda: c_int)
                               -> c_int;
    pub fn LAPACKE_dlaset_work(matrix_layout: c_int, uplo: c_char, m: c_int, n: c_int,
                               alpha: c_double, beta: c_double, a: *mut c_double, lda: c_int)
                               -> c_int;
    pub fn LAPACKE_claset_work(matrix_layout: c_int, uplo: c_char, m: c_int, n: c_int,
                               alpha: c_float_complex, beta: c_float_complex,
                               a: *mut c_float_complex, lda: c_int)
                               -> c_int;
    pub fn LAPACKE_zlaset_work(matrix_layout: c_int, uplo: c_char, m: c_int, n: c_int,
                               alpha: c_double_complex, beta: c_double_complex,
                               a: *mut c_double_complex, lda: c_int)
                               -> c_int;

    pub fn LAPACKE_slasrt_work(id: c_char, n: c_int, d: *mut c_float) -> c_int;
    pub fn LAPACKE_dlasrt_work(id: c_char, n: c_int, d: *mut c_double) -> c_int;

    pub fn LAPACKE_slaswp_work(matrix_layout: c_int, n: c_int, a: *mut c_float, lda: c_int,
                               k1: c_int, k2: c_int, ipiv: *const c_int, incx: c_int)
                               -> c_int;
    pub fn LAPACKE_dlaswp_work(matrix_layout: c_int, n: c_int, a: *mut c_double, lda: c_int,
                               k1: c_int, k2: c_int, ipiv: *const c_int, incx: c_int)
                               -> c_int;
    pub fn LAPACKE_claswp_work(matrix_layout: c_int, n: c_int, a: *mut c_float_complex, lda: c_int,
                               k1: c_int, k2: c_int, ipiv: *const c_int, incx: c_int)
                               -> c_int;
    pub fn LAPACKE_zlaswp_work(matrix_layout: c_int, n: c_int, a: *mut c_double_complex,
                               lda: c_int, k1: c_int, k2: c_int, ipiv: *const c_int, incx: c_int)
                               -> c_int;

    pub fn LAPACKE_slatms_work(matrix_layout: c_int, m: c_int, n: c_int, dist: c_char,
                               iseed: *mut c_int, sym: c_char, d: *mut c_float, mode: c_int,
                               cond: c_float, dmax: c_float, kl: c_int, ku: c_int, pack: c_char,
                               a: *mut c_float, lda: c_int, work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dlatms_work(matrix_layout: c_int, m: c_int, n: c_int, dist: c_char,
                               iseed: *mut c_int, sym: c_char, d: *mut c_double, mode: c_int,
                               cond: c_double, dmax: c_double, kl: c_int, ku: c_int, pack: c_char,
                               a: *mut c_double, lda: c_int, work: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_clatms_work(matrix_layout: c_int, m: c_int, n: c_int, dist: c_char,
                               iseed: *mut c_int, sym: c_char, d: *mut c_float, mode: c_int,
                               cond: c_float, dmax: c_float, kl: c_int, ku: c_int, pack: c_char,
                               a: *mut c_float_complex, lda: c_int, work: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zlatms_work(matrix_layout: c_int, m: c_int, n: c_int, dist: c_char,
                               iseed: *mut c_int, sym: c_char, d: *mut c_double, mode: c_int,
                               cond: c_double, dmax: c_double, kl: c_int, ku: c_int, pack: c_char,
                               a: *mut c_double_complex, lda: c_int, work: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_slauum_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float,
                               lda: c_int)
                               -> c_int;
    pub fn LAPACKE_dlauum_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double,
                               lda: c_int)
                               -> c_int;
    pub fn LAPACKE_clauum_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *mut c_float_complex, lda: c_int)
                               -> c_int;
    pub fn LAPACKE_zlauum_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *mut c_double_complex, lda: c_int)
                               -> c_int;

    pub fn LAPACKE_sopgtr_work(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *const c_float,
                               tau: *const c_float, q: *mut c_float, ldq: c_int,
                               work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dopgtr_work(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *const c_double,
                               tau: *const c_double, q: *mut c_double, ldq: c_int,
                               work: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sopmtr_work(matrix_layout: c_int, side: c_char, uplo: c_char, trans: c_char,
                               m: c_int, n: c_int, ap: *const c_float, tau: *const c_float,
                               c: *mut c_float, ldc: c_int, work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dopmtr_work(matrix_layout: c_int, side: c_char, uplo: c_char, trans: c_char,
                               m: c_int, n: c_int, ap: *const c_double, tau: *const c_double,
                               c: *mut c_double, ldc: c_int, work: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sorgbr_work(matrix_layout: c_int, vect: c_char, m: c_int, n: c_int, k: c_int,
                               a: *mut c_float, lda: c_int, tau: *const c_float,
                               work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dorgbr_work(matrix_layout: c_int, vect: c_char, m: c_int, n: c_int, k: c_int,
                               a: *mut c_double, lda: c_int, tau: *const c_double,
                               work: *mut c_double, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sorghr_work(matrix_layout: c_int, n: c_int, ilo: c_int, ihi: c_int,
                               a: *mut c_float, lda: c_int, tau: *const c_float,
                               work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dorghr_work(matrix_layout: c_int, n: c_int, ilo: c_int, ihi: c_int,
                               a: *mut c_double, lda: c_int, tau: *const c_double,
                               work: *mut c_double, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sorglq_work(matrix_layout: c_int, m: c_int, n: c_int, k: c_int, a: *mut c_float,
                               lda: c_int, tau: *const c_float, work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dorglq_work(matrix_layout: c_int, m: c_int, n: c_int, k: c_int,
                               a: *mut c_double, lda: c_int, tau: *const c_double,
                               work: *mut c_double, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sorgql_work(matrix_layout: c_int, m: c_int, n: c_int, k: c_int, a: *mut c_float,
                               lda: c_int, tau: *const c_float, work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dorgql_work(matrix_layout: c_int, m: c_int, n: c_int, k: c_int,
                               a: *mut c_double, lda: c_int, tau: *const c_double,
                               work: *mut c_double, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sorgqr_work(matrix_layout: c_int, m: c_int, n: c_int, k: c_int, a: *mut c_float,
                               lda: c_int, tau: *const c_float, work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dorgqr_work(matrix_layout: c_int, m: c_int, n: c_int, k: c_int,
                               a: *mut c_double, lda: c_int, tau: *const c_double,
                               work: *mut c_double, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sorgrq_work(matrix_layout: c_int, m: c_int, n: c_int, k: c_int, a: *mut c_float,
                               lda: c_int, tau: *const c_float, work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dorgrq_work(matrix_layout: c_int, m: c_int, n: c_int, k: c_int,
                               a: *mut c_double, lda: c_int, tau: *const c_double,
                               work: *mut c_double, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sorgtr_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float,
                               lda: c_int, tau: *const c_float, work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dorgtr_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double,
                               lda: c_int, tau: *const c_double, work: *mut c_double, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sormbr_work(matrix_layout: c_int, vect: c_char, side: c_char, trans: c_char,
                               m: c_int, n: c_int, k: c_int, a: *const c_float, lda: c_int,
                               tau: *const c_float, c: *mut c_float, ldc: c_int,
                               work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dormbr_work(matrix_layout: c_int, vect: c_char, side: c_char, trans: c_char,
                               m: c_int, n: c_int, k: c_int, a: *const c_double, lda: c_int,
                               tau: *const c_double, c: *mut c_double, ldc: c_int,
                               work: *mut c_double, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sormhr_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                               n: c_int, ilo: c_int, ihi: c_int, a: *const c_float, lda: c_int,
                               tau: *const c_float, c: *mut c_float, ldc: c_int,
                               work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dormhr_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                               n: c_int, ilo: c_int, ihi: c_int, a: *const c_double, lda: c_int,
                               tau: *const c_double, c: *mut c_double, ldc: c_int,
                               work: *mut c_double, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sormlq_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                               n: c_int, k: c_int, a: *const c_float, lda: c_int,
                               tau: *const c_float, c: *mut c_float, ldc: c_int,
                               work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dormlq_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                               n: c_int, k: c_int, a: *const c_double, lda: c_int,
                               tau: *const c_double, c: *mut c_double, ldc: c_int,
                               work: *mut c_double, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sormql_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                               n: c_int, k: c_int, a: *const c_float, lda: c_int,
                               tau: *const c_float, c: *mut c_float, ldc: c_int,
                               work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dormql_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                               n: c_int, k: c_int, a: *const c_double, lda: c_int,
                               tau: *const c_double, c: *mut c_double, ldc: c_int,
                               work: *mut c_double, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sormqr_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                               n: c_int, k: c_int, a: *const c_float, lda: c_int,
                               tau: *const c_float, c: *mut c_float, ldc: c_int,
                               work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dormqr_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                               n: c_int, k: c_int, a: *const c_double, lda: c_int,
                               tau: *const c_double, c: *mut c_double, ldc: c_int,
                               work: *mut c_double, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sormrq_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                               n: c_int, k: c_int, a: *const c_float, lda: c_int,
                               tau: *const c_float, c: *mut c_float, ldc: c_int,
                               work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dormrq_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                               n: c_int, k: c_int, a: *const c_double, lda: c_int,
                               tau: *const c_double, c: *mut c_double, ldc: c_int,
                               work: *mut c_double, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sormrz_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                               n: c_int, k: c_int, l: c_int, a: *const c_float, lda: c_int,
                               tau: *const c_float, c: *mut c_float, ldc: c_int,
                               work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dormrz_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                               n: c_int, k: c_int, l: c_int, a: *const c_double, lda: c_int,
                               tau: *const c_double, c: *mut c_double, ldc: c_int,
                               work: *mut c_double, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sormtr_work(matrix_layout: c_int, side: c_char, uplo: c_char, trans: c_char,
                               m: c_int, n: c_int, a: *const c_float, lda: c_int,
                               tau: *const c_float, c: *mut c_float, ldc: c_int,
                               work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dormtr_work(matrix_layout: c_int, side: c_char, uplo: c_char, trans: c_char,
                               m: c_int, n: c_int, a: *const c_double, lda: c_int,
                               tau: *const c_double, c: *mut c_double, ldc: c_int,
                               work: *mut c_double, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_spbcon_work(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                               ab: *const c_float, ldab: c_int, anorm: c_float,
                               rcond: *mut c_float, work: *mut c_float, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dpbcon_work(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                               ab: *const c_double, ldab: c_int, anorm: c_double,
                               rcond: *mut c_double, work: *mut c_double, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cpbcon_work(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                               ab: *const c_float_complex, ldab: c_int, anorm: c_float,
                               rcond: *mut c_float, work: *mut c_float_complex,
                               rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zpbcon_work(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                               ab: *const c_double_complex, ldab: c_int, anorm: c_double,
                               rcond: *mut c_double, work: *mut c_double_complex,
                               rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_spbequ_work(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                               ab: *const c_float, ldab: c_int, s: *mut c_float,
                               scond: *mut c_float, amax: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dpbequ_work(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                               ab: *const c_double, ldab: c_int, s: *mut c_double,
                               scond: *mut c_double, amax: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_cpbequ_work(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                               ab: *const c_float_complex, ldab: c_int, s: *mut c_float,
                               scond: *mut c_float, amax: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zpbequ_work(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                               ab: *const c_double_complex, ldab: c_int, s: *mut c_double,
                               scond: *mut c_double, amax: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_spbrfs_work(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                               nrhs: c_int, ab: *const c_float, ldab: c_int, afb: *const c_float,
                               ldafb: c_int, b: *const c_float, ldb: c_int, x: *mut c_float,
                               ldx: c_int, ferr: *mut c_float, berr: *mut c_float,
                               work: *mut c_float, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dpbrfs_work(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                               nrhs: c_int, ab: *const c_double, ldab: c_int, afb: *const c_double,
                               ldafb: c_int, b: *const c_double, ldb: c_int, x: *mut c_double,
                               ldx: c_int, ferr: *mut c_double, berr: *mut c_double,
                               work: *mut c_double, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cpbrfs_work(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                               nrhs: c_int, ab: *const c_float_complex, ldab: c_int,
                               afb: *const c_float_complex, ldafb: c_int,
                               b: *const c_float_complex, ldb: c_int, x: *mut c_float_complex,
                               ldx: c_int, ferr: *mut c_float, berr: *mut c_float,
                               work: *mut c_float_complex, rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zpbrfs_work(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                               nrhs: c_int, ab: *const c_double_complex, ldab: c_int,
                               afb: *const c_double_complex, ldafb: c_int,
                               b: *const c_double_complex, ldb: c_int, x: *mut c_double_complex,
                               ldx: c_int, ferr: *mut c_double, berr: *mut c_double,
                               work: *mut c_double_complex, rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_spbstf_work(matrix_layout: c_int, uplo: c_char, n: c_int, kb: c_int,
                               bb: *mut c_float, ldbb: c_int)
                               -> c_int;
    pub fn LAPACKE_dpbstf_work(matrix_layout: c_int, uplo: c_char, n: c_int, kb: c_int,
                               bb: *mut c_double, ldbb: c_int)
                               -> c_int;
    pub fn LAPACKE_cpbstf_work(matrix_layout: c_int, uplo: c_char, n: c_int, kb: c_int,
                               bb: *mut c_float_complex, ldbb: c_int)
                               -> c_int;
    pub fn LAPACKE_zpbstf_work(matrix_layout: c_int, uplo: c_char, n: c_int, kb: c_int,
                               bb: *mut c_double_complex, ldbb: c_int)
                               -> c_int;

    pub fn LAPACKE_spbsv_work(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int, nrhs: c_int,
                              ab: *mut c_float, ldab: c_int, b: *mut c_float, ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_dpbsv_work(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int, nrhs: c_int,
                              ab: *mut c_double, ldab: c_int, b: *mut c_double, ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_cpbsv_work(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int, nrhs: c_int,
                              ab: *mut c_float_complex, ldab: c_int, b: *mut c_float_complex,
                              ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_zpbsv_work(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int, nrhs: c_int,
                              ab: *mut c_double_complex, ldab: c_int, b: *mut c_double_complex,
                              ldb: c_int)
                              -> c_int;

    pub fn LAPACKE_spbsvx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                               kd: c_int, nrhs: c_int, ab: *mut c_float, ldab: c_int,
                               afb: *mut c_float, ldafb: c_int, equed: *mut c_char,
                               s: *mut c_float, b: *mut c_float, ldb: c_int, x: *mut c_float,
                               ldx: c_int, rcond: *mut c_float, ferr: *mut c_float,
                               berr: *mut c_float, work: *mut c_float, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dpbsvx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                               kd: c_int, nrhs: c_int, ab: *mut c_double, ldab: c_int,
                               afb: *mut c_double, ldafb: c_int, equed: *mut c_char,
                               s: *mut c_double, b: *mut c_double, ldb: c_int, x: *mut c_double,
                               ldx: c_int, rcond: *mut c_double, ferr: *mut c_double,
                               berr: *mut c_double, work: *mut c_double, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cpbsvx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                               kd: c_int, nrhs: c_int, ab: *mut c_float_complex, ldab: c_int,
                               afb: *mut c_float_complex, ldafb: c_int, equed: *mut c_char,
                               s: *mut c_float, b: *mut c_float_complex, ldb: c_int,
                               x: *mut c_float_complex, ldx: c_int, rcond: *mut c_float,
                               ferr: *mut c_float, berr: *mut c_float, work: *mut c_float_complex,
                               rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zpbsvx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                               kd: c_int, nrhs: c_int, ab: *mut c_double_complex, ldab: c_int,
                               afb: *mut c_double_complex, ldafb: c_int, equed: *mut c_char,
                               s: *mut c_double, b: *mut c_double_complex, ldb: c_int,
                               x: *mut c_double_complex, ldx: c_int, rcond: *mut c_double,
                               ferr: *mut c_double, berr: *mut c_double,
                               work: *mut c_double_complex, rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_spbtrf_work(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                               ab: *mut c_float, ldab: c_int)
                               -> c_int;
    pub fn LAPACKE_dpbtrf_work(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                               ab: *mut c_double, ldab: c_int)
                               -> c_int;
    pub fn LAPACKE_cpbtrf_work(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                               ab: *mut c_float_complex, ldab: c_int)
                               -> c_int;
    pub fn LAPACKE_zpbtrf_work(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                               ab: *mut c_double_complex, ldab: c_int)
                               -> c_int;

    pub fn LAPACKE_spbtrs_work(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                               nrhs: c_int, ab: *const c_float, ldab: c_int, b: *mut c_float,
                               ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_dpbtrs_work(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                               nrhs: c_int, ab: *const c_double, ldab: c_int, b: *mut c_double,
                               ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_cpbtrs_work(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                               nrhs: c_int, ab: *const c_float_complex, ldab: c_int,
                               b: *mut c_float_complex, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_zpbtrs_work(matrix_layout: c_int, uplo: c_char, n: c_int, kd: c_int,
                               nrhs: c_int, ab: *const c_double_complex, ldab: c_int,
                               b: *mut c_double_complex, ldb: c_int)
                               -> c_int;

    pub fn LAPACKE_spftrf_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               a: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dpftrf_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               a: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_cpftrf_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               a: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zpftrf_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               a: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_spftri_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               a: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dpftri_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               a: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_cpftri_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               a: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zpftri_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               a: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_spftrs_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               nrhs: c_int, a: *const c_float, b: *mut c_float, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_dpftrs_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               nrhs: c_int, a: *const c_double, b: *mut c_double, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_cpftrs_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               nrhs: c_int, a: *const c_float_complex, b: *mut c_float_complex,
                               ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_zpftrs_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               nrhs: c_int, a: *const c_double_complex, b: *mut c_double_complex,
                               ldb: c_int)
                               -> c_int;

    pub fn LAPACKE_spocon_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *const c_float,
                               lda: c_int, anorm: c_float, rcond: *mut c_float, work: *mut c_float,
                               iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dpocon_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *const c_double,
                               lda: c_int, anorm: c_double, rcond: *mut c_double,
                               work: *mut c_double, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cpocon_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *const c_float_complex, lda: c_int, anorm: c_float,
                               rcond: *mut c_float, work: *mut c_float_complex,
                               rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zpocon_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *const c_double_complex, lda: c_int, anorm: c_double,
                               rcond: *mut c_double, work: *mut c_double_complex,
                               rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_spoequ_work(matrix_layout: c_int, n: c_int, a: *const c_float, lda: c_int,
                               s: *mut c_float, scond: *mut c_float, amax: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dpoequ_work(matrix_layout: c_int, n: c_int, a: *const c_double, lda: c_int,
                               s: *mut c_double, scond: *mut c_double, amax: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_cpoequ_work(matrix_layout: c_int, n: c_int, a: *const c_float_complex,
                               lda: c_int, s: *mut c_float, scond: *mut c_float,
                               amax: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zpoequ_work(matrix_layout: c_int, n: c_int, a: *const c_double_complex,
                               lda: c_int, s: *mut c_double, scond: *mut c_double,
                               amax: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_spoequb_work(matrix_layout: c_int, n: c_int, a: *const c_float, lda: c_int,
                                s: *mut c_float, scond: *mut c_float, amax: *mut c_float)
                                -> c_int;
    pub fn LAPACKE_dpoequb_work(matrix_layout: c_int, n: c_int, a: *const c_double, lda: c_int,
                                s: *mut c_double, scond: *mut c_double, amax: *mut c_double)
                                -> c_int;
    pub fn LAPACKE_cpoequb_work(matrix_layout: c_int, n: c_int, a: *const c_float_complex,
                                lda: c_int, s: *mut c_float, scond: *mut c_float,
                                amax: *mut c_float)
                                -> c_int;
    pub fn LAPACKE_zpoequb_work(matrix_layout: c_int, n: c_int, a: *const c_double_complex,
                                lda: c_int, s: *mut c_double, scond: *mut c_double,
                                amax: *mut c_double)
                                -> c_int;

    pub fn LAPACKE_sporfs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *const c_float, lda: c_int, af: *const c_float, ldaf: c_int,
                               b: *const c_float, ldb: c_int, x: *mut c_float, ldx: c_int,
                               ferr: *mut c_float, berr: *mut c_float, work: *mut c_float,
                               iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dporfs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *const c_double, lda: c_int, af: *const c_double, ldaf: c_int,
                               b: *const c_double, ldb: c_int, x: *mut c_double, ldx: c_int,
                               ferr: *mut c_double, berr: *mut c_double, work: *mut c_double,
                               iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cporfs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *const c_float_complex, lda: c_int, af: *const c_float_complex,
                               ldaf: c_int, b: *const c_float_complex, ldb: c_int,
                               x: *mut c_float_complex, ldx: c_int, ferr: *mut c_float,
                               berr: *mut c_float, work: *mut c_float_complex, rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zporfs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *const c_double_complex, lda: c_int, af: *const c_double_complex,
                               ldaf: c_int, b: *const c_double_complex, ldb: c_int,
                               x: *mut c_double_complex, ldx: c_int, ferr: *mut c_double,
                               berr: *mut c_double, work: *mut c_double_complex,
                               rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sporfsx_work(matrix_layout: c_int, uplo: c_char, equed: c_char, n: c_int,
                                nrhs: c_int, a: *const c_float, lda: c_int, af: *const c_float,
                                ldaf: c_int, s: *const c_float, b: *const c_float, ldb: c_int,
                                x: *mut c_float, ldx: c_int, rcond: *mut c_float,
                                berr: *mut c_float, n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                                err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float,
                                work: *mut c_float, iwork: *mut c_int)
                                -> c_int;
    pub fn LAPACKE_dporfsx_work(matrix_layout: c_int, uplo: c_char, equed: c_char, n: c_int,
                                nrhs: c_int, a: *const c_double, lda: c_int, af: *const c_double,
                                ldaf: c_int, s: *const c_double, b: *const c_double, ldb: c_int,
                                x: *mut c_double, ldx: c_int, rcond: *mut c_double,
                                berr: *mut c_double, n_err_bnds: c_int,
                                err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                                nparams: c_int, params: *mut c_double, work: *mut c_double,
                                iwork: *mut c_int)
                                -> c_int;
    pub fn LAPACKE_cporfsx_work(matrix_layout: c_int, uplo: c_char, equed: c_char, n: c_int,
                                nrhs: c_int, a: *const c_float_complex, lda: c_int,
                                af: *const c_float_complex, ldaf: c_int, s: *const c_float,
                                b: *const c_float_complex, ldb: c_int, x: *mut c_float_complex,
                                ldx: c_int, rcond: *mut c_float, berr: *mut c_float,
                                n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                                err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float,
                                work: *mut c_float_complex, rwork: *mut c_float)
                                -> c_int;
    pub fn LAPACKE_zporfsx_work(matrix_layout: c_int, uplo: c_char, equed: c_char, n: c_int,
                                nrhs: c_int, a: *const c_double_complex, lda: c_int,
                                af: *const c_double_complex, ldaf: c_int, s: *const c_double,
                                b: *const c_double_complex, ldb: c_int, x: *mut c_double_complex,
                                ldx: c_int, rcond: *mut c_double, berr: *mut c_double,
                                n_err_bnds: c_int, err_bnds_norm: *mut c_double,
                                err_bnds_comp: *mut c_double, nparams: c_int,
                                params: *mut c_double, work: *mut c_double_complex,
                                rwork: *mut c_double)
                                -> c_int;

    pub fn LAPACKE_sposv_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                              a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_dposv_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                              a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_cposv_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                              a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex,
                              ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_zposv_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                              a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                              ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_dsposv_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int,
                               x: *mut c_double, ldx: c_int, work: *mut c_double,
                               swork: *mut c_float, iter: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zcposv_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                               ldb: c_int, x: *mut c_double_complex, ldx: c_int,
                               work: *mut c_double_complex, swork: *mut c_float_complex,
                               rwork: *mut c_double, iter: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_sposvx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                               nrhs: c_int, a: *mut c_float, lda: c_int, af: *mut c_float,
                               ldaf: c_int, equed: *mut c_char, s: *mut c_float, b: *mut c_float,
                               ldb: c_int, x: *mut c_float, ldx: c_int, rcond: *mut c_float,
                               ferr: *mut c_float, berr: *mut c_float, work: *mut c_float,
                               iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dposvx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                               nrhs: c_int, a: *mut c_double, lda: c_int, af: *mut c_double,
                               ldaf: c_int, equed: *mut c_char, s: *mut c_double, b: *mut c_double,
                               ldb: c_int, x: *mut c_double, ldx: c_int, rcond: *mut c_double,
                               ferr: *mut c_double, berr: *mut c_double, work: *mut c_double,
                               iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cposvx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                               nrhs: c_int, a: *mut c_float_complex, lda: c_int,
                               af: *mut c_float_complex, ldaf: c_int, equed: *mut c_char,
                               s: *mut c_float, b: *mut c_float_complex, ldb: c_int,
                               x: *mut c_float_complex, ldx: c_int, rcond: *mut c_float,
                               ferr: *mut c_float, berr: *mut c_float, work: *mut c_float_complex,
                               rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zposvx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                               nrhs: c_int, a: *mut c_double_complex, lda: c_int,
                               af: *mut c_double_complex, ldaf: c_int, equed: *mut c_char,
                               s: *mut c_double, b: *mut c_double_complex, ldb: c_int,
                               x: *mut c_double_complex, ldx: c_int, rcond: *mut c_double,
                               ferr: *mut c_double, berr: *mut c_double,
                               work: *mut c_double_complex, rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sposvxx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                                nrhs: c_int, a: *mut c_float, lda: c_int, af: *mut c_float,
                                ldaf: c_int, equed: *mut c_char, s: *mut c_float, b: *mut c_float,
                                ldb: c_int, x: *mut c_float, ldx: c_int, rcond: *mut c_float,
                                rpvgrw: *mut c_float, berr: *mut c_float, n_err_bnds: c_int,
                                err_bnds_norm: *mut c_float, err_bnds_comp: *mut c_float,
                                nparams: c_int, params: *mut c_float, work: *mut c_float,
                                iwork: *mut c_int)
                                -> c_int;
    pub fn LAPACKE_dposvxx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                                nrhs: c_int, a: *mut c_double, lda: c_int, af: *mut c_double,
                                ldaf: c_int, equed: *mut c_char, s: *mut c_double,
                                b: *mut c_double, ldb: c_int, x: *mut c_double, ldx: c_int,
                                rcond: *mut c_double, rpvgrw: *mut c_double, berr: *mut c_double,
                                n_err_bnds: c_int, err_bnds_norm: *mut c_double,
                                err_bnds_comp: *mut c_double, nparams: c_int,
                                params: *mut c_double, work: *mut c_double, iwork: *mut c_int)
                                -> c_int;
    pub fn LAPACKE_cposvxx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                                nrhs: c_int, a: *mut c_float_complex, lda: c_int,
                                af: *mut c_float_complex, ldaf: c_int, equed: *mut c_char,
                                s: *mut c_float, b: *mut c_float_complex, ldb: c_int,
                                x: *mut c_float_complex, ldx: c_int, rcond: *mut c_float,
                                rpvgrw: *mut c_float, berr: *mut c_float, n_err_bnds: c_int,
                                err_bnds_norm: *mut c_float, err_bnds_comp: *mut c_float,
                                nparams: c_int, params: *mut c_float, work: *mut c_float_complex,
                                rwork: *mut c_float)
                                -> c_int;
    pub fn LAPACKE_zposvxx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                                nrhs: c_int, a: *mut c_double_complex, lda: c_int,
                                af: *mut c_double_complex, ldaf: c_int, equed: *mut c_char,
                                s: *mut c_double, b: *mut c_double_complex, ldb: c_int,
                                x: *mut c_double_complex, ldx: c_int, rcond: *mut c_double,
                                rpvgrw: *mut c_double, berr: *mut c_double, n_err_bnds: c_int,
                                err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                                nparams: c_int, params: *mut c_double, work: *mut c_double_complex,
                                rwork: *mut c_double)
                                -> c_int;

    pub fn LAPACKE_spotrf2_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float,
                                lda: c_int)
                                -> c_int;
    pub fn LAPACKE_dpotrf2_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double,
                                lda: c_int)
                                -> c_int;
    pub fn LAPACKE_cpotrf2_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                                a: *mut c_float_complex, lda: c_int)
                                -> c_int;
    pub fn LAPACKE_zpotrf2_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                                a: *mut c_double_complex, lda: c_int)
                                -> c_int;

    pub fn LAPACKE_spotrf_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float,
                               lda: c_int)
                               -> c_int;
    pub fn LAPACKE_dpotrf_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double,
                               lda: c_int)
                               -> c_int;
    pub fn LAPACKE_cpotrf_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *mut c_float_complex, lda: c_int)
                               -> c_int;
    pub fn LAPACKE_zpotrf_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *mut c_double_complex, lda: c_int)
                               -> c_int;

    pub fn LAPACKE_spotri_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float,
                               lda: c_int)
                               -> c_int;
    pub fn LAPACKE_dpotri_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double,
                               lda: c_int)
                               -> c_int;
    pub fn LAPACKE_cpotri_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *mut c_float_complex, lda: c_int)
                               -> c_int;
    pub fn LAPACKE_zpotri_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *mut c_double_complex, lda: c_int)
                               -> c_int;

    pub fn LAPACKE_spotrs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *const c_float, lda: c_int, b: *mut c_float, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_dpotrs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *const c_double, lda: c_int, b: *mut c_double, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_cpotrs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *const c_float_complex, lda: c_int, b: *mut c_float_complex,
                               ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_zpotrs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *const c_double_complex, lda: c_int, b: *mut c_double_complex,
                               ldb: c_int)
                               -> c_int;

    pub fn LAPACKE_sppcon_work(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *const c_float,
                               anorm: c_float, rcond: *mut c_float, work: *mut c_float,
                               iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dppcon_work(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *const c_double,
                               anorm: c_double, rcond: *mut c_double, work: *mut c_double,
                               iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cppcon_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               ap: *const c_float_complex, anorm: c_float, rcond: *mut c_float,
                               work: *mut c_float_complex, rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zppcon_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               ap: *const c_double_complex, anorm: c_double, rcond: *mut c_double,
                               work: *mut c_double_complex, rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sppequ_work(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *const c_float,
                               s: *mut c_float, scond: *mut c_float, amax: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dppequ_work(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *const c_double,
                               s: *mut c_double, scond: *mut c_double, amax: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_cppequ_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               ap: *const c_float_complex, s: *mut c_float, scond: *mut c_float,
                               amax: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zppequ_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               ap: *const c_double_complex, s: *mut c_double, scond: *mut c_double,
                               amax: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_spprfs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               ap: *const c_float, afp: *const c_float, b: *const c_float,
                               ldb: c_int, x: *mut c_float, ldx: c_int, ferr: *mut c_float,
                               berr: *mut c_float, work: *mut c_float, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dpprfs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               ap: *const c_double, afp: *const c_double, b: *const c_double,
                               ldb: c_int, x: *mut c_double, ldx: c_int, ferr: *mut c_double,
                               berr: *mut c_double, work: *mut c_double, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cpprfs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               ap: *const c_float_complex, afp: *const c_float_complex,
                               b: *const c_float_complex, ldb: c_int, x: *mut c_float_complex,
                               ldx: c_int, ferr: *mut c_float, berr: *mut c_float,
                               work: *mut c_float_complex, rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zpprfs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               ap: *const c_double_complex, afp: *const c_double_complex,
                               b: *const c_double_complex, ldb: c_int, x: *mut c_double_complex,
                               ldx: c_int, ferr: *mut c_double, berr: *mut c_double,
                               work: *mut c_double_complex, rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sppsv_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                              ap: *mut c_float, b: *mut c_float, ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_dppsv_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                              ap: *mut c_double, b: *mut c_double, ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_cppsv_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                              ap: *mut c_float_complex, b: *mut c_float_complex, ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_zppsv_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                              ap: *mut c_double_complex, b: *mut c_double_complex, ldb: c_int)
                              -> c_int;

    pub fn LAPACKE_sppsvx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                               nrhs: c_int, ap: *mut c_float, afp: *mut c_float,
                               equed: *mut c_char, s: *mut c_float, b: *mut c_float, ldb: c_int,
                               x: *mut c_float, ldx: c_int, rcond: *mut c_float,
                               ferr: *mut c_float, berr: *mut c_float, work: *mut c_float,
                               iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dppsvx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                               nrhs: c_int, ap: *mut c_double, afp: *mut c_double,
                               equed: *mut c_char, s: *mut c_double, b: *mut c_double, ldb: c_int,
                               x: *mut c_double, ldx: c_int, rcond: *mut c_double,
                               ferr: *mut c_double, berr: *mut c_double, work: *mut c_double,
                               iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cppsvx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                               nrhs: c_int, ap: *mut c_float_complex, afp: *mut c_float_complex,
                               equed: *mut c_char, s: *mut c_float, b: *mut c_float_complex,
                               ldb: c_int, x: *mut c_float_complex, ldx: c_int,
                               rcond: *mut c_float, ferr: *mut c_float, berr: *mut c_float,
                               work: *mut c_float_complex, rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zppsvx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                               nrhs: c_int, ap: *mut c_double_complex, afp: *mut c_double_complex,
                               equed: *mut c_char, s: *mut c_double, b: *mut c_double_complex,
                               ldb: c_int, x: *mut c_double_complex, ldx: c_int,
                               rcond: *mut c_double, ferr: *mut c_double, berr: *mut c_double,
                               work: *mut c_double_complex, rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_spptrf_work(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dpptrf_work(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_cpptrf_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               ap: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zpptrf_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               ap: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_spptri_work(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dpptri_work(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_cpptri_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               ap: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zpptri_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               ap: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_spptrs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               ap: *const c_float, b: *mut c_float, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_dpptrs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               ap: *const c_double, b: *mut c_double, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_cpptrs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               ap: *const c_float_complex, b: *mut c_float_complex, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_zpptrs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               ap: *const c_double_complex, b: *mut c_double_complex, ldb: c_int)
                               -> c_int;

    pub fn LAPACKE_spstrf_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float,
                               lda: c_int, piv: *mut c_int, rank: *mut c_int, tol: c_float,
                               work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dpstrf_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double,
                               lda: c_int, piv: *mut c_int, rank: *mut c_int, tol: c_double,
                               work: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_cpstrf_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *mut c_float_complex, lda: c_int, piv: *mut c_int,
                               rank: *mut c_int, tol: c_float, work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zpstrf_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *mut c_double_complex, lda: c_int, piv: *mut c_int,
                               rank: *mut c_int, tol: c_double, work: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sptcon_work(n: c_int, d: *const c_float, e: *const c_float, anorm: c_float,
                               rcond: *mut c_float, work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dptcon_work(n: c_int, d: *const c_double, e: *const c_double, anorm: c_double,
                               rcond: *mut c_double, work: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_cptcon_work(n: c_int, d: *const c_float, e: *const c_float_complex,
                               anorm: c_float, rcond: *mut c_float, work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zptcon_work(n: c_int, d: *const c_double, e: *const c_double_complex,
                               anorm: c_double, rcond: *mut c_double, work: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_spteqr_work(matrix_layout: c_int, compz: c_char, n: c_int, d: *mut c_float,
                               e: *mut c_float, z: *mut c_float, ldz: c_int, work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dpteqr_work(matrix_layout: c_int, compz: c_char, n: c_int, d: *mut c_double,
                               e: *mut c_double, z: *mut c_double, ldz: c_int, work: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_cpteqr_work(matrix_layout: c_int, compz: c_char, n: c_int, d: *mut c_float,
                               e: *mut c_float, z: *mut c_float_complex, ldz: c_int,
                               work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zpteqr_work(matrix_layout: c_int, compz: c_char, n: c_int, d: *mut c_double,
                               e: *mut c_double, z: *mut c_double_complex, ldz: c_int,
                               work: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sptrfs_work(matrix_layout: c_int, n: c_int, nrhs: c_int, d: *const c_float,
                               e: *const c_float, df: *const c_float, ef: *const c_float,
                               b: *const c_float, ldb: c_int, x: *mut c_float, ldx: c_int,
                               ferr: *mut c_float, berr: *mut c_float, work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dptrfs_work(matrix_layout: c_int, n: c_int, nrhs: c_int, d: *const c_double,
                               e: *const c_double, df: *const c_double, ef: *const c_double,
                               b: *const c_double, ldb: c_int, x: *mut c_double, ldx: c_int,
                               ferr: *mut c_double, berr: *mut c_double, work: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_cptrfs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               d: *const c_float, e: *const c_float_complex, df: *const c_float,
                               ef: *const c_float_complex, b: *const c_float_complex, ldb: c_int,
                               x: *mut c_float_complex, ldx: c_int, ferr: *mut c_float,
                               berr: *mut c_float, work: *mut c_float_complex, rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zptrfs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               d: *const c_double, e: *const c_double_complex, df: *const c_double,
                               ef: *const c_double_complex, b: *const c_double_complex, ldb: c_int,
                               x: *mut c_double_complex, ldx: c_int, ferr: *mut c_double,
                               berr: *mut c_double, work: *mut c_double_complex,
                               rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sptsv_work(matrix_layout: c_int, n: c_int, nrhs: c_int, d: *mut c_float,
                              e: *mut c_float, b: *mut c_float, ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_dptsv_work(matrix_layout: c_int, n: c_int, nrhs: c_int, d: *mut c_double,
                              e: *mut c_double, b: *mut c_double, ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_cptsv_work(matrix_layout: c_int, n: c_int, nrhs: c_int, d: *mut c_float,
                              e: *mut c_float_complex, b: *mut c_float_complex, ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_zptsv_work(matrix_layout: c_int, n: c_int, nrhs: c_int, d: *mut c_double,
                              e: *mut c_double_complex, b: *mut c_double_complex, ldb: c_int)
                              -> c_int;

    pub fn LAPACKE_sptsvx_work(matrix_layout: c_int, fact: c_char, n: c_int, nrhs: c_int,
                               d: *const c_float, e: *const c_float, df: *mut c_float,
                               ef: *mut c_float, b: *const c_float, ldb: c_int, x: *mut c_float,
                               ldx: c_int, rcond: *mut c_float, ferr: *mut c_float,
                               berr: *mut c_float, work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dptsvx_work(matrix_layout: c_int, fact: c_char, n: c_int, nrhs: c_int,
                               d: *const c_double, e: *const c_double, df: *mut c_double,
                               ef: *mut c_double, b: *const c_double, ldb: c_int, x: *mut c_double,
                               ldx: c_int, rcond: *mut c_double, ferr: *mut c_double,
                               berr: *mut c_double, work: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_cptsvx_work(matrix_layout: c_int, fact: c_char, n: c_int, nrhs: c_int,
                               d: *const c_float, e: *const c_float_complex, df: *mut c_float,
                               ef: *mut c_float_complex, b: *const c_float_complex, ldb: c_int,
                               x: *mut c_float_complex, ldx: c_int, rcond: *mut c_float,
                               ferr: *mut c_float, berr: *mut c_float, work: *mut c_float_complex,
                               rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zptsvx_work(matrix_layout: c_int, fact: c_char, n: c_int, nrhs: c_int,
                               d: *const c_double, e: *const c_double_complex, df: *mut c_double,
                               ef: *mut c_double_complex, b: *const c_double_complex, ldb: c_int,
                               x: *mut c_double_complex, ldx: c_int, rcond: *mut c_double,
                               ferr: *mut c_double, berr: *mut c_double,
                               work: *mut c_double_complex, rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_spttrf_work(n: c_int, d: *mut c_float, e: *mut c_float) -> c_int;
    pub fn LAPACKE_dpttrf_work(n: c_int, d: *mut c_double, e: *mut c_double) -> c_int;
    pub fn LAPACKE_cpttrf_work(n: c_int, d: *mut c_float, e: *mut c_float_complex) -> c_int;
    pub fn LAPACKE_zpttrf_work(n: c_int, d: *mut c_double, e: *mut c_double_complex) -> c_int;

    pub fn LAPACKE_spttrs_work(matrix_layout: c_int, n: c_int, nrhs: c_int, d: *const c_float,
                               e: *const c_float, b: *mut c_float, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_dpttrs_work(matrix_layout: c_int, n: c_int, nrhs: c_int, d: *const c_double,
                               e: *const c_double, b: *mut c_double, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_cpttrs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               d: *const c_float, e: *const c_float_complex,
                               b: *mut c_float_complex, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_zpttrs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               d: *const c_double, e: *const c_double_complex,
                               b: *mut c_double_complex, ldb: c_int)
                               -> c_int;

    pub fn LAPACKE_ssbev_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                              kd: c_int, ab: *mut c_float, ldab: c_int, w: *mut c_float,
                              z: *mut c_float, ldz: c_int, work: *mut c_float)
                              -> c_int;
    pub fn LAPACKE_dsbev_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                              kd: c_int, ab: *mut c_double, ldab: c_int, w: *mut c_double,
                              z: *mut c_double, ldz: c_int, work: *mut c_double)
                              -> c_int;

    pub fn LAPACKE_ssbevd_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                               kd: c_int, ab: *mut c_float, ldab: c_int, w: *mut c_float,
                               z: *mut c_float, ldz: c_int, work: *mut c_float, lwork: c_int,
                               iwork: *mut c_int, liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dsbevd_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                               kd: c_int, ab: *mut c_double, ldab: c_int, w: *mut c_double,
                               z: *mut c_double, ldz: c_int, work: *mut c_double, lwork: c_int,
                               iwork: *mut c_int, liwork: c_int)
                               -> c_int;

    pub fn LAPACKE_ssbevx_work(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                               n: c_int, kd: c_int, ab: *mut c_float, ldab: c_int, q: *mut c_float,
                               ldq: c_int, vl: c_float, vu: c_float, il: c_int, iu: c_int,
                               abstol: c_float, m: *mut c_int, w: *mut c_float, z: *mut c_float,
                               ldz: c_int, work: *mut c_float, iwork: *mut c_int,
                               ifail: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dsbevx_work(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                               n: c_int, kd: c_int, ab: *mut c_double, ldab: c_int,
                               q: *mut c_double, ldq: c_int, vl: c_double, vu: c_double, il: c_int,
                               iu: c_int, abstol: c_double, m: *mut c_int, w: *mut c_double,
                               z: *mut c_double, ldz: c_int, work: *mut c_double,
                               iwork: *mut c_int, ifail: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_ssbgst_work(matrix_layout: c_int, vect: c_char, uplo: c_char, n: c_int,
                               ka: c_int, kb: c_int, ab: *mut c_float, ldab: c_int,
                               bb: *const c_float, ldbb: c_int, x: *mut c_float, ldx: c_int,
                               work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dsbgst_work(matrix_layout: c_int, vect: c_char, uplo: c_char, n: c_int,
                               ka: c_int, kb: c_int, ab: *mut c_double, ldab: c_int,
                               bb: *const c_double, ldbb: c_int, x: *mut c_double, ldx: c_int,
                               work: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_ssbgv_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                              ka: c_int, kb: c_int, ab: *mut c_float, ldab: c_int,
                              bb: *mut c_float, ldbb: c_int, w: *mut c_float, z: *mut c_float,
                              ldz: c_int, work: *mut c_float)
                              -> c_int;
    pub fn LAPACKE_dsbgv_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                              ka: c_int, kb: c_int, ab: *mut c_double, ldab: c_int,
                              bb: *mut c_double, ldbb: c_int, w: *mut c_double, z: *mut c_double,
                              ldz: c_int, work: *mut c_double)
                              -> c_int;

    pub fn LAPACKE_ssbgvd_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                               ka: c_int, kb: c_int, ab: *mut c_float, ldab: c_int,
                               bb: *mut c_float, ldbb: c_int, w: *mut c_float, z: *mut c_float,
                               ldz: c_int, work: *mut c_float, lwork: c_int, iwork: *mut c_int,
                               liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dsbgvd_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                               ka: c_int, kb: c_int, ab: *mut c_double, ldab: c_int,
                               bb: *mut c_double, ldbb: c_int, w: *mut c_double, z: *mut c_double,
                               ldz: c_int, work: *mut c_double, lwork: c_int, iwork: *mut c_int,
                               liwork: c_int)
                               -> c_int;

    pub fn LAPACKE_ssbgvx_work(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                               n: c_int, ka: c_int, kb: c_int, ab: *mut c_float, ldab: c_int,
                               bb: *mut c_float, ldbb: c_int, q: *mut c_float, ldq: c_int,
                               vl: c_float, vu: c_float, il: c_int, iu: c_int, abstol: c_float,
                               m: *mut c_int, w: *mut c_float, z: *mut c_float, ldz: c_int,
                               work: *mut c_float, iwork: *mut c_int, ifail: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dsbgvx_work(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                               n: c_int, ka: c_int, kb: c_int, ab: *mut c_double, ldab: c_int,
                               bb: *mut c_double, ldbb: c_int, q: *mut c_double, ldq: c_int,
                               vl: c_double, vu: c_double, il: c_int, iu: c_int, abstol: c_double,
                               m: *mut c_int, w: *mut c_double, z: *mut c_double, ldz: c_int,
                               work: *mut c_double, iwork: *mut c_int, ifail: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_ssbtrd_work(matrix_layout: c_int, vect: c_char, uplo: c_char, n: c_int,
                               kd: c_int, ab: *mut c_float, ldab: c_int, d: *mut c_float,
                               e: *mut c_float, q: *mut c_float, ldq: c_int, work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dsbtrd_work(matrix_layout: c_int, vect: c_char, uplo: c_char, n: c_int,
                               kd: c_int, ab: *mut c_double, ldab: c_int, d: *mut c_double,
                               e: *mut c_double, q: *mut c_double, ldq: c_int, work: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_ssfrk_work(matrix_layout: c_int, transr: c_char, uplo: c_char, trans: c_char,
                              n: c_int, k: c_int, alpha: c_float, a: *const c_float, lda: c_int,
                              beta: c_float, c: *mut c_float)
                              -> c_int;
    pub fn LAPACKE_dsfrk_work(matrix_layout: c_int, transr: c_char, uplo: c_char, trans: c_char,
                              n: c_int, k: c_int, alpha: c_double, a: *const c_double, lda: c_int,
                              beta: c_double, c: *mut c_double)
                              -> c_int;

    pub fn LAPACKE_sspcon_work(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *const c_float,
                               ipiv: *const c_int, anorm: c_float, rcond: *mut c_float,
                               work: *mut c_float, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dspcon_work(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *const c_double,
                               ipiv: *const c_int, anorm: c_double, rcond: *mut c_double,
                               work: *mut c_double, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cspcon_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               ap: *const c_float_complex, ipiv: *const c_int, anorm: c_float,
                               rcond: *mut c_float, work: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zspcon_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               ap: *const c_double_complex, ipiv: *const c_int, anorm: c_double,
                               rcond: *mut c_double, work: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_sspev_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                              ap: *mut c_float, w: *mut c_float, z: *mut c_float, ldz: c_int,
                              work: *mut c_float)
                              -> c_int;
    pub fn LAPACKE_dspev_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                              ap: *mut c_double, w: *mut c_double, z: *mut c_double, ldz: c_int,
                              work: *mut c_double)
                              -> c_int;

    pub fn LAPACKE_sspevd_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                               ap: *mut c_float, w: *mut c_float, z: *mut c_float, ldz: c_int,
                               work: *mut c_float, lwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dspevd_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                               ap: *mut c_double, w: *mut c_double, z: *mut c_double, ldz: c_int,
                               work: *mut c_double, lwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sspevx_work(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                               n: c_int, ap: *mut c_float, vl: c_float, vu: c_float, il: c_int,
                               iu: c_int, abstol: c_float, m: *mut c_int, w: *mut c_float,
                               z: *mut c_float, ldz: c_int, work: *mut c_float, iwork: *mut c_int,
                               ifail: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dspevx_work(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                               n: c_int, ap: *mut c_double, vl: c_double, vu: c_double, il: c_int,
                               iu: c_int, abstol: c_double, m: *mut c_int, w: *mut c_double,
                               z: *mut c_double, ldz: c_int, work: *mut c_double,
                               iwork: *mut c_int, ifail: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_sspgst_work(matrix_layout: c_int, itype: c_int, uplo: c_char, n: c_int,
                               ap: *mut c_float, bp: *const c_float)
                               -> c_int;
    pub fn LAPACKE_dspgst_work(matrix_layout: c_int, itype: c_int, uplo: c_char, n: c_int,
                               ap: *mut c_double, bp: *const c_double)
                               -> c_int;

    pub fn LAPACKE_sspgv_work(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char,
                              n: c_int, ap: *mut c_float, bp: *mut c_float, w: *mut c_float,
                              z: *mut c_float, ldz: c_int, work: *mut c_float)
                              -> c_int;
    pub fn LAPACKE_dspgv_work(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char,
                              n: c_int, ap: *mut c_double, bp: *mut c_double, w: *mut c_double,
                              z: *mut c_double, ldz: c_int, work: *mut c_double)
                              -> c_int;

    pub fn LAPACKE_sspgvd_work(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char,
                               n: c_int, ap: *mut c_float, bp: *mut c_float, w: *mut c_float,
                               z: *mut c_float, ldz: c_int, work: *mut c_float, lwork: c_int,
                               iwork: *mut c_int, liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dspgvd_work(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char,
                               n: c_int, ap: *mut c_double, bp: *mut c_double, w: *mut c_double,
                               z: *mut c_double, ldz: c_int, work: *mut c_double, lwork: c_int,
                               iwork: *mut c_int, liwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sspgvx_work(matrix_layout: c_int, itype: c_int, jobz: c_char, range: c_char,
                               uplo: c_char, n: c_int, ap: *mut c_float, bp: *mut c_float,
                               vl: c_float, vu: c_float, il: c_int, iu: c_int, abstol: c_float,
                               m: *mut c_int, w: *mut c_float, z: *mut c_float, ldz: c_int,
                               work: *mut c_float, iwork: *mut c_int, ifail: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dspgvx_work(matrix_layout: c_int, itype: c_int, jobz: c_char, range: c_char,
                               uplo: c_char, n: c_int, ap: *mut c_double, bp: *mut c_double,
                               vl: c_double, vu: c_double, il: c_int, iu: c_int, abstol: c_double,
                               m: *mut c_int, w: *mut c_double, z: *mut c_double, ldz: c_int,
                               work: *mut c_double, iwork: *mut c_int, ifail: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_ssprfs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               ap: *const c_float, afp: *const c_float, ipiv: *const c_int,
                               b: *const c_float, ldb: c_int, x: *mut c_float, ldx: c_int,
                               ferr: *mut c_float, berr: *mut c_float, work: *mut c_float,
                               iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dsprfs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               ap: *const c_double, afp: *const c_double, ipiv: *const c_int,
                               b: *const c_double, ldb: c_int, x: *mut c_double, ldx: c_int,
                               ferr: *mut c_double, berr: *mut c_double, work: *mut c_double,
                               iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_csprfs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               ap: *const c_float_complex, afp: *const c_float_complex,
                               ipiv: *const c_int, b: *const c_float_complex, ldb: c_int,
                               x: *mut c_float_complex, ldx: c_int, ferr: *mut c_float,
                               berr: *mut c_float, work: *mut c_float_complex, rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zsprfs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               ap: *const c_double_complex, afp: *const c_double_complex,
                               ipiv: *const c_int, b: *const c_double_complex, ldb: c_int,
                               x: *mut c_double_complex, ldx: c_int, ferr: *mut c_double,
                               berr: *mut c_double, work: *mut c_double_complex,
                               rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_sspsv_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                              ap: *mut c_float, ipiv: *mut c_int, b: *mut c_float, ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_dspsv_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                              ap: *mut c_double, ipiv: *mut c_int, b: *mut c_double, ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_cspsv_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                              ap: *mut c_float_complex, ipiv: *mut c_int, b: *mut c_float_complex,
                              ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_zspsv_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                              ap: *mut c_double_complex, ipiv: *mut c_int,
                              b: *mut c_double_complex, ldb: c_int)
                              -> c_int;

    pub fn LAPACKE_sspsvx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                               nrhs: c_int, ap: *const c_float, afp: *mut c_float,
                               ipiv: *mut c_int, b: *const c_float, ldb: c_int, x: *mut c_float,
                               ldx: c_int, rcond: *mut c_float, ferr: *mut c_float,
                               berr: *mut c_float, work: *mut c_float, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dspsvx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                               nrhs: c_int, ap: *const c_double, afp: *mut c_double,
                               ipiv: *mut c_int, b: *const c_double, ldb: c_int, x: *mut c_double,
                               ldx: c_int, rcond: *mut c_double, ferr: *mut c_double,
                               berr: *mut c_double, work: *mut c_double, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cspsvx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                               nrhs: c_int, ap: *const c_float_complex, afp: *mut c_float_complex,
                               ipiv: *mut c_int, b: *const c_float_complex, ldb: c_int,
                               x: *mut c_float_complex, ldx: c_int, rcond: *mut c_float,
                               ferr: *mut c_float, berr: *mut c_float, work: *mut c_float_complex,
                               rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zspsvx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                               nrhs: c_int, ap: *const c_double_complex,
                               afp: *mut c_double_complex, ipiv: *mut c_int,
                               b: *const c_double_complex, ldb: c_int, x: *mut c_double_complex,
                               ldx: c_int, rcond: *mut c_double, ferr: *mut c_double,
                               berr: *mut c_double, work: *mut c_double_complex,
                               rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_ssptrd_work(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_float,
                               d: *mut c_float, e: *mut c_float, tau: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dsptrd_work(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_double,
                               d: *mut c_double, e: *mut c_double, tau: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_ssptrf_work(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_float,
                               ipiv: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dsptrf_work(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_double,
                               ipiv: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_csptrf_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               ap: *mut c_float_complex, ipiv: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zsptrf_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               ap: *mut c_double_complex, ipiv: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_ssptri_work(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_float,
                               ipiv: *const c_int, work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dsptri_work(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *mut c_double,
                               ipiv: *const c_int, work: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_csptri_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               ap: *mut c_float_complex, ipiv: *const c_int,
                               work: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zsptri_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               ap: *mut c_double_complex, ipiv: *const c_int,
                               work: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_ssptrs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               ap: *const c_float, ipiv: *const c_int, b: *mut c_float, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_dsptrs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               ap: *const c_double, ipiv: *const c_int, b: *mut c_double,
                               ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_csptrs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               ap: *const c_float_complex, ipiv: *const c_int,
                               b: *mut c_float_complex, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_zsptrs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               ap: *const c_double_complex, ipiv: *const c_int,
                               b: *mut c_double_complex, ldb: c_int)
                               -> c_int;

    pub fn LAPACKE_sstebz_work(range: c_char, order: c_char, n: c_int, vl: c_float, vu: c_float,
                               il: c_int, iu: c_int, abstol: c_float, d: *const c_float,
                               e: *const c_float, m: *mut c_int, nsplit: *mut c_int,
                               w: *mut c_float, iblock: *mut c_int, isplit: *mut c_int,
                               work: *mut c_float, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dstebz_work(range: c_char, order: c_char, n: c_int, vl: c_double, vu: c_double,
                               il: c_int, iu: c_int, abstol: c_double, d: *const c_double,
                               e: *const c_double, m: *mut c_int, nsplit: *mut c_int,
                               w: *mut c_double, iblock: *mut c_int, isplit: *mut c_int,
                               work: *mut c_double, iwork: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_sstedc_work(matrix_layout: c_int, compz: c_char, n: c_int, d: *mut c_float,
                               e: *mut c_float, z: *mut c_float, ldz: c_int, work: *mut c_float,
                               lwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dstedc_work(matrix_layout: c_int, compz: c_char, n: c_int, d: *mut c_double,
                               e: *mut c_double, z: *mut c_double, ldz: c_int, work: *mut c_double,
                               lwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_cstedc_work(matrix_layout: c_int, compz: c_char, n: c_int, d: *mut c_float,
                               e: *mut c_float, z: *mut c_float_complex, ldz: c_int,
                               work: *mut c_float_complex, lwork: c_int, rwork: *mut c_float,
                               lrwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zstedc_work(matrix_layout: c_int, compz: c_char, n: c_int, d: *mut c_double,
                               e: *mut c_double, z: *mut c_double_complex, ldz: c_int,
                               work: *mut c_double_complex, lwork: c_int, rwork: *mut c_double,
                               lrwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sstegr_work(matrix_layout: c_int, jobz: c_char, range: c_char, n: c_int,
                               d: *mut c_float, e: *mut c_float, vl: c_float, vu: c_float,
                               il: c_int, iu: c_int, abstol: c_float, m: *mut c_int,
                               w: *mut c_float, z: *mut c_float, ldz: c_int, isuppz: *mut c_int,
                               work: *mut c_float, lwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dstegr_work(matrix_layout: c_int, jobz: c_char, range: c_char, n: c_int,
                               d: *mut c_double, e: *mut c_double, vl: c_double, vu: c_double,
                               il: c_int, iu: c_int, abstol: c_double, m: *mut c_int,
                               w: *mut c_double, z: *mut c_double, ldz: c_int, isuppz: *mut c_int,
                               work: *mut c_double, lwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_cstegr_work(matrix_layout: c_int, jobz: c_char, range: c_char, n: c_int,
                               d: *mut c_float, e: *mut c_float, vl: c_float, vu: c_float,
                               il: c_int, iu: c_int, abstol: c_float, m: *mut c_int,
                               w: *mut c_float, z: *mut c_float_complex, ldz: c_int,
                               isuppz: *mut c_int, work: *mut c_float, lwork: c_int,
                               iwork: *mut c_int, liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zstegr_work(matrix_layout: c_int, jobz: c_char, range: c_char, n: c_int,
                               d: *mut c_double, e: *mut c_double, vl: c_double, vu: c_double,
                               il: c_int, iu: c_int, abstol: c_double, m: *mut c_int,
                               w: *mut c_double, z: *mut c_double_complex, ldz: c_int,
                               isuppz: *mut c_int, work: *mut c_double, lwork: c_int,
                               iwork: *mut c_int, liwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sstein_work(matrix_layout: c_int, n: c_int, d: *const c_float,
                               e: *const c_float, m: c_int, w: *const c_float,
                               iblock: *const c_int, isplit: *const c_int, z: *mut c_float,
                               ldz: c_int, work: *mut c_float, iwork: *mut c_int,
                               ifailv: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dstein_work(matrix_layout: c_int, n: c_int, d: *const c_double,
                               e: *const c_double, m: c_int, w: *const c_double,
                               iblock: *const c_int, isplit: *const c_int, z: *mut c_double,
                               ldz: c_int, work: *mut c_double, iwork: *mut c_int,
                               ifailv: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cstein_work(matrix_layout: c_int, n: c_int, d: *const c_float,
                               e: *const c_float, m: c_int, w: *const c_float,
                               iblock: *const c_int, isplit: *const c_int, z: *mut c_float_complex,
                               ldz: c_int, work: *mut c_float, iwork: *mut c_int,
                               ifailv: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zstein_work(matrix_layout: c_int, n: c_int, d: *const c_double,
                               e: *const c_double, m: c_int, w: *const c_double,
                               iblock: *const c_int, isplit: *const c_int,
                               z: *mut c_double_complex, ldz: c_int, work: *mut c_double,
                               iwork: *mut c_int, ifailv: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_sstemr_work(matrix_layout: c_int, jobz: c_char, range: c_char, n: c_int,
                               d: *mut c_float, e: *mut c_float, vl: c_float, vu: c_float,
                               il: c_int, iu: c_int, m: *mut c_int, w: *mut c_float,
                               z: *mut c_float, ldz: c_int, nzc: c_int, isuppz: *mut c_int,
                               tryrac: *mut c_int, work: *mut c_float, lwork: c_int,
                               iwork: *mut c_int, liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dstemr_work(matrix_layout: c_int, jobz: c_char, range: c_char, n: c_int,
                               d: *mut c_double, e: *mut c_double, vl: c_double, vu: c_double,
                               il: c_int, iu: c_int, m: *mut c_int, w: *mut c_double,
                               z: *mut c_double, ldz: c_int, nzc: c_int, isuppz: *mut c_int,
                               tryrac: *mut c_int, work: *mut c_double, lwork: c_int,
                               iwork: *mut c_int, liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_cstemr_work(matrix_layout: c_int, jobz: c_char, range: c_char, n: c_int,
                               d: *mut c_float, e: *mut c_float, vl: c_float, vu: c_float,
                               il: c_int, iu: c_int, m: *mut c_int, w: *mut c_float,
                               z: *mut c_float_complex, ldz: c_int, nzc: c_int, isuppz: *mut c_int,
                               tryrac: *mut c_int, work: *mut c_float, lwork: c_int,
                               iwork: *mut c_int, liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zstemr_work(matrix_layout: c_int, jobz: c_char, range: c_char, n: c_int,
                               d: *mut c_double, e: *mut c_double, vl: c_double, vu: c_double,
                               il: c_int, iu: c_int, m: *mut c_int, w: *mut c_double,
                               z: *mut c_double_complex, ldz: c_int, nzc: c_int,
                               isuppz: *mut c_int, tryrac: *mut c_int, work: *mut c_double,
                               lwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;

    pub fn LAPACKE_ssteqr_work(matrix_layout: c_int, compz: c_char, n: c_int, d: *mut c_float,
                               e: *mut c_float, z: *mut c_float, ldz: c_int, work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dsteqr_work(matrix_layout: c_int, compz: c_char, n: c_int, d: *mut c_double,
                               e: *mut c_double, z: *mut c_double, ldz: c_int, work: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_csteqr_work(matrix_layout: c_int, compz: c_char, n: c_int, d: *mut c_float,
                               e: *mut c_float, z: *mut c_float_complex, ldz: c_int,
                               work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zsteqr_work(matrix_layout: c_int, compz: c_char, n: c_int, d: *mut c_double,
                               e: *mut c_double, z: *mut c_double_complex, ldz: c_int,
                               work: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_ssterf_work(n: c_int, d: *mut c_float, e: *mut c_float) -> c_int;
    pub fn LAPACKE_dsterf_work(n: c_int, d: *mut c_double, e: *mut c_double) -> c_int;

    pub fn LAPACKE_sstev_work(matrix_layout: c_int, jobz: c_char, n: c_int, d: *mut c_float,
                              e: *mut c_float, z: *mut c_float, ldz: c_int, work: *mut c_float)
                              -> c_int;
    pub fn LAPACKE_dstev_work(matrix_layout: c_int, jobz: c_char, n: c_int, d: *mut c_double,
                              e: *mut c_double, z: *mut c_double, ldz: c_int, work: *mut c_double)
                              -> c_int;

    pub fn LAPACKE_sstevd_work(matrix_layout: c_int, jobz: c_char, n: c_int, d: *mut c_float,
                               e: *mut c_float, z: *mut c_float, ldz: c_int, work: *mut c_float,
                               lwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dstevd_work(matrix_layout: c_int, jobz: c_char, n: c_int, d: *mut c_double,
                               e: *mut c_double, z: *mut c_double, ldz: c_int, work: *mut c_double,
                               lwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sstevr_work(matrix_layout: c_int, jobz: c_char, range: c_char, n: c_int,
                               d: *mut c_float, e: *mut c_float, vl: c_float, vu: c_float,
                               il: c_int, iu: c_int, abstol: c_float, m: *mut c_int,
                               w: *mut c_float, z: *mut c_float, ldz: c_int, isuppz: *mut c_int,
                               work: *mut c_float, lwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dstevr_work(matrix_layout: c_int, jobz: c_char, range: c_char, n: c_int,
                               d: *mut c_double, e: *mut c_double, vl: c_double, vu: c_double,
                               il: c_int, iu: c_int, abstol: c_double, m: *mut c_int,
                               w: *mut c_double, z: *mut c_double, ldz: c_int, isuppz: *mut c_int,
                               work: *mut c_double, lwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;

    pub fn LAPACKE_sstevx_work(matrix_layout: c_int, jobz: c_char, range: c_char, n: c_int,
                               d: *mut c_float, e: *mut c_float, vl: c_float, vu: c_float,
                               il: c_int, iu: c_int, abstol: c_float, m: *mut c_int,
                               w: *mut c_float, z: *mut c_float, ldz: c_int, work: *mut c_float,
                               iwork: *mut c_int, ifail: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dstevx_work(matrix_layout: c_int, jobz: c_char, range: c_char, n: c_int,
                               d: *mut c_double, e: *mut c_double, vl: c_double, vu: c_double,
                               il: c_int, iu: c_int, abstol: c_double, m: *mut c_int,
                               w: *mut c_double, z: *mut c_double, ldz: c_int, work: *mut c_double,
                               iwork: *mut c_int, ifail: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_ssycon_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *const c_float,
                               lda: c_int, ipiv: *const c_int, anorm: c_float, rcond: *mut c_float,
                               work: *mut c_float, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dsycon_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *const c_double,
                               lda: c_int, ipiv: *const c_int, anorm: c_double,
                               rcond: *mut c_double, work: *mut c_double, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_csycon_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *const c_float_complex, lda: c_int, ipiv: *const c_int,
                               anorm: c_float, rcond: *mut c_float, work: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zsycon_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *const c_double_complex, lda: c_int, ipiv: *const c_int,
                               anorm: c_double, rcond: *mut c_double, work: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_ssyequb_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *const c_float,
                                lda: c_int, s: *mut c_float, scond: *mut c_float,
                                amax: *mut c_float, work: *mut c_float)
                                -> c_int;
    pub fn LAPACKE_dsyequb_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *const c_double,
                                lda: c_int, s: *mut c_double, scond: *mut c_double,
                                amax: *mut c_double, work: *mut c_double)
                                -> c_int;
    pub fn LAPACKE_csyequb_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                                a: *const c_float_complex, lda: c_int, s: *mut c_float,
                                scond: *mut c_float, amax: *mut c_float,
                                work: *mut c_float_complex)
                                -> c_int;
    pub fn LAPACKE_zsyequb_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                                a: *const c_double_complex, lda: c_int, s: *mut c_double,
                                scond: *mut c_double, amax: *mut c_double,
                                work: *mut c_double_complex)
                                -> c_int;

    pub fn LAPACKE_ssyev_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                              a: *mut c_float, lda: c_int, w: *mut c_float, work: *mut c_float,
                              lwork: c_int)
                              -> c_int;
    pub fn LAPACKE_dsyev_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                              a: *mut c_double, lda: c_int, w: *mut c_double, work: *mut c_double,
                              lwork: c_int)
                              -> c_int;

    pub fn LAPACKE_ssyevd_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                               a: *mut c_float, lda: c_int, w: *mut c_float, work: *mut c_float,
                               lwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dsyevd_work(matrix_layout: c_int, jobz: c_char, uplo: c_char, n: c_int,
                               a: *mut c_double, lda: c_int, w: *mut c_double, work: *mut c_double,
                               lwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;

    pub fn LAPACKE_ssyevr_work(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                               n: c_int, a: *mut c_float, lda: c_int, vl: c_float, vu: c_float,
                               il: c_int, iu: c_int, abstol: c_float, m: *mut c_int,
                               w: *mut c_float, z: *mut c_float, ldz: c_int, isuppz: *mut c_int,
                               work: *mut c_float, lwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dsyevr_work(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                               n: c_int, a: *mut c_double, lda: c_int, vl: c_double, vu: c_double,
                               il: c_int, iu: c_int, abstol: c_double, m: *mut c_int,
                               w: *mut c_double, z: *mut c_double, ldz: c_int, isuppz: *mut c_int,
                               work: *mut c_double, lwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;

    pub fn LAPACKE_ssyevx_work(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                               n: c_int, a: *mut c_float, lda: c_int, vl: c_float, vu: c_float,
                               il: c_int, iu: c_int, abstol: c_float, m: *mut c_int,
                               w: *mut c_float, z: *mut c_float, ldz: c_int, work: *mut c_float,
                               lwork: c_int, iwork: *mut c_int, ifail: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dsyevx_work(matrix_layout: c_int, jobz: c_char, range: c_char, uplo: c_char,
                               n: c_int, a: *mut c_double, lda: c_int, vl: c_double, vu: c_double,
                               il: c_int, iu: c_int, abstol: c_double, m: *mut c_int,
                               w: *mut c_double, z: *mut c_double, ldz: c_int, work: *mut c_double,
                               lwork: c_int, iwork: *mut c_int, ifail: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_ssygst_work(matrix_layout: c_int, itype: c_int, uplo: c_char, n: c_int,
                               a: *mut c_float, lda: c_int, b: *const c_float, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_dsygst_work(matrix_layout: c_int, itype: c_int, uplo: c_char, n: c_int,
                               a: *mut c_double, lda: c_int, b: *const c_double, ldb: c_int)
                               -> c_int;

    pub fn LAPACKE_ssygv_work(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char,
                              n: c_int, a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int,
                              w: *mut c_float, work: *mut c_float, lwork: c_int)
                              -> c_int;
    pub fn LAPACKE_dsygv_work(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char,
                              n: c_int, a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int,
                              w: *mut c_double, work: *mut c_double, lwork: c_int)
                              -> c_int;

    pub fn LAPACKE_ssygvd_work(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char,
                               n: c_int, a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int,
                               w: *mut c_float, work: *mut c_float, lwork: c_int,
                               iwork: *mut c_int, liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dsygvd_work(matrix_layout: c_int, itype: c_int, jobz: c_char, uplo: c_char,
                               n: c_int, a: *mut c_double, lda: c_int, b: *mut c_double,
                               ldb: c_int, w: *mut c_double, work: *mut c_double, lwork: c_int,
                               iwork: *mut c_int, liwork: c_int)
                               -> c_int;

    pub fn LAPACKE_ssygvx_work(matrix_layout: c_int, itype: c_int, jobz: c_char, range: c_char,
                               uplo: c_char, n: c_int, a: *mut c_float, lda: c_int,
                               b: *mut c_float, ldb: c_int, vl: c_float, vu: c_float, il: c_int,
                               iu: c_int, abstol: c_float, m: *mut c_int, w: *mut c_float,
                               z: *mut c_float, ldz: c_int, work: *mut c_float, lwork: c_int,
                               iwork: *mut c_int, ifail: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dsygvx_work(matrix_layout: c_int, itype: c_int, jobz: c_char, range: c_char,
                               uplo: c_char, n: c_int, a: *mut c_double, lda: c_int,
                               b: *mut c_double, ldb: c_int, vl: c_double, vu: c_double, il: c_int,
                               iu: c_int, abstol: c_double, m: *mut c_int, w: *mut c_double,
                               z: *mut c_double, ldz: c_int, work: *mut c_double, lwork: c_int,
                               iwork: *mut c_int, ifail: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_ssyrfs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *const c_float, lda: c_int, af: *const c_float, ldaf: c_int,
                               ipiv: *const c_int, b: *const c_float, ldb: c_int, x: *mut c_float,
                               ldx: c_int, ferr: *mut c_float, berr: *mut c_float,
                               work: *mut c_float, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dsyrfs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *const c_double, lda: c_int, af: *const c_double, ldaf: c_int,
                               ipiv: *const c_int, b: *const c_double, ldb: c_int,
                               x: *mut c_double, ldx: c_int, ferr: *mut c_double,
                               berr: *mut c_double, work: *mut c_double, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_csyrfs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *const c_float_complex, lda: c_int, af: *const c_float_complex,
                               ldaf: c_int, ipiv: *const c_int, b: *const c_float_complex,
                               ldb: c_int, x: *mut c_float_complex, ldx: c_int, ferr: *mut c_float,
                               berr: *mut c_float, work: *mut c_float_complex, rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zsyrfs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *const c_double_complex, lda: c_int, af: *const c_double_complex,
                               ldaf: c_int, ipiv: *const c_int, b: *const c_double_complex,
                               ldb: c_int, x: *mut c_double_complex, ldx: c_int,
                               ferr: *mut c_double, berr: *mut c_double,
                               work: *mut c_double_complex, rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_ssyrfsx_work(matrix_layout: c_int, uplo: c_char, equed: c_char, n: c_int,
                                nrhs: c_int, a: *const c_float, lda: c_int, af: *const c_float,
                                ldaf: c_int, ipiv: *const c_int, s: *const c_float,
                                b: *const c_float, ldb: c_int, x: *mut c_float, ldx: c_int,
                                rcond: *mut c_float, berr: *mut c_float, n_err_bnds: c_int,
                                err_bnds_norm: *mut c_float, err_bnds_comp: *mut c_float,
                                nparams: c_int, params: *mut c_float, work: *mut c_float,
                                iwork: *mut c_int)
                                -> c_int;
    pub fn LAPACKE_dsyrfsx_work(matrix_layout: c_int, uplo: c_char, equed: c_char, n: c_int,
                                nrhs: c_int, a: *const c_double, lda: c_int, af: *const c_double,
                                ldaf: c_int, ipiv: *const c_int, s: *const c_double,
                                b: *const c_double, ldb: c_int, x: *mut c_double, ldx: c_int,
                                rcond: *mut c_double, berr: *mut c_double, n_err_bnds: c_int,
                                err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                                nparams: c_int, params: *mut c_double, work: *mut c_double,
                                iwork: *mut c_int)
                                -> c_int;
    pub fn LAPACKE_csyrfsx_work(matrix_layout: c_int, uplo: c_char, equed: c_char, n: c_int,
                                nrhs: c_int, a: *const c_float_complex, lda: c_int,
                                af: *const c_float_complex, ldaf: c_int, ipiv: *const c_int,
                                s: *const c_float, b: *const c_float_complex, ldb: c_int,
                                x: *mut c_float_complex, ldx: c_int, rcond: *mut c_float,
                                berr: *mut c_float, n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                                err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float,
                                work: *mut c_float_complex, rwork: *mut c_float)
                                -> c_int;
    pub fn LAPACKE_zsyrfsx_work(matrix_layout: c_int, uplo: c_char, equed: c_char, n: c_int,
                                nrhs: c_int, a: *const c_double_complex, lda: c_int,
                                af: *const c_double_complex, ldaf: c_int, ipiv: *const c_int,
                                s: *const c_double, b: *const c_double_complex, ldb: c_int,
                                x: *mut c_double_complex, ldx: c_int, rcond: *mut c_double,
                                berr: *mut c_double, n_err_bnds: c_int,
                                err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                                nparams: c_int, params: *mut c_double, work: *mut c_double_complex,
                                rwork: *mut c_double)
                                -> c_int;

    pub fn LAPACKE_ssysv_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                              a: *mut c_float, lda: c_int, ipiv: *mut c_int, b: *mut c_float,
                              ldb: c_int, work: *mut c_float, lwork: c_int)
                              -> c_int;
    pub fn LAPACKE_dsysv_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                              a: *mut c_double, lda: c_int, ipiv: *mut c_int, b: *mut c_double,
                              ldb: c_int, work: *mut c_double, lwork: c_int)
                              -> c_int;
    pub fn LAPACKE_csysv_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                              a: *mut c_float_complex, lda: c_int, ipiv: *mut c_int,
                              b: *mut c_float_complex, ldb: c_int, work: *mut c_float_complex,
                              lwork: c_int)
                              -> c_int;
    pub fn LAPACKE_zsysv_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                              a: *mut c_double_complex, lda: c_int, ipiv: *mut c_int,
                              b: *mut c_double_complex, ldb: c_int, work: *mut c_double_complex,
                              lwork: c_int)
                              -> c_int;

    pub fn LAPACKE_ssysvx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                               nrhs: c_int, a: *const c_float, lda: c_int, af: *mut c_float,
                               ldaf: c_int, ipiv: *mut c_int, b: *const c_float, ldb: c_int,
                               x: *mut c_float, ldx: c_int, rcond: *mut c_float,
                               ferr: *mut c_float, berr: *mut c_float, work: *mut c_float,
                               lwork: c_int, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dsysvx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                               nrhs: c_int, a: *const c_double, lda: c_int, af: *mut c_double,
                               ldaf: c_int, ipiv: *mut c_int, b: *const c_double, ldb: c_int,
                               x: *mut c_double, ldx: c_int, rcond: *mut c_double,
                               ferr: *mut c_double, berr: *mut c_double, work: *mut c_double,
                               lwork: c_int, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_csysvx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                               nrhs: c_int, a: *const c_float_complex, lda: c_int,
                               af: *mut c_float_complex, ldaf: c_int, ipiv: *mut c_int,
                               b: *const c_float_complex, ldb: c_int, x: *mut c_float_complex,
                               ldx: c_int, rcond: *mut c_float, ferr: *mut c_float,
                               berr: *mut c_float, work: *mut c_float_complex, lwork: c_int,
                               rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_zsysvx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                               nrhs: c_int, a: *const c_double_complex, lda: c_int,
                               af: *mut c_double_complex, ldaf: c_int, ipiv: *mut c_int,
                               b: *const c_double_complex, ldb: c_int, x: *mut c_double_complex,
                               ldx: c_int, rcond: *mut c_double, ferr: *mut c_double,
                               berr: *mut c_double, work: *mut c_double_complex, lwork: c_int,
                               rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_ssysvxx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                                nrhs: c_int, a: *mut c_float, lda: c_int, af: *mut c_float,
                                ldaf: c_int, ipiv: *mut c_int, equed: *mut c_char, s: *mut c_float,
                                b: *mut c_float, ldb: c_int, x: *mut c_float, ldx: c_int,
                                rcond: *mut c_float, rpvgrw: *mut c_float, berr: *mut c_float,
                                n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                                err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float,
                                work: *mut c_float, iwork: *mut c_int)
                                -> c_int;
    pub fn LAPACKE_dsysvxx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                                nrhs: c_int, a: *mut c_double, lda: c_int, af: *mut c_double,
                                ldaf: c_int, ipiv: *mut c_int, equed: *mut c_char,
                                s: *mut c_double, b: *mut c_double, ldb: c_int, x: *mut c_double,
                                ldx: c_int, rcond: *mut c_double, rpvgrw: *mut c_double,
                                berr: *mut c_double, n_err_bnds: c_int,
                                err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                                nparams: c_int, params: *mut c_double, work: *mut c_double,
                                iwork: *mut c_int)
                                -> c_int;
    pub fn LAPACKE_csysvxx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                                nrhs: c_int, a: *mut c_float_complex, lda: c_int,
                                af: *mut c_float_complex, ldaf: c_int, ipiv: *mut c_int,
                                equed: *mut c_char, s: *mut c_float, b: *mut c_float_complex,
                                ldb: c_int, x: *mut c_float_complex, ldx: c_int,
                                rcond: *mut c_float, rpvgrw: *mut c_float, berr: *mut c_float,
                                n_err_bnds: c_int, err_bnds_norm: *mut c_float,
                                err_bnds_comp: *mut c_float, nparams: c_int, params: *mut c_float,
                                work: *mut c_float_complex, rwork: *mut c_float)
                                -> c_int;
    pub fn LAPACKE_zsysvxx_work(matrix_layout: c_int, fact: c_char, uplo: c_char, n: c_int,
                                nrhs: c_int, a: *mut c_double_complex, lda: c_int,
                                af: *mut c_double_complex, ldaf: c_int, ipiv: *mut c_int,
                                equed: *mut c_char, s: *mut c_double, b: *mut c_double_complex,
                                ldb: c_int, x: *mut c_double_complex, ldx: c_int,
                                rcond: *mut c_double, rpvgrw: *mut c_double, berr: *mut c_double,
                                n_err_bnds: c_int, err_bnds_norm: *mut c_double,
                                err_bnds_comp: *mut c_double, nparams: c_int,
                                params: *mut c_double, work: *mut c_double_complex,
                                rwork: *mut c_double)
                                -> c_int;

    pub fn LAPACKE_ssytrd_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float,
                               lda: c_int, d: *mut c_float, e: *mut c_float, tau: *mut c_float,
                               work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dsytrd_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double,
                               lda: c_int, d: *mut c_double, e: *mut c_double, tau: *mut c_double,
                               work: *mut c_double, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_ssytrf_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float,
                               lda: c_int, ipiv: *mut c_int, work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dsytrf_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double,
                               lda: c_int, ipiv: *mut c_int, work: *mut c_double, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_csytrf_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *mut c_float_complex, lda: c_int, ipiv: *mut c_int,
                               work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zsytrf_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *mut c_double_complex, lda: c_int, ipiv: *mut c_int,
                               work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_ssytri_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float,
                               lda: c_int, ipiv: *const c_int, work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dsytri_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double,
                               lda: c_int, ipiv: *const c_int, work: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_csytri_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *mut c_float_complex, lda: c_int, ipiv: *const c_int,
                               work: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zsytri_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *mut c_double_complex, lda: c_int, ipiv: *const c_int,
                               work: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_ssytrs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *const c_float, lda: c_int, ipiv: *const c_int, b: *mut c_float,
                               ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_dsytrs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *const c_double, lda: c_int, ipiv: *const c_int,
                               b: *mut c_double, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_csytrs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *const c_float_complex, lda: c_int, ipiv: *const c_int,
                               b: *mut c_float_complex, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_zsytrs_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *const c_double_complex, lda: c_int, ipiv: *const c_int,
                               b: *mut c_double_complex, ldb: c_int)
                               -> c_int;

    pub fn LAPACKE_stbcon_work(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char,
                               n: c_int, kd: c_int, ab: *const c_float, ldab: c_int,
                               rcond: *mut c_float, work: *mut c_float, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dtbcon_work(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char,
                               n: c_int, kd: c_int, ab: *const c_double, ldab: c_int,
                               rcond: *mut c_double, work: *mut c_double, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_ctbcon_work(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char,
                               n: c_int, kd: c_int, ab: *const c_float_complex, ldab: c_int,
                               rcond: *mut c_float, work: *mut c_float_complex,
                               rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_ztbcon_work(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char,
                               n: c_int, kd: c_int, ab: *const c_double_complex, ldab: c_int,
                               rcond: *mut c_double, work: *mut c_double_complex,
                               rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_stbrfs_work(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                               n: c_int, kd: c_int, nrhs: c_int, ab: *const c_float, ldab: c_int,
                               b: *const c_float, ldb: c_int, x: *const c_float, ldx: c_int,
                               ferr: *mut c_float, berr: *mut c_float, work: *mut c_float,
                               iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dtbrfs_work(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                               n: c_int, kd: c_int, nrhs: c_int, ab: *const c_double, ldab: c_int,
                               b: *const c_double, ldb: c_int, x: *const c_double, ldx: c_int,
                               ferr: *mut c_double, berr: *mut c_double, work: *mut c_double,
                               iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_ctbrfs_work(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                               n: c_int, kd: c_int, nrhs: c_int, ab: *const c_float_complex,
                               ldab: c_int, b: *const c_float_complex, ldb: c_int,
                               x: *const c_float_complex, ldx: c_int, ferr: *mut c_float,
                               berr: *mut c_float, work: *mut c_float_complex, rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_ztbrfs_work(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                               n: c_int, kd: c_int, nrhs: c_int, ab: *const c_double_complex,
                               ldab: c_int, b: *const c_double_complex, ldb: c_int,
                               x: *const c_double_complex, ldx: c_int, ferr: *mut c_double,
                               berr: *mut c_double, work: *mut c_double_complex,
                               rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_stbtrs_work(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                               n: c_int, kd: c_int, nrhs: c_int, ab: *const c_float, ldab: c_int,
                               b: *mut c_float, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_dtbtrs_work(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                               n: c_int, kd: c_int, nrhs: c_int, ab: *const c_double, ldab: c_int,
                               b: *mut c_double, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_ctbtrs_work(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                               n: c_int, kd: c_int, nrhs: c_int, ab: *const c_float_complex,
                               ldab: c_int, b: *mut c_float_complex, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_ztbtrs_work(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                               n: c_int, kd: c_int, nrhs: c_int, ab: *const c_double_complex,
                               ldab: c_int, b: *mut c_double_complex, ldb: c_int)
                               -> c_int;

    pub fn LAPACKE_stfsm_work(matrix_layout: c_int, transr: c_char, side: c_char, uplo: c_char,
                              trans: c_char, diag: c_char, m: c_int, n: c_int, alpha: c_float,
                              a: *const c_float, b: *mut c_float, ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_dtfsm_work(matrix_layout: c_int, transr: c_char, side: c_char, uplo: c_char,
                              trans: c_char, diag: c_char, m: c_int, n: c_int, alpha: c_double,
                              a: *const c_double, b: *mut c_double, ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_ctfsm_work(matrix_layout: c_int, transr: c_char, side: c_char, uplo: c_char,
                              trans: c_char, diag: c_char, m: c_int, n: c_int,
                              alpha: c_float_complex, a: *const c_float_complex,
                              b: *mut c_float_complex, ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_ztfsm_work(matrix_layout: c_int, transr: c_char, side: c_char, uplo: c_char,
                              trans: c_char, diag: c_char, m: c_int, n: c_int,
                              alpha: c_double_complex, a: *const c_double_complex,
                              b: *mut c_double_complex, ldb: c_int)
                              -> c_int;

    pub fn LAPACKE_stftri_work(matrix_layout: c_int, transr: c_char, uplo: c_char, diag: c_char,
                               n: c_int, a: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dtftri_work(matrix_layout: c_int, transr: c_char, uplo: c_char, diag: c_char,
                               n: c_int, a: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_ctftri_work(matrix_layout: c_int, transr: c_char, uplo: c_char, diag: c_char,
                               n: c_int, a: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_ztftri_work(matrix_layout: c_int, transr: c_char, uplo: c_char, diag: c_char,
                               n: c_int, a: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_stfttp_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               arf: *const c_float, ap: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dtfttp_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               arf: *const c_double, ap: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_ctfttp_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               arf: *const c_float_complex, ap: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_ztfttp_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               arf: *const c_double_complex, ap: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_stfttr_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               arf: *const c_float, a: *mut c_float, lda: c_int)
                               -> c_int;
    pub fn LAPACKE_dtfttr_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               arf: *const c_double, a: *mut c_double, lda: c_int)
                               -> c_int;
    pub fn LAPACKE_ctfttr_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               arf: *const c_float_complex, a: *mut c_float_complex, lda: c_int)
                               -> c_int;
    pub fn LAPACKE_ztfttr_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               arf: *const c_double_complex, a: *mut c_double_complex, lda: c_int)
                               -> c_int;

    pub fn LAPACKE_stgevc_work(matrix_layout: c_int, side: c_char, howmny: c_char,
                               select: *const c_int, n: c_int, s: *const c_float, lds: c_int,
                               p: *const c_float, ldp: c_int, vl: *mut c_float, ldvl: c_int,
                               vr: *mut c_float, ldvr: c_int, mm: c_int, m: *mut c_int,
                               work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dtgevc_work(matrix_layout: c_int, side: c_char, howmny: c_char,
                               select: *const c_int, n: c_int, s: *const c_double, lds: c_int,
                               p: *const c_double, ldp: c_int, vl: *mut c_double, ldvl: c_int,
                               vr: *mut c_double, ldvr: c_int, mm: c_int, m: *mut c_int,
                               work: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_ctgevc_work(matrix_layout: c_int, side: c_char, howmny: c_char,
                               select: *const c_int, n: c_int, s: *const c_float_complex,
                               lds: c_int, p: *const c_float_complex, ldp: c_int,
                               vl: *mut c_float_complex, ldvl: c_int, vr: *mut c_float_complex,
                               ldvr: c_int, mm: c_int, m: *mut c_int, work: *mut c_float_complex,
                               rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_ztgevc_work(matrix_layout: c_int, side: c_char, howmny: c_char,
                               select: *const c_int, n: c_int, s: *const c_double_complex,
                               lds: c_int, p: *const c_double_complex, ldp: c_int,
                               vl: *mut c_double_complex, ldvl: c_int, vr: *mut c_double_complex,
                               ldvr: c_int, mm: c_int, m: *mut c_int, work: *mut c_double_complex,
                               rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_stgexc_work(matrix_layout: c_int, wantq: c_int, wantz: c_int, n: c_int,
                               a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int,
                               q: *mut c_float, ldq: c_int, z: *mut c_float, ldz: c_int,
                               ifst: *mut c_int, ilst: *mut c_int, work: *mut c_float,
                               lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dtgexc_work(matrix_layout: c_int, wantq: c_int, wantz: c_int, n: c_int,
                               a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int,
                               q: *mut c_double, ldq: c_int, z: *mut c_double, ldz: c_int,
                               ifst: *mut c_int, ilst: *mut c_int, work: *mut c_double,
                               lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_ctgexc_work(matrix_layout: c_int, wantq: c_int, wantz: c_int, n: c_int,
                               a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex,
                               ldb: c_int, q: *mut c_float_complex, ldq: c_int,
                               z: *mut c_float_complex, ldz: c_int, ifst: c_int, ilst: c_int)
                               -> c_int;
    pub fn LAPACKE_ztgexc_work(matrix_layout: c_int, wantq: c_int, wantz: c_int, n: c_int,
                               a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                               ldb: c_int, q: *mut c_double_complex, ldq: c_int,
                               z: *mut c_double_complex, ldz: c_int, ifst: c_int, ilst: c_int)
                               -> c_int;

    pub fn LAPACKE_stgsen_work(matrix_layout: c_int, ijob: c_int, wantq: c_int, wantz: c_int,
                               select: *const c_int, n: c_int, a: *mut c_float, lda: c_int,
                               b: *mut c_float, ldb: c_int, alphar: *mut c_float,
                               alphai: *mut c_float, beta: *mut c_float, q: *mut c_float,
                               ldq: c_int, z: *mut c_float, ldz: c_int, m: *mut c_int,
                               pl: *mut c_float, pr: *mut c_float, dif: *mut c_float,
                               work: *mut c_float, lwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dtgsen_work(matrix_layout: c_int, ijob: c_int, wantq: c_int, wantz: c_int,
                               select: *const c_int, n: c_int, a: *mut c_double, lda: c_int,
                               b: *mut c_double, ldb: c_int, alphar: *mut c_double,
                               alphai: *mut c_double, beta: *mut c_double, q: *mut c_double,
                               ldq: c_int, z: *mut c_double, ldz: c_int, m: *mut c_int,
                               pl: *mut c_double, pr: *mut c_double, dif: *mut c_double,
                               work: *mut c_double, lwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_ctgsen_work(matrix_layout: c_int, ijob: c_int, wantq: c_int, wantz: c_int,
                               select: *const c_int, n: c_int, a: *mut c_float_complex, lda: c_int,
                               b: *mut c_float_complex, ldb: c_int, alpha: *mut c_float_complex,
                               beta: *mut c_float_complex, q: *mut c_float_complex, ldq: c_int,
                               z: *mut c_float_complex, ldz: c_int, m: *mut c_int,
                               pl: *mut c_float, pr: *mut c_float, dif: *mut c_float,
                               work: *mut c_float_complex, lwork: c_int, iwork: *mut c_int,
                               liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_ztgsen_work(matrix_layout: c_int, ijob: c_int, wantq: c_int, wantz: c_int,
                               select: *const c_int, n: c_int, a: *mut c_double_complex,
                               lda: c_int, b: *mut c_double_complex, ldb: c_int,
                               alpha: *mut c_double_complex, beta: *mut c_double_complex,
                               q: *mut c_double_complex, ldq: c_int, z: *mut c_double_complex,
                               ldz: c_int, m: *mut c_int, pl: *mut c_double, pr: *mut c_double,
                               dif: *mut c_double, work: *mut c_double_complex, lwork: c_int,
                               iwork: *mut c_int, liwork: c_int)
                               -> c_int;

    pub fn LAPACKE_stgsja_work(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                               m: c_int, p: c_int, n: c_int, k: c_int, l: c_int, a: *mut c_float,
                               lda: c_int, b: *mut c_float, ldb: c_int, tola: c_float,
                               tolb: c_float, alpha: *mut c_float, beta: *mut c_float,
                               u: *mut c_float, ldu: c_int, v: *mut c_float, ldv: c_int,
                               q: *mut c_float, ldq: c_int, work: *mut c_float, ncycle: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dtgsja_work(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                               m: c_int, p: c_int, n: c_int, k: c_int, l: c_int, a: *mut c_double,
                               lda: c_int, b: *mut c_double, ldb: c_int, tola: c_double,
                               tolb: c_double, alpha: *mut c_double, beta: *mut c_double,
                               u: *mut c_double, ldu: c_int, v: *mut c_double, ldv: c_int,
                               q: *mut c_double, ldq: c_int, work: *mut c_double,
                               ncycle: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_ctgsja_work(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                               m: c_int, p: c_int, n: c_int, k: c_int, l: c_int,
                               a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex,
                               ldb: c_int, tola: c_float, tolb: c_float, alpha: *mut c_float,
                               beta: *mut c_float, u: *mut c_float_complex, ldu: c_int,
                               v: *mut c_float_complex, ldv: c_int, q: *mut c_float_complex,
                               ldq: c_int, work: *mut c_float_complex, ncycle: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_ztgsja_work(matrix_layout: c_int, jobu: c_char, jobv: c_char, jobq: c_char,
                               m: c_int, p: c_int, n: c_int, k: c_int, l: c_int,
                               a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                               ldb: c_int, tola: c_double, tolb: c_double, alpha: *mut c_double,
                               beta: *mut c_double, u: *mut c_double_complex, ldu: c_int,
                               v: *mut c_double_complex, ldv: c_int, q: *mut c_double_complex,
                               ldq: c_int, work: *mut c_double_complex, ncycle: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_stgsna_work(matrix_layout: c_int, job: c_char, howmny: c_char,
                               select: *const c_int, n: c_int, a: *const c_float, lda: c_int,
                               b: *const c_float, ldb: c_int, vl: *const c_float, ldvl: c_int,
                               vr: *const c_float, ldvr: c_int, s: *mut c_float, dif: *mut c_float,
                               mm: c_int, m: *mut c_int, work: *mut c_float, lwork: c_int,
                               iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dtgsna_work(matrix_layout: c_int, job: c_char, howmny: c_char,
                               select: *const c_int, n: c_int, a: *const c_double, lda: c_int,
                               b: *const c_double, ldb: c_int, vl: *const c_double, ldvl: c_int,
                               vr: *const c_double, ldvr: c_int, s: *mut c_double,
                               dif: *mut c_double, mm: c_int, m: *mut c_int, work: *mut c_double,
                               lwork: c_int, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_ctgsna_work(matrix_layout: c_int, job: c_char, howmny: c_char,
                               select: *const c_int, n: c_int, a: *const c_float_complex,
                               lda: c_int, b: *const c_float_complex, ldb: c_int,
                               vl: *const c_float_complex, ldvl: c_int, vr: *const c_float_complex,
                               ldvr: c_int, s: *mut c_float, dif: *mut c_float, mm: c_int,
                               m: *mut c_int, work: *mut c_float_complex, lwork: c_int,
                               iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_ztgsna_work(matrix_layout: c_int, job: c_char, howmny: c_char,
                               select: *const c_int, n: c_int, a: *const c_double_complex,
                               lda: c_int, b: *const c_double_complex, ldb: c_int,
                               vl: *const c_double_complex, ldvl: c_int,
                               vr: *const c_double_complex, ldvr: c_int, s: *mut c_double,
                               dif: *mut c_double, mm: c_int, m: *mut c_int,
                               work: *mut c_double_complex, lwork: c_int, iwork: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_stgsyl_work(matrix_layout: c_int, trans: c_char, ijob: c_int, m: c_int,
                               n: c_int, a: *const c_float, lda: c_int, b: *const c_float,
                               ldb: c_int, c: *mut c_float, ldc: c_int, d: *const c_float,
                               ldd: c_int, e: *const c_float, lde: c_int, f: *mut c_float,
                               ldf: c_int, scale: *mut c_float, dif: *mut c_float,
                               work: *mut c_float, lwork: c_int, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dtgsyl_work(matrix_layout: c_int, trans: c_char, ijob: c_int, m: c_int,
                               n: c_int, a: *const c_double, lda: c_int, b: *const c_double,
                               ldb: c_int, c: *mut c_double, ldc: c_int, d: *const c_double,
                               ldd: c_int, e: *const c_double, lde: c_int, f: *mut c_double,
                               ldf: c_int, scale: *mut c_double, dif: *mut c_double,
                               work: *mut c_double, lwork: c_int, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_ctgsyl_work(matrix_layout: c_int, trans: c_char, ijob: c_int, m: c_int,
                               n: c_int, a: *const c_float_complex, lda: c_int,
                               b: *const c_float_complex, ldb: c_int, c: *mut c_float_complex,
                               ldc: c_int, d: *const c_float_complex, ldd: c_int,
                               e: *const c_float_complex, lde: c_int, f: *mut c_float_complex,
                               ldf: c_int, scale: *mut c_float, dif: *mut c_float,
                               work: *mut c_float_complex, lwork: c_int, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_ztgsyl_work(matrix_layout: c_int, trans: c_char, ijob: c_int, m: c_int,
                               n: c_int, a: *const c_double_complex, lda: c_int,
                               b: *const c_double_complex, ldb: c_int, c: *mut c_double_complex,
                               ldc: c_int, d: *const c_double_complex, ldd: c_int,
                               e: *const c_double_complex, lde: c_int, f: *mut c_double_complex,
                               ldf: c_int, scale: *mut c_double, dif: *mut c_double,
                               work: *mut c_double_complex, lwork: c_int, iwork: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_stpcon_work(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char,
                               n: c_int, ap: *const c_float, rcond: *mut c_float,
                               work: *mut c_float, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dtpcon_work(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char,
                               n: c_int, ap: *const c_double, rcond: *mut c_double,
                               work: *mut c_double, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_ctpcon_work(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char,
                               n: c_int, ap: *const c_float_complex, rcond: *mut c_float,
                               work: *mut c_float_complex, rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_ztpcon_work(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char,
                               n: c_int, ap: *const c_double_complex, rcond: *mut c_double,
                               work: *mut c_double_complex, rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_stprfs_work(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                               n: c_int, nrhs: c_int, ap: *const c_float, b: *const c_float,
                               ldb: c_int, x: *const c_float, ldx: c_int, ferr: *mut c_float,
                               berr: *mut c_float, work: *mut c_float, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dtprfs_work(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                               n: c_int, nrhs: c_int, ap: *const c_double, b: *const c_double,
                               ldb: c_int, x: *const c_double, ldx: c_int, ferr: *mut c_double,
                               berr: *mut c_double, work: *mut c_double, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_ctprfs_work(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                               n: c_int, nrhs: c_int, ap: *const c_float_complex,
                               b: *const c_float_complex, ldb: c_int, x: *const c_float_complex,
                               ldx: c_int, ferr: *mut c_float, berr: *mut c_float,
                               work: *mut c_float_complex, rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_ztprfs_work(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                               n: c_int, nrhs: c_int, ap: *const c_double_complex,
                               b: *const c_double_complex, ldb: c_int, x: *const c_double_complex,
                               ldx: c_int, ferr: *mut c_double, berr: *mut c_double,
                               work: *mut c_double_complex, rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_stptri_work(matrix_layout: c_int, uplo: c_char, diag: c_char, n: c_int,
                               ap: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dtptri_work(matrix_layout: c_int, uplo: c_char, diag: c_char, n: c_int,
                               ap: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_ctptri_work(matrix_layout: c_int, uplo: c_char, diag: c_char, n: c_int,
                               ap: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_ztptri_work(matrix_layout: c_int, uplo: c_char, diag: c_char, n: c_int,
                               ap: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_stptrs_work(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                               n: c_int, nrhs: c_int, ap: *const c_float, b: *mut c_float,
                               ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_dtptrs_work(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                               n: c_int, nrhs: c_int, ap: *const c_double, b: *mut c_double,
                               ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_ctptrs_work(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                               n: c_int, nrhs: c_int, ap: *const c_float_complex,
                               b: *mut c_float_complex, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_ztptrs_work(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                               n: c_int, nrhs: c_int, ap: *const c_double_complex,
                               b: *mut c_double_complex, ldb: c_int)
                               -> c_int;

    pub fn LAPACKE_stpttf_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               ap: *const c_float, arf: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dtpttf_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               ap: *const c_double, arf: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_ctpttf_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               ap: *const c_float_complex, arf: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_ztpttf_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               ap: *const c_double_complex, arf: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_stpttr_work(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *const c_float,
                               a: *mut c_float, lda: c_int)
                               -> c_int;
    pub fn LAPACKE_dtpttr_work(matrix_layout: c_int, uplo: c_char, n: c_int, ap: *const c_double,
                               a: *mut c_double, lda: c_int)
                               -> c_int;
    pub fn LAPACKE_ctpttr_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               ap: *const c_float_complex, a: *mut c_float_complex, lda: c_int)
                               -> c_int;
    pub fn LAPACKE_ztpttr_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               ap: *const c_double_complex, a: *mut c_double_complex, lda: c_int)
                               -> c_int;

    pub fn LAPACKE_strcon_work(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char,
                               n: c_int, a: *const c_float, lda: c_int, rcond: *mut c_float,
                               work: *mut c_float, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dtrcon_work(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char,
                               n: c_int, a: *const c_double, lda: c_int, rcond: *mut c_double,
                               work: *mut c_double, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_ctrcon_work(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char,
                               n: c_int, a: *const c_float_complex, lda: c_int,
                               rcond: *mut c_float, work: *mut c_float_complex,
                               rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_ztrcon_work(matrix_layout: c_int, norm: c_char, uplo: c_char, diag: c_char,
                               n: c_int, a: *const c_double_complex, lda: c_int,
                               rcond: *mut c_double, work: *mut c_double_complex,
                               rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_strevc_work(matrix_layout: c_int, side: c_char, howmny: c_char,
                               select: *mut c_int, n: c_int, t: *const c_float, ldt: c_int,
                               vl: *mut c_float, ldvl: c_int, vr: *mut c_float, ldvr: c_int,
                               mm: c_int, m: *mut c_int, work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dtrevc_work(matrix_layout: c_int, side: c_char, howmny: c_char,
                               select: *mut c_int, n: c_int, t: *const c_double, ldt: c_int,
                               vl: *mut c_double, ldvl: c_int, vr: *mut c_double, ldvr: c_int,
                               mm: c_int, m: *mut c_int, work: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_ctrevc_work(matrix_layout: c_int, side: c_char, howmny: c_char,
                               select: *const c_int, n: c_int, t: *mut c_float_complex, ldt: c_int,
                               vl: *mut c_float_complex, ldvl: c_int, vr: *mut c_float_complex,
                               ldvr: c_int, mm: c_int, m: *mut c_int, work: *mut c_float_complex,
                               rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_ztrevc_work(matrix_layout: c_int, side: c_char, howmny: c_char,
                               select: *const c_int, n: c_int, t: *mut c_double_complex,
                               ldt: c_int, vl: *mut c_double_complex, ldvl: c_int,
                               vr: *mut c_double_complex, ldvr: c_int, mm: c_int, m: *mut c_int,
                               work: *mut c_double_complex, rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_strexc_work(matrix_layout: c_int, compq: c_char, n: c_int, t: *mut c_float,
                               ldt: c_int, q: *mut c_float, ldq: c_int, ifst: *mut c_int,
                               ilst: *mut c_int, work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dtrexc_work(matrix_layout: c_int, compq: c_char, n: c_int, t: *mut c_double,
                               ldt: c_int, q: *mut c_double, ldq: c_int, ifst: *mut c_int,
                               ilst: *mut c_int, work: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_ctrexc_work(matrix_layout: c_int, compq: c_char, n: c_int,
                               t: *mut c_float_complex, ldt: c_int, q: *mut c_float_complex,
                               ldq: c_int, ifst: c_int, ilst: c_int)
                               -> c_int;
    pub fn LAPACKE_ztrexc_work(matrix_layout: c_int, compq: c_char, n: c_int,
                               t: *mut c_double_complex, ldt: c_int, q: *mut c_double_complex,
                               ldq: c_int, ifst: c_int, ilst: c_int)
                               -> c_int;

    pub fn LAPACKE_strrfs_work(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                               n: c_int, nrhs: c_int, a: *const c_float, lda: c_int,
                               b: *const c_float, ldb: c_int, x: *const c_float, ldx: c_int,
                               ferr: *mut c_float, berr: *mut c_float, work: *mut c_float,
                               iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dtrrfs_work(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                               n: c_int, nrhs: c_int, a: *const c_double, lda: c_int,
                               b: *const c_double, ldb: c_int, x: *const c_double, ldx: c_int,
                               ferr: *mut c_double, berr: *mut c_double, work: *mut c_double,
                               iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_ctrrfs_work(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                               n: c_int, nrhs: c_int, a: *const c_float_complex, lda: c_int,
                               b: *const c_float_complex, ldb: c_int, x: *const c_float_complex,
                               ldx: c_int, ferr: *mut c_float, berr: *mut c_float,
                               work: *mut c_float_complex, rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_ztrrfs_work(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                               n: c_int, nrhs: c_int, a: *const c_double_complex, lda: c_int,
                               b: *const c_double_complex, ldb: c_int, x: *const c_double_complex,
                               ldx: c_int, ferr: *mut c_double, berr: *mut c_double,
                               work: *mut c_double_complex, rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_strsen_work(matrix_layout: c_int, job: c_char, compq: c_char,
                               select: *const c_int, n: c_int, t: *mut c_float, ldt: c_int,
                               q: *mut c_float, ldq: c_int, wr: *mut c_float, wi: *mut c_float,
                               m: *mut c_int, s: *mut c_float, sep: *mut c_float,
                               work: *mut c_float, lwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dtrsen_work(matrix_layout: c_int, job: c_char, compq: c_char,
                               select: *const c_int, n: c_int, t: *mut c_double, ldt: c_int,
                               q: *mut c_double, ldq: c_int, wr: *mut c_double, wi: *mut c_double,
                               m: *mut c_int, s: *mut c_double, sep: *mut c_double,
                               work: *mut c_double, lwork: c_int, iwork: *mut c_int, liwork: c_int)
                               -> c_int;
    pub fn LAPACKE_ctrsen_work(matrix_layout: c_int, job: c_char, compq: c_char,
                               select: *const c_int, n: c_int, t: *mut c_float_complex, ldt: c_int,
                               q: *mut c_float_complex, ldq: c_int, w: *mut c_float_complex,
                               m: *mut c_int, s: *mut c_float, sep: *mut c_float,
                               work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_ztrsen_work(matrix_layout: c_int, job: c_char, compq: c_char,
                               select: *const c_int, n: c_int, t: *mut c_double_complex,
                               ldt: c_int, q: *mut c_double_complex, ldq: c_int,
                               w: *mut c_double_complex, m: *mut c_int, s: *mut c_double,
                               sep: *mut c_double, work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_strsna_work(matrix_layout: c_int, job: c_char, howmny: c_char,
                               select: *const c_int, n: c_int, t: *const c_float, ldt: c_int,
                               vl: *const c_float, ldvl: c_int, vr: *const c_float, ldvr: c_int,
                               s: *mut c_float, sep: *mut c_float, mm: c_int, m: *mut c_int,
                               work: *mut c_float, ldwork: c_int, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dtrsna_work(matrix_layout: c_int, job: c_char, howmny: c_char,
                               select: *const c_int, n: c_int, t: *const c_double, ldt: c_int,
                               vl: *const c_double, ldvl: c_int, vr: *const c_double, ldvr: c_int,
                               s: *mut c_double, sep: *mut c_double, mm: c_int, m: *mut c_int,
                               work: *mut c_double, ldwork: c_int, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_ctrsna_work(matrix_layout: c_int, job: c_char, howmny: c_char,
                               select: *const c_int, n: c_int, t: *const c_float_complex,
                               ldt: c_int, vl: *const c_float_complex, ldvl: c_int,
                               vr: *const c_float_complex, ldvr: c_int, s: *mut c_float,
                               sep: *mut c_float, mm: c_int, m: *mut c_int,
                               work: *mut c_float_complex, ldwork: c_int, rwork: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_ztrsna_work(matrix_layout: c_int, job: c_char, howmny: c_char,
                               select: *const c_int, n: c_int, t: *const c_double_complex,
                               ldt: c_int, vl: *const c_double_complex, ldvl: c_int,
                               vr: *const c_double_complex, ldvr: c_int, s: *mut c_double,
                               sep: *mut c_double, mm: c_int, m: *mut c_int,
                               work: *mut c_double_complex, ldwork: c_int, rwork: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_strsyl_work(matrix_layout: c_int, trana: c_char, tranb: c_char, isgn: c_int,
                               m: c_int, n: c_int, a: *const c_float, lda: c_int,
                               b: *const c_float, ldb: c_int, c: *mut c_float, ldc: c_int,
                               scale: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dtrsyl_work(matrix_layout: c_int, trana: c_char, tranb: c_char, isgn: c_int,
                               m: c_int, n: c_int, a: *const c_double, lda: c_int,
                               b: *const c_double, ldb: c_int, c: *mut c_double, ldc: c_int,
                               scale: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_ctrsyl_work(matrix_layout: c_int, trana: c_char, tranb: c_char, isgn: c_int,
                               m: c_int, n: c_int, a: *const c_float_complex, lda: c_int,
                               b: *const c_float_complex, ldb: c_int, c: *mut c_float_complex,
                               ldc: c_int, scale: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_ztrsyl_work(matrix_layout: c_int, trana: c_char, tranb: c_char, isgn: c_int,
                               m: c_int, n: c_int, a: *const c_double_complex, lda: c_int,
                               b: *const c_double_complex, ldb: c_int, c: *mut c_double_complex,
                               ldc: c_int, scale: *mut c_double)
                               -> c_int;

    pub fn LAPACKE_strtri_work(matrix_layout: c_int, uplo: c_char, diag: c_char, n: c_int,
                               a: *mut c_float, lda: c_int)
                               -> c_int;
    pub fn LAPACKE_dtrtri_work(matrix_layout: c_int, uplo: c_char, diag: c_char, n: c_int,
                               a: *mut c_double, lda: c_int)
                               -> c_int;
    pub fn LAPACKE_ctrtri_work(matrix_layout: c_int, uplo: c_char, diag: c_char, n: c_int,
                               a: *mut c_float_complex, lda: c_int)
                               -> c_int;
    pub fn LAPACKE_ztrtri_work(matrix_layout: c_int, uplo: c_char, diag: c_char, n: c_int,
                               a: *mut c_double_complex, lda: c_int)
                               -> c_int;

    pub fn LAPACKE_strtrs_work(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                               n: c_int, nrhs: c_int, a: *const c_float, lda: c_int,
                               b: *mut c_float, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_dtrtrs_work(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                               n: c_int, nrhs: c_int, a: *const c_double, lda: c_int,
                               b: *mut c_double, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_ctrtrs_work(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                               n: c_int, nrhs: c_int, a: *const c_float_complex, lda: c_int,
                               b: *mut c_float_complex, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_ztrtrs_work(matrix_layout: c_int, uplo: c_char, trans: c_char, diag: c_char,
                               n: c_int, nrhs: c_int, a: *const c_double_complex, lda: c_int,
                               b: *mut c_double_complex, ldb: c_int)
                               -> c_int;

    pub fn LAPACKE_strttf_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               a: *const c_float, lda: c_int, arf: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dtrttf_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               a: *const c_double, lda: c_int, arf: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_ctrttf_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               a: *const c_float_complex, lda: c_int, arf: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_ztrttf_work(matrix_layout: c_int, transr: c_char, uplo: c_char, n: c_int,
                               a: *const c_double_complex, lda: c_int, arf: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_strttp_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *const c_float,
                               lda: c_int, ap: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dtrttp_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *const c_double,
                               lda: c_int, ap: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_ctrttp_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *const c_float_complex, lda: c_int, ap: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_ztrttp_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *const c_double_complex, lda: c_int, ap: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_stzrzf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float,
                               lda: c_int, tau: *mut c_float, work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dtzrzf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double,
                               lda: c_int, tau: *mut c_double, work: *mut c_double, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_ctzrzf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                               lda: c_int, tau: *mut c_float_complex, work: *mut c_float_complex,
                               lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_ztzrzf_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                               lda: c_int, tau: *mut c_double_complex, work: *mut c_double_complex,
                               lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_cungbr_work(matrix_layout: c_int, vect: c_char, m: c_int, n: c_int, k: c_int,
                               a: *mut c_float_complex, lda: c_int, tau: *const c_float_complex,
                               work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zungbr_work(matrix_layout: c_int, vect: c_char, m: c_int, n: c_int, k: c_int,
                               a: *mut c_double_complex, lda: c_int, tau: *const c_double_complex,
                               work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_cunghr_work(matrix_layout: c_int, n: c_int, ilo: c_int, ihi: c_int,
                               a: *mut c_float_complex, lda: c_int, tau: *const c_float_complex,
                               work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zunghr_work(matrix_layout: c_int, n: c_int, ilo: c_int, ihi: c_int,
                               a: *mut c_double_complex, lda: c_int, tau: *const c_double_complex,
                               work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_cunglq_work(matrix_layout: c_int, m: c_int, n: c_int, k: c_int,
                               a: *mut c_float_complex, lda: c_int, tau: *const c_float_complex,
                               work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zunglq_work(matrix_layout: c_int, m: c_int, n: c_int, k: c_int,
                               a: *mut c_double_complex, lda: c_int, tau: *const c_double_complex,
                               work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_cungql_work(matrix_layout: c_int, m: c_int, n: c_int, k: c_int,
                               a: *mut c_float_complex, lda: c_int, tau: *const c_float_complex,
                               work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zungql_work(matrix_layout: c_int, m: c_int, n: c_int, k: c_int,
                               a: *mut c_double_complex, lda: c_int, tau: *const c_double_complex,
                               work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_cungqr_work(matrix_layout: c_int, m: c_int, n: c_int, k: c_int,
                               a: *mut c_float_complex, lda: c_int, tau: *const c_float_complex,
                               work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zungqr_work(matrix_layout: c_int, m: c_int, n: c_int, k: c_int,
                               a: *mut c_double_complex, lda: c_int, tau: *const c_double_complex,
                               work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_cungrq_work(matrix_layout: c_int, m: c_int, n: c_int, k: c_int,
                               a: *mut c_float_complex, lda: c_int, tau: *const c_float_complex,
                               work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zungrq_work(matrix_layout: c_int, m: c_int, n: c_int, k: c_int,
                               a: *mut c_double_complex, lda: c_int, tau: *const c_double_complex,
                               work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_cungtr_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *mut c_float_complex, lda: c_int, tau: *const c_float_complex,
                               work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zungtr_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *mut c_double_complex, lda: c_int, tau: *const c_double_complex,
                               work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_cunmbr_work(matrix_layout: c_int, vect: c_char, side: c_char, trans: c_char,
                               m: c_int, n: c_int, k: c_int, a: *const c_float_complex, lda: c_int,
                               tau: *const c_float_complex, c: *mut c_float_complex, ldc: c_int,
                               work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zunmbr_work(matrix_layout: c_int, vect: c_char, side: c_char, trans: c_char,
                               m: c_int, n: c_int, k: c_int, a: *const c_double_complex,
                               lda: c_int, tau: *const c_double_complex, c: *mut c_double_complex,
                               ldc: c_int, work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_cunmhr_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                               n: c_int, ilo: c_int, ihi: c_int, a: *const c_float_complex,
                               lda: c_int, tau: *const c_float_complex, c: *mut c_float_complex,
                               ldc: c_int, work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zunmhr_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                               n: c_int, ilo: c_int, ihi: c_int, a: *const c_double_complex,
                               lda: c_int, tau: *const c_double_complex, c: *mut c_double_complex,
                               ldc: c_int, work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_cunmlq_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                               n: c_int, k: c_int, a: *const c_float_complex, lda: c_int,
                               tau: *const c_float_complex, c: *mut c_float_complex, ldc: c_int,
                               work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zunmlq_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                               n: c_int, k: c_int, a: *const c_double_complex, lda: c_int,
                               tau: *const c_double_complex, c: *mut c_double_complex, ldc: c_int,
                               work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_cunmql_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                               n: c_int, k: c_int, a: *const c_float_complex, lda: c_int,
                               tau: *const c_float_complex, c: *mut c_float_complex, ldc: c_int,
                               work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zunmql_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                               n: c_int, k: c_int, a: *const c_double_complex, lda: c_int,
                               tau: *const c_double_complex, c: *mut c_double_complex, ldc: c_int,
                               work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_cunmqr_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                               n: c_int, k: c_int, a: *const c_float_complex, lda: c_int,
                               tau: *const c_float_complex, c: *mut c_float_complex, ldc: c_int,
                               work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zunmqr_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                               n: c_int, k: c_int, a: *const c_double_complex, lda: c_int,
                               tau: *const c_double_complex, c: *mut c_double_complex, ldc: c_int,
                               work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_cunmrq_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                               n: c_int, k: c_int, a: *const c_float_complex, lda: c_int,
                               tau: *const c_float_complex, c: *mut c_float_complex, ldc: c_int,
                               work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zunmrq_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                               n: c_int, k: c_int, a: *const c_double_complex, lda: c_int,
                               tau: *const c_double_complex, c: *mut c_double_complex, ldc: c_int,
                               work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_cunmrz_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                               n: c_int, k: c_int, l: c_int, a: *const c_float_complex, lda: c_int,
                               tau: *const c_float_complex, c: *mut c_float_complex, ldc: c_int,
                               work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zunmrz_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                               n: c_int, k: c_int, l: c_int, a: *const c_double_complex,
                               lda: c_int, tau: *const c_double_complex, c: *mut c_double_complex,
                               ldc: c_int, work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_cunmtr_work(matrix_layout: c_int, side: c_char, uplo: c_char, trans: c_char,
                               m: c_int, n: c_int, a: *const c_float_complex, lda: c_int,
                               tau: *const c_float_complex, c: *mut c_float_complex, ldc: c_int,
                               work: *mut c_float_complex, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zunmtr_work(matrix_layout: c_int, side: c_char, uplo: c_char, trans: c_char,
                               m: c_int, n: c_int, a: *const c_double_complex, lda: c_int,
                               tau: *const c_double_complex, c: *mut c_double_complex, ldc: c_int,
                               work: *mut c_double_complex, lwork: c_int)
                               -> c_int;

    pub fn LAPACKE_cupgtr_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               ap: *const c_float_complex, tau: *const c_float_complex,
                               q: *mut c_float_complex, ldq: c_int, work: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zupgtr_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                               ap: *const c_double_complex, tau: *const c_double_complex,
                               q: *mut c_double_complex, ldq: c_int, work: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_cupmtr_work(matrix_layout: c_int, side: c_char, uplo: c_char, trans: c_char,
                               m: c_int, n: c_int, ap: *const c_float_complex,
                               tau: *const c_float_complex, c: *mut c_float_complex, ldc: c_int,
                               work: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zupmtr_work(matrix_layout: c_int, side: c_char, uplo: c_char, trans: c_char,
                               m: c_int, n: c_int, ap: *const c_double_complex,
                               tau: *const c_double_complex, c: *mut c_double_complex, ldc: c_int,
                               work: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_claghe(matrix_layout: c_int, n: c_int, k: c_int, d: *const c_float,
                          a: *mut c_float_complex, lda: c_int, iseed: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zlaghe(matrix_layout: c_int, n: c_int, k: c_int, d: *const c_double,
                          a: *mut c_double_complex, lda: c_int, iseed: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_slagsy(matrix_layout: c_int, n: c_int, k: c_int, d: *const c_float,
                          a: *mut c_float, lda: c_int, iseed: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dlagsy(matrix_layout: c_int, n: c_int, k: c_int, d: *const c_double,
                          a: *mut c_double, lda: c_int, iseed: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_clagsy(matrix_layout: c_int, n: c_int, k: c_int, d: *const c_float,
                          a: *mut c_float_complex, lda: c_int, iseed: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zlagsy(matrix_layout: c_int, n: c_int, k: c_int, d: *const c_double,
                          a: *mut c_double_complex, lda: c_int, iseed: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_slapmr(matrix_layout: c_int, forwrd: c_int, m: c_int, n: c_int, x: *mut c_float,
                          ldx: c_int, k: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dlapmr(matrix_layout: c_int, forwrd: c_int, m: c_int, n: c_int,
                          x: *mut c_double, ldx: c_int, k: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_clapmr(matrix_layout: c_int, forwrd: c_int, m: c_int, n: c_int,
                          x: *mut c_float_complex, ldx: c_int, k: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zlapmr(matrix_layout: c_int, forwrd: c_int, m: c_int, n: c_int,
                          x: *mut c_double_complex, ldx: c_int, k: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_slapmt(matrix_layout: c_int, forwrd: c_int, m: c_int, n: c_int, x: *mut c_float,
                          ldx: c_int, k: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_dlapmt(matrix_layout: c_int, forwrd: c_int, m: c_int, n: c_int,
                          x: *mut c_double, ldx: c_int, k: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_clapmt(matrix_layout: c_int, forwrd: c_int, m: c_int, n: c_int,
                          x: *mut c_float_complex, ldx: c_int, k: *mut c_int)
                          -> c_int;
    pub fn LAPACKE_zlapmt(matrix_layout: c_int, forwrd: c_int, m: c_int, n: c_int,
                          x: *mut c_double_complex, ldx: c_int, k: *mut c_int)
                          -> c_int;

    pub fn LAPACKE_slapy2(x: c_float, y: c_float) -> c_float;
    pub fn LAPACKE_dlapy2(x: c_double, y: c_double) -> c_double;

    pub fn LAPACKE_slapy3(x: c_float, y: c_float, z: c_float) -> c_float;
    pub fn LAPACKE_dlapy3(x: c_double, y: c_double, z: c_double) -> c_double;

    pub fn LAPACKE_slartgp(f: c_float, g: c_float, cs: *mut c_float, sn: *mut c_float,
                           r: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_dlartgp(f: c_double, g: c_double, cs: *mut c_double, sn: *mut c_double,
                           r: *mut c_double)
                           -> c_int;

    pub fn LAPACKE_slartgs(x: c_float, y: c_float, sigma: c_float, cs: *mut c_float,
                           sn: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_dlartgs(x: c_double, y: c_double, sigma: c_double, cs: *mut c_double,
                           sn: *mut c_double)
                           -> c_int;


    // Version 3.3.0
    pub fn LAPACKE_cbbcsd(matrix_layout: c_int, jobu1: c_char, jobu2: c_char, jobv1t: c_char,
                          jobv2t: c_char, trans: c_char, m: c_int, p: c_int, q: c_int,
                          theta: *mut c_float, phi: *mut c_float, u1: *mut c_float_complex,
                          ldu1: c_int, u2: *mut c_float_complex, ldu2: c_int,
                          v1t: *mut c_float_complex, ldv1t: c_int, v2t: *mut c_float_complex,
                          ldv2t: c_int, b11d: *mut c_float, b11e: *mut c_float, b12d: *mut c_float,
                          b12e: *mut c_float, b21d: *mut c_float, b21e: *mut c_float,
                          b22d: *mut c_float, b22e: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_cbbcsd_work(matrix_layout: c_int, jobu1: c_char, jobu2: c_char, jobv1t: c_char,
                               jobv2t: c_char, trans: c_char, m: c_int, p: c_int, q: c_int,
                               theta: *mut c_float, phi: *mut c_float, u1: *mut c_float_complex,
                               ldu1: c_int, u2: *mut c_float_complex, ldu2: c_int,
                               v1t: *mut c_float_complex, ldv1t: c_int, v2t: *mut c_float_complex,
                               ldv2t: c_int, b11d: *mut c_float, b11e: *mut c_float,
                               b12d: *mut c_float, b12e: *mut c_float, b21d: *mut c_float,
                               b21e: *mut c_float, b22d: *mut c_float, b22e: *mut c_float,
                               rwork: *mut c_float, lrwork: c_int)
                               -> c_int;
    pub fn LAPACKE_cheswapr(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float_complex,
                            i1: c_int, i2: c_int)
                            -> c_int;
    pub fn LAPACKE_cheswapr_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                                 a: *mut c_float_complex, i1: c_int, i2: c_int)
                                 -> c_int;
    pub fn LAPACKE_chetri2(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float_complex,
                           lda: c_int, ipiv: *const c_int)
                           -> c_int;
    pub fn LAPACKE_chetri2_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                                a: *mut c_float_complex, lda: c_int, ipiv: *const c_int,
                                work: *mut c_float_complex, lwork: c_int)
                                -> c_int;
    pub fn LAPACKE_chetri2x(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float_complex,
                            lda: c_int, ipiv: *const c_int, nb: c_int)
                            -> c_int;
    pub fn LAPACKE_chetri2x_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                                 a: *mut c_float_complex, lda: c_int, ipiv: *const c_int,
                                 work: *mut c_float_complex, nb: c_int)
                                 -> c_int;
    pub fn LAPACKE_chetrs2(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                           a: *const c_float_complex, lda: c_int, ipiv: *const c_int,
                           b: *mut c_float_complex, ldb: c_int)
                           -> c_int;
    pub fn LAPACKE_chetrs2_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                                a: *const c_float_complex, lda: c_int, ipiv: *const c_int,
                                b: *mut c_float_complex, ldb: c_int, work: *mut c_float_complex)
                                -> c_int;
    pub fn LAPACKE_csyconv(matrix_layout: c_int, uplo: c_char, way: c_char, n: c_int,
                           a: *mut c_float_complex, lda: c_int, ipiv: *const c_int,
                           work: *mut c_float_complex)
                           -> c_int;
    pub fn LAPACKE_csyconv_work(matrix_layout: c_int, uplo: c_char, way: c_char, n: c_int,
                                a: *mut c_float_complex, lda: c_int, ipiv: *const c_int,
                                work: *mut c_float_complex)
                                -> c_int;
    pub fn LAPACKE_csyswapr(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float_complex,
                            i1: c_int, i2: c_int)
                            -> c_int;
    pub fn LAPACKE_csyswapr_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                                 a: *mut c_float_complex, i1: c_int, i2: c_int)
                                 -> c_int;
    pub fn LAPACKE_csytri2(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float_complex,
                           lda: c_int, ipiv: *const c_int)
                           -> c_int;
    pub fn LAPACKE_csytri2_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                                a: *mut c_float_complex, lda: c_int, ipiv: *const c_int,
                                work: *mut c_float_complex, lwork: c_int)
                                -> c_int;
    pub fn LAPACKE_csytri2x(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float_complex,
                            lda: c_int, ipiv: *const c_int, nb: c_int)
                            -> c_int;
    pub fn LAPACKE_csytri2x_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                                 a: *mut c_float_complex, lda: c_int, ipiv: *const c_int,
                                 work: *mut c_float_complex, nb: c_int)
                                 -> c_int;
    pub fn LAPACKE_csytrs2(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                           a: *const c_float_complex, lda: c_int, ipiv: *const c_int,
                           b: *mut c_float_complex, ldb: c_int)
                           -> c_int;
    pub fn LAPACKE_csytrs2_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                                a: *const c_float_complex, lda: c_int, ipiv: *const c_int,
                                b: *mut c_float_complex, ldb: c_int, work: *mut c_float_complex)
                                -> c_int;
    pub fn LAPACKE_cunbdb(matrix_layout: c_int, trans: c_char, signs: c_char, m: c_int, p: c_int,
                          q: c_int, x11: *mut c_float_complex, ldx11: c_int,
                          x12: *mut c_float_complex, ldx12: c_int, x21: *mut c_float_complex,
                          ldx21: c_int, x22: *mut c_float_complex, ldx22: c_int,
                          theta: *mut c_float, phi: *mut c_float, taup1: *mut c_float_complex,
                          taup2: *mut c_float_complex, tauq1: *mut c_float_complex,
                          tauq2: *mut c_float_complex)
                          -> c_int;
    pub fn LAPACKE_cunbdb_work(matrix_layout: c_int, trans: c_char, signs: c_char, m: c_int,
                               p: c_int, q: c_int, x11: *mut c_float_complex, ldx11: c_int,
                               x12: *mut c_float_complex, ldx12: c_int, x21: *mut c_float_complex,
                               ldx21: c_int, x22: *mut c_float_complex, ldx22: c_int,
                               theta: *mut c_float, phi: *mut c_float, taup1: *mut c_float_complex,
                               taup2: *mut c_float_complex, tauq1: *mut c_float_complex,
                               tauq2: *mut c_float_complex, work: *mut c_float_complex,
                               lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_cuncsd(matrix_layout: c_int, jobu1: c_char, jobu2: c_char, jobv1t: c_char,
                          jobv2t: c_char, trans: c_char, signs: c_char, m: c_int, p: c_int,
                          q: c_int, x11: *mut c_float_complex, ldx11: c_int,
                          x12: *mut c_float_complex, ldx12: c_int, x21: *mut c_float_complex,
                          ldx21: c_int, x22: *mut c_float_complex, ldx22: c_int,
                          theta: *mut c_float, u1: *mut c_float_complex, ldu1: c_int,
                          u2: *mut c_float_complex, ldu2: c_int, v1t: *mut c_float_complex,
                          ldv1t: c_int, v2t: *mut c_float_complex, ldv2t: c_int)
                          -> c_int;
    pub fn LAPACKE_cuncsd_work(matrix_layout: c_int, jobu1: c_char, jobu2: c_char, jobv1t: c_char,
                               jobv2t: c_char, trans: c_char, signs: c_char, m: c_int, p: c_int,
                               q: c_int, x11: *mut c_float_complex, ldx11: c_int,
                               x12: *mut c_float_complex, ldx12: c_int, x21: *mut c_float_complex,
                               ldx21: c_int, x22: *mut c_float_complex, ldx22: c_int,
                               theta: *mut c_float, u1: *mut c_float_complex, ldu1: c_int,
                               u2: *mut c_float_complex, ldu2: c_int, v1t: *mut c_float_complex,
                               ldv1t: c_int, v2t: *mut c_float_complex, ldv2t: c_int,
                               work: *mut c_float_complex, lwork: c_int, rwork: *mut c_float,
                               lrwork: c_int, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_cuncsd2by1(matrix_layout: c_int, jobu1: c_char, jobu2: c_char, jobv1t: c_char,
                              m: c_int, p: c_int, q: c_int, x11: *mut c_float_complex,
                              ldx11: c_int, x21: *mut c_float_complex, ldx21: c_int,
                              theta: *mut c_float_complex, u1: *mut c_float_complex, ldu1: c_int,
                              u2: *mut c_float_complex, ldu2: c_int, v1t: *mut c_float_complex,
                              ldv1t: c_int)
                              -> c_int;
    pub fn LAPACKE_cuncsd2by1_work(matrix_layout: c_int, jobu1: c_char, jobu2: c_char,
                                   jobv1t: c_char, m: c_int, p: c_int, q: c_int,
                                   x11: *mut c_float_complex, ldx11: c_int,
                                   x21: *mut c_float_complex, ldx21: c_int,
                                   theta: *mut c_float_complex, u1: *mut c_float_complex,
                                   ldu1: c_int, u2: *mut c_float_complex, ldu2: c_int,
                                   v1t: *mut c_float_complex, ldv1t: c_int,
                                   work: *mut c_float_complex, lwork: c_int, rwork: *mut c_float,
                                   lrwork: c_int, iwork: *mut c_int)
                                   -> c_int;
    pub fn LAPACKE_dbbcsd(matrix_layout: c_int, jobu1: c_char, jobu2: c_char, jobv1t: c_char,
                          jobv2t: c_char, trans: c_char, m: c_int, p: c_int, q: c_int,
                          theta: *mut c_double, phi: *mut c_double, u1: *mut c_double, ldu1: c_int,
                          u2: *mut c_double, ldu2: c_int, v1t: *mut c_double, ldv1t: c_int,
                          v2t: *mut c_double, ldv2t: c_int, b11d: *mut c_double,
                          b11e: *mut c_double, b12d: *mut c_double, b12e: *mut c_double,
                          b21d: *mut c_double, b21e: *mut c_double, b22d: *mut c_double,
                          b22e: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_dbbcsd_work(matrix_layout: c_int, jobu1: c_char, jobu2: c_char, jobv1t: c_char,
                               jobv2t: c_char, trans: c_char, m: c_int, p: c_int, q: c_int,
                               theta: *mut c_double, phi: *mut c_double, u1: *mut c_double,
                               ldu1: c_int, u2: *mut c_double, ldu2: c_int, v1t: *mut c_double,
                               ldv1t: c_int, v2t: *mut c_double, ldv2t: c_int, b11d: *mut c_double,
                               b11e: *mut c_double, b12d: *mut c_double, b12e: *mut c_double,
                               b21d: *mut c_double, b21e: *mut c_double, b22d: *mut c_double,
                               b22e: *mut c_double, work: *mut c_double, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dorbdb(matrix_layout: c_int, trans: c_char, signs: c_char, m: c_int, p: c_int,
                          q: c_int, x11: *mut c_double, ldx11: c_int, x12: *mut c_double,
                          ldx12: c_int, x21: *mut c_double, ldx21: c_int, x22: *mut c_double,
                          ldx22: c_int, theta: *mut c_double, phi: *mut c_double,
                          taup1: *mut c_double, taup2: *mut c_double, tauq1: *mut c_double,
                          tauq2: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_dorbdb_work(matrix_layout: c_int, trans: c_char, signs: c_char, m: c_int,
                               p: c_int, q: c_int, x11: *mut c_double, ldx11: c_int,
                               x12: *mut c_double, ldx12: c_int, x21: *mut c_double, ldx21: c_int,
                               x22: *mut c_double, ldx22: c_int, theta: *mut c_double,
                               phi: *mut c_double, taup1: *mut c_double, taup2: *mut c_double,
                               tauq1: *mut c_double, tauq2: *mut c_double, work: *mut c_double,
                               lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dorcsd(matrix_layout: c_int, jobu1: c_char, jobu2: c_char, jobv1t: c_char,
                          jobv2t: c_char, trans: c_char, signs: c_char, m: c_int, p: c_int,
                          q: c_int, x11: *mut c_double, ldx11: c_int, x12: *mut c_double,
                          ldx12: c_int, x21: *mut c_double, ldx21: c_int, x22: *mut c_double,
                          ldx22: c_int, theta: *mut c_double, u1: *mut c_double, ldu1: c_int,
                          u2: *mut c_double, ldu2: c_int, v1t: *mut c_double, ldv1t: c_int,
                          v2t: *mut c_double, ldv2t: c_int)
                          -> c_int;
    pub fn LAPACKE_dorcsd_work(matrix_layout: c_int, jobu1: c_char, jobu2: c_char, jobv1t: c_char,
                               jobv2t: c_char, trans: c_char, signs: c_char, m: c_int, p: c_int,
                               q: c_int, x11: *mut c_double, ldx11: c_int, x12: *mut c_double,
                               ldx12: c_int, x21: *mut c_double, ldx21: c_int, x22: *mut c_double,
                               ldx22: c_int, theta: *mut c_double, u1: *mut c_double, ldu1: c_int,
                               u2: *mut c_double, ldu2: c_int, v1t: *mut c_double, ldv1t: c_int,
                               v2t: *mut c_double, ldv2t: c_int, work: *mut c_double, lwork: c_int,
                               iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dorcsd2by1(matrix_layout: c_int, jobu1: c_char, jobu2: c_char, jobv1t: c_char,
                              m: c_int, p: c_int, q: c_int, x11: *mut c_double, ldx11: c_int,
                              x21: *mut c_double, ldx21: c_int, theta: *mut c_double,
                              u1: *mut c_double, ldu1: c_int, u2: *mut c_double, ldu2: c_int,
                              v1t: *mut c_double, ldv1t: c_int)
                              -> c_int;
    pub fn LAPACKE_dorcsd2by1_work(matrix_layout: c_int, jobu1: c_char, jobu2: c_char,
                                   jobv1t: c_char, m: c_int, p: c_int, q: c_int,
                                   x11: *mut c_double, ldx11: c_int, x21: *mut c_double,
                                   ldx21: c_int, theta: *mut c_double, u1: *mut c_double,
                                   ldu1: c_int, u2: *mut c_double, ldu2: c_int, v1t: *mut c_double,
                                   ldv1t: c_int, work: *mut c_double, lwork: c_int,
                                   iwork: *mut c_int)
                                   -> c_int;
    pub fn LAPACKE_dsyconv(matrix_layout: c_int, uplo: c_char, way: c_char, n: c_int,
                           a: *mut c_double, lda: c_int, ipiv: *const c_int, work: *mut c_double)
                           -> c_int;
    pub fn LAPACKE_dsyconv_work(matrix_layout: c_int, uplo: c_char, way: c_char, n: c_int,
                                a: *mut c_double, lda: c_int, ipiv: *const c_int,
                                work: *mut c_double)
                                -> c_int;
    pub fn LAPACKE_dsyswapr(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double,
                            i1: c_int, i2: c_int)
                            -> c_int;
    pub fn LAPACKE_dsyswapr_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double,
                                 i1: c_int, i2: c_int)
                                 -> c_int;
    pub fn LAPACKE_dsytri2(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double,
                           lda: c_int, ipiv: *const c_int)
                           -> c_int;
    pub fn LAPACKE_dsytri2_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double,
                                lda: c_int, ipiv: *const c_int, work: *mut c_double_complex,
                                lwork: c_int)
                                -> c_int;
    pub fn LAPACKE_dsytri2x(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double,
                            lda: c_int, ipiv: *const c_int, nb: c_int)
                            -> c_int;
    pub fn LAPACKE_dsytri2x_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double,
                                 lda: c_int, ipiv: *const c_int, work: *mut c_double, nb: c_int)
                                 -> c_int;
    pub fn LAPACKE_dsytrs2(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                           a: *const c_double, lda: c_int, ipiv: *const c_int, b: *mut c_double,
                           ldb: c_int)
                           -> c_int;
    pub fn LAPACKE_dsytrs2_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                                a: *const c_double, lda: c_int, ipiv: *const c_int,
                                b: *mut c_double, ldb: c_int, work: *mut c_double)
                                -> c_int;
    pub fn LAPACKE_sbbcsd(matrix_layout: c_int, jobu1: c_char, jobu2: c_char, jobv1t: c_char,
                          jobv2t: c_char, trans: c_char, m: c_int, p: c_int, q: c_int,
                          theta: *mut c_float, phi: *mut c_float, u1: *mut c_float, ldu1: c_int,
                          u2: *mut c_float, ldu2: c_int, v1t: *mut c_float, ldv1t: c_int,
                          v2t: *mut c_float, ldv2t: c_int, b11d: *mut c_float, b11e: *mut c_float,
                          b12d: *mut c_float, b12e: *mut c_float, b21d: *mut c_float,
                          b21e: *mut c_float, b22d: *mut c_float, b22e: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_sbbcsd_work(matrix_layout: c_int, jobu1: c_char, jobu2: c_char, jobv1t: c_char,
                               jobv2t: c_char, trans: c_char, m: c_int, p: c_int, q: c_int,
                               theta: *mut c_float, phi: *mut c_float, u1: *mut c_float,
                               ldu1: c_int, u2: *mut c_float, ldu2: c_int, v1t: *mut c_float,
                               ldv1t: c_int, v2t: *mut c_float, ldv2t: c_int, b11d: *mut c_float,
                               b11e: *mut c_float, b12d: *mut c_float, b12e: *mut c_float,
                               b21d: *mut c_float, b21e: *mut c_float, b22d: *mut c_float,
                               b22e: *mut c_float, work: *mut c_float, lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_sorbdb(matrix_layout: c_int, trans: c_char, signs: c_char, m: c_int, p: c_int,
                          q: c_int, x11: *mut c_float, ldx11: c_int, x12: *mut c_float,
                          ldx12: c_int, x21: *mut c_float, ldx21: c_int, x22: *mut c_float,
                          ldx22: c_int, theta: *mut c_float, phi: *mut c_float,
                          taup1: *mut c_float, taup2: *mut c_float, tauq1: *mut c_float,
                          tauq2: *mut c_float)
                          -> c_int;
    pub fn LAPACKE_sorbdb_work(matrix_layout: c_int, trans: c_char, signs: c_char, m: c_int,
                               p: c_int, q: c_int, x11: *mut c_float, ldx11: c_int,
                               x12: *mut c_float, ldx12: c_int, x21: *mut c_float, ldx21: c_int,
                               x22: *mut c_float, ldx22: c_int, theta: *mut c_float,
                               phi: *mut c_float, taup1: *mut c_float, taup2: *mut c_float,
                               tauq1: *mut c_float, tauq2: *mut c_float, work: *mut c_float,
                               lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_sorcsd(matrix_layout: c_int, jobu1: c_char, jobu2: c_char, jobv1t: c_char,
                          jobv2t: c_char, trans: c_char, signs: c_char, m: c_int, p: c_int,
                          q: c_int, x11: *mut c_float, ldx11: c_int, x12: *mut c_float,
                          ldx12: c_int, x21: *mut c_float, ldx21: c_int, x22: *mut c_float,
                          ldx22: c_int, theta: *mut c_float, u1: *mut c_float, ldu1: c_int,
                          u2: *mut c_float, ldu2: c_int, v1t: *mut c_float, ldv1t: c_int,
                          v2t: *mut c_float, ldv2t: c_int)
                          -> c_int;
    pub fn LAPACKE_sorcsd_work(matrix_layout: c_int, jobu1: c_char, jobu2: c_char, jobv1t: c_char,
                               jobv2t: c_char, trans: c_char, signs: c_char, m: c_int, p: c_int,
                               q: c_int, x11: *mut c_float, ldx11: c_int, x12: *mut c_float,
                               ldx12: c_int, x21: *mut c_float, ldx21: c_int, x22: *mut c_float,
                               ldx22: c_int, theta: *mut c_float, u1: *mut c_float, ldu1: c_int,
                               u2: *mut c_float, ldu2: c_int, v1t: *mut c_float, ldv1t: c_int,
                               v2t: *mut c_float, ldv2t: c_int, work: *mut c_float, lwork: c_int,
                               iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_sorcsd2by1(matrix_layout: c_int, jobu1: c_char, jobu2: c_char, jobv1t: c_char,
                              m: c_int, p: c_int, q: c_int, x11: *mut c_float, ldx11: c_int,
                              x21: *mut c_float, ldx21: c_int, theta: *mut c_float,
                              u1: *mut c_float, ldu1: c_int, u2: *mut c_float, ldu2: c_int,
                              v1t: *mut c_float, ldv1t: c_int)
                              -> c_int;
    pub fn LAPACKE_sorcsd2by1_work(matrix_layout: c_int, jobu1: c_char, jobu2: c_char,
                                   jobv1t: c_char, m: c_int, p: c_int, q: c_int, x11: *mut c_float,
                                   ldx11: c_int, x21: *mut c_float, ldx21: c_int,
                                   theta: *mut c_float, u1: *mut c_float, ldu1: c_int,
                                   u2: *mut c_float, ldu2: c_int, v1t: *mut c_float, ldv1t: c_int,
                                   work: *mut c_float, lwork: c_int, iwork: *mut c_int)
                                   -> c_int;
    pub fn LAPACKE_ssyconv(matrix_layout: c_int, uplo: c_char, way: c_char, n: c_int,
                           a: *mut c_float, lda: c_int, ipiv: *const c_int, work: *mut c_float)
                           -> c_int;
    pub fn LAPACKE_ssyconv_work(matrix_layout: c_int, uplo: c_char, way: c_char, n: c_int,
                                a: *mut c_float, lda: c_int, ipiv: *const c_int,
                                work: *mut c_float)
                                -> c_int;
    pub fn LAPACKE_ssyswapr(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float,
                            i1: c_int, i2: c_int)
                            -> c_int;
    pub fn LAPACKE_ssyswapr_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float,
                                 i1: c_int, i2: c_int)
                                 -> c_int;
    pub fn LAPACKE_ssytri2(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float,
                           lda: c_int, ipiv: *const c_int)
                           -> c_int;
    pub fn LAPACKE_ssytri2_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float,
                                lda: c_int, ipiv: *const c_int, work: *mut c_float_complex,
                                lwork: c_int)
                                -> c_int;
    pub fn LAPACKE_ssytri2x(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float,
                            lda: c_int, ipiv: *const c_int, nb: c_int)
                            -> c_int;
    pub fn LAPACKE_ssytri2x_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float,
                                 lda: c_int, ipiv: *const c_int, work: *mut c_float, nb: c_int)
                                 -> c_int;
    pub fn LAPACKE_ssytrs2(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                           a: *const c_float, lda: c_int, ipiv: *const c_int, b: *mut c_float,
                           ldb: c_int)
                           -> c_int;
    pub fn LAPACKE_ssytrs2_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                                a: *const c_float, lda: c_int, ipiv: *const c_int, b: *mut c_float,
                                ldb: c_int, work: *mut c_float)
                                -> c_int;
    pub fn LAPACKE_zbbcsd(matrix_layout: c_int, jobu1: c_char, jobu2: c_char, jobv1t: c_char,
                          jobv2t: c_char, trans: c_char, m: c_int, p: c_int, q: c_int,
                          theta: *mut c_double, phi: *mut c_double, u1: *mut c_double_complex,
                          ldu1: c_int, u2: *mut c_double_complex, ldu2: c_int,
                          v1t: *mut c_double_complex, ldv1t: c_int, v2t: *mut c_double_complex,
                          ldv2t: c_int, b11d: *mut c_double, b11e: *mut c_double,
                          b12d: *mut c_double, b12e: *mut c_double, b21d: *mut c_double,
                          b21e: *mut c_double, b22d: *mut c_double, b22e: *mut c_double)
                          -> c_int;
    pub fn LAPACKE_zbbcsd_work(matrix_layout: c_int, jobu1: c_char, jobu2: c_char, jobv1t: c_char,
                               jobv2t: c_char, trans: c_char, m: c_int, p: c_int, q: c_int,
                               theta: *mut c_double, phi: *mut c_double, u1: *mut c_double_complex,
                               ldu1: c_int, u2: *mut c_double_complex, ldu2: c_int,
                               v1t: *mut c_double_complex, ldv1t: c_int,
                               v2t: *mut c_double_complex, ldv2t: c_int, b11d: *mut c_double,
                               b11e: *mut c_double, b12d: *mut c_double, b12e: *mut c_double,
                               b21d: *mut c_double, b21e: *mut c_double, b22d: *mut c_double,
                               b22e: *mut c_double, rwork: *mut c_double, lrwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zheswapr(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double_complex,
                            i1: c_int, i2: c_int)
                            -> c_int;
    pub fn LAPACKE_zheswapr_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                                 a: *mut c_double_complex, i1: c_int, i2: c_int)
                                 -> c_int;
    pub fn LAPACKE_zhetri2(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double_complex,
                           lda: c_int, ipiv: *const c_int)
                           -> c_int;
    pub fn LAPACKE_zhetri2_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                                a: *mut c_double_complex, lda: c_int, ipiv: *const c_int,
                                work: *mut c_double_complex, lwork: c_int)
                                -> c_int;
    pub fn LAPACKE_zhetri2x(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double_complex,
                            lda: c_int, ipiv: *const c_int, nb: c_int)
                            -> c_int;
    pub fn LAPACKE_zhetri2x_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                                 a: *mut c_double_complex, lda: c_int, ipiv: *const c_int,
                                 work: *mut c_double_complex, nb: c_int)
                                 -> c_int;
    pub fn LAPACKE_zhetrs2(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                           a: *const c_double_complex, lda: c_int, ipiv: *const c_int,
                           b: *mut c_double_complex, ldb: c_int)
                           -> c_int;
    pub fn LAPACKE_zhetrs2_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                                a: *const c_double_complex, lda: c_int, ipiv: *const c_int,
                                b: *mut c_double_complex, ldb: c_int, work: *mut c_double_complex)
                                -> c_int;
    pub fn LAPACKE_zsyconv(matrix_layout: c_int, uplo: c_char, way: c_char, n: c_int,
                           a: *mut c_double_complex, lda: c_int, ipiv: *const c_int,
                           work: *mut c_double_complex)
                           -> c_int;
    pub fn LAPACKE_zsyconv_work(matrix_layout: c_int, uplo: c_char, way: c_char, n: c_int,
                                a: *mut c_double_complex, lda: c_int, ipiv: *const c_int,
                                work: *mut c_double_complex)
                                -> c_int;
    pub fn LAPACKE_zsyswapr(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double_complex,
                            i1: c_int, i2: c_int)
                            -> c_int;
    pub fn LAPACKE_zsyswapr_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                                 a: *mut c_double_complex, i1: c_int, i2: c_int)
                                 -> c_int;
    pub fn LAPACKE_zsytri2(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double_complex,
                           lda: c_int, ipiv: *const c_int)
                           -> c_int;
    pub fn LAPACKE_zsytri2_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                                a: *mut c_double_complex, lda: c_int, ipiv: *const c_int,
                                work: *mut c_double_complex, lwork: c_int)
                                -> c_int;
    pub fn LAPACKE_zsytri2x(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double_complex,
                            lda: c_int, ipiv: *const c_int, nb: c_int)
                            -> c_int;
    pub fn LAPACKE_zsytri2x_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                                 a: *mut c_double_complex, lda: c_int, ipiv: *const c_int,
                                 work: *mut c_double_complex, nb: c_int)
                                 -> c_int;
    pub fn LAPACKE_zsytrs2(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                           a: *const c_double_complex, lda: c_int, ipiv: *const c_int,
                           b: *mut c_double_complex, ldb: c_int)
                           -> c_int;
    pub fn LAPACKE_zsytrs2_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                                a: *const c_double_complex, lda: c_int, ipiv: *const c_int,
                                b: *mut c_double_complex, ldb: c_int, work: *mut c_double_complex)
                                -> c_int;
    pub fn LAPACKE_zunbdb(matrix_layout: c_int, trans: c_char, signs: c_char, m: c_int, p: c_int,
                          q: c_int, x11: *mut c_double_complex, ldx11: c_int,
                          x12: *mut c_double_complex, ldx12: c_int, x21: *mut c_double_complex,
                          ldx21: c_int, x22: *mut c_double_complex, ldx22: c_int,
                          theta: *mut c_double, phi: *mut c_double, taup1: *mut c_double_complex,
                          taup2: *mut c_double_complex, tauq1: *mut c_double_complex,
                          tauq2: *mut c_double_complex)
                          -> c_int;
    pub fn LAPACKE_zunbdb_work(matrix_layout: c_int, trans: c_char, signs: c_char, m: c_int,
                               p: c_int, q: c_int, x11: *mut c_double_complex, ldx11: c_int,
                               x12: *mut c_double_complex, ldx12: c_int,
                               x21: *mut c_double_complex, ldx21: c_int,
                               x22: *mut c_double_complex, ldx22: c_int, theta: *mut c_double,
                               phi: *mut c_double, taup1: *mut c_double_complex,
                               taup2: *mut c_double_complex, tauq1: *mut c_double_complex,
                               tauq2: *mut c_double_complex, work: *mut c_double_complex,
                               lwork: c_int)
                               -> c_int;
    pub fn LAPACKE_zuncsd(matrix_layout: c_int, jobu1: c_char, jobu2: c_char, jobv1t: c_char,
                          jobv2t: c_char, trans: c_char, signs: c_char, m: c_int, p: c_int,
                          q: c_int, x11: *mut c_double_complex, ldx11: c_int,
                          x12: *mut c_double_complex, ldx12: c_int, x21: *mut c_double_complex,
                          ldx21: c_int, x22: *mut c_double_complex, ldx22: c_int,
                          theta: *mut c_double, u1: *mut c_double_complex, ldu1: c_int,
                          u2: *mut c_double_complex, ldu2: c_int, v1t: *mut c_double_complex,
                          ldv1t: c_int, v2t: *mut c_double_complex, ldv2t: c_int)
                          -> c_int;
    pub fn LAPACKE_zuncsd_work(matrix_layout: c_int, jobu1: c_char, jobu2: c_char, jobv1t: c_char,
                               jobv2t: c_char, trans: c_char, signs: c_char, m: c_int, p: c_int,
                               q: c_int, x11: *mut c_double_complex, ldx11: c_int,
                               x12: *mut c_double_complex, ldx12: c_int,
                               x21: *mut c_double_complex, ldx21: c_int,
                               x22: *mut c_double_complex, ldx22: c_int, theta: *mut c_double,
                               u1: *mut c_double_complex, ldu1: c_int, u2: *mut c_double_complex,
                               ldu2: c_int, v1t: *mut c_double_complex, ldv1t: c_int,
                               v2t: *mut c_double_complex, ldv2t: c_int,
                               work: *mut c_double_complex, lwork: c_int, rwork: *mut c_double,
                               lrwork: c_int, iwork: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zuncsd2by1(matrix_layout: c_int, jobu1: c_char, jobu2: c_char, jobv1t: c_char,
                              m: c_int, p: c_int, q: c_int, x11: *mut c_double_complex,
                              ldx11: c_int, x21: *mut c_double_complex, ldx21: c_int,
                              theta: *mut c_double_complex, u1: *mut c_double_complex, ldu1: c_int,
                              u2: *mut c_double_complex, ldu2: c_int, v1t: *mut c_double_complex,
                              ldv1t: c_int)
                              -> c_int;
    pub fn LAPACKE_zuncsd2by1_work(matrix_layout: c_int, jobu1: c_char, jobu2: c_char,
                                   jobv1t: c_char, m: c_int, p: c_int, q: c_int,
                                   x11: *mut c_double_complex, ldx11: c_int,
                                   x21: *mut c_double_complex, ldx21: c_int,
                                   theta: *mut c_double_complex, u1: *mut c_double_complex,
                                   ldu1: c_int, u2: *mut c_double_complex, ldu2: c_int,
                                   v1t: *mut c_double_complex, ldv1t: c_int,
                                   work: *mut c_double_complex, lwork: c_int, rwork: *mut c_double,
                                   lrwork: c_int, iwork: *mut c_int)
                                   -> c_int;

    // Version 3.4.0
    pub fn LAPACKE_sgemqrt(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                           k: c_int, nb: c_int, v: *const c_float, ldv: c_int, t: *const c_float,
                           ldt: c_int, c: *mut c_float, ldc: c_int)
                           -> c_int;
    pub fn LAPACKE_dgemqrt(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                           k: c_int, nb: c_int, v: *const c_double, ldv: c_int, t: *const c_double,
                           ldt: c_int, c: *mut c_double, ldc: c_int)
                           -> c_int;
    pub fn LAPACKE_cgemqrt(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                           k: c_int, nb: c_int, v: *const c_float_complex, ldv: c_int,
                           t: *const c_float_complex, ldt: c_int, c: *mut c_float_complex,
                           ldc: c_int)
                           -> c_int;
    pub fn LAPACKE_zgemqrt(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                           k: c_int, nb: c_int, v: *const c_double_complex, ldv: c_int,
                           t: *const c_double_complex, ldt: c_int, c: *mut c_double_complex,
                           ldc: c_int)
                           -> c_int;

    pub fn LAPACKE_sgeqrt(matrix_layout: c_int, m: c_int, n: c_int, nb: c_int, a: *mut c_float,
                          lda: c_int, t: *mut c_float, ldt: c_int)
                          -> c_int;
    pub fn LAPACKE_dgeqrt(matrix_layout: c_int, m: c_int, n: c_int, nb: c_int, a: *mut c_double,
                          lda: c_int, t: *mut c_double, ldt: c_int)
                          -> c_int;
    pub fn LAPACKE_cgeqrt(matrix_layout: c_int, m: c_int, n: c_int, nb: c_int,
                          a: *mut c_float_complex, lda: c_int, t: *mut c_float_complex, ldt: c_int)
                          -> c_int;
    pub fn LAPACKE_zgeqrt(matrix_layout: c_int, m: c_int, n: c_int, nb: c_int,
                          a: *mut c_double_complex, lda: c_int, t: *mut c_double_complex,
                          ldt: c_int)
                          -> c_int;

    pub fn LAPACKE_sgeqrt2(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float, lda: c_int,
                           t: *mut c_float, ldt: c_int)
                           -> c_int;
    pub fn LAPACKE_dgeqrt2(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double, lda: c_int,
                           t: *mut c_double, ldt: c_int)
                           -> c_int;
    pub fn LAPACKE_cgeqrt2(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                           lda: c_int, t: *mut c_float_complex, ldt: c_int)
                           -> c_int;
    pub fn LAPACKE_zgeqrt2(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                           lda: c_int, t: *mut c_double_complex, ldt: c_int)
                           -> c_int;

    pub fn LAPACKE_sgeqrt3(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float, lda: c_int,
                           t: *mut c_float, ldt: c_int)
                           -> c_int;
    pub fn LAPACKE_dgeqrt3(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double, lda: c_int,
                           t: *mut c_double, ldt: c_int)
                           -> c_int;
    pub fn LAPACKE_cgeqrt3(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                           lda: c_int, t: *mut c_float_complex, ldt: c_int)
                           -> c_int;
    pub fn LAPACKE_zgeqrt3(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                           lda: c_int, t: *mut c_double_complex, ldt: c_int)
                           -> c_int;

    pub fn LAPACKE_stpmqrt(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                           k: c_int, l: c_int, nb: c_int, v: *const c_float, ldv: c_int,
                           t: *const c_float, ldt: c_int, a: *mut c_float, lda: c_int,
                           b: *mut c_float, ldb: c_int)
                           -> c_int;
    pub fn LAPACKE_dtpmqrt(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                           k: c_int, l: c_int, nb: c_int, v: *const c_double, ldv: c_int,
                           t: *const c_double, ldt: c_int, a: *mut c_double, lda: c_int,
                           b: *mut c_double, ldb: c_int)
                           -> c_int;
    pub fn LAPACKE_ctpmqrt(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                           k: c_int, l: c_int, nb: c_int, v: *const c_float_complex, ldv: c_int,
                           t: *const c_float_complex, ldt: c_int, a: *mut c_float_complex,
                           lda: c_int, b: *mut c_float_complex, ldb: c_int)
                           -> c_int;
    pub fn LAPACKE_ztpmqrt(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int, n: c_int,
                           k: c_int, l: c_int, nb: c_int, v: *const c_double_complex, ldv: c_int,
                           t: *const c_double_complex, ldt: c_int, a: *mut c_double_complex,
                           lda: c_int, b: *mut c_double_complex, ldb: c_int)
                           -> c_int;

    pub fn LAPACKE_stpqrt(matrix_layout: c_int, m: c_int, n: c_int, l: c_int, nb: c_int,
                          a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int,
                          t: *mut c_float, ldt: c_int)
                          -> c_int;

    pub fn LAPACKE_dtpqrt(matrix_layout: c_int, m: c_int, n: c_int, l: c_int, nb: c_int,
                          a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int,
                          t: *mut c_double, ldt: c_int)
                          -> c_int;
    pub fn LAPACKE_ctpqrt(matrix_layout: c_int, m: c_int, n: c_int, l: c_int, nb: c_int,
                          a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex, ldb: c_int,
                          t: *mut c_float_complex, ldt: c_int)
                          -> c_int;
    pub fn LAPACKE_ztpqrt(matrix_layout: c_int, m: c_int, n: c_int, l: c_int, nb: c_int,
                          a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                          ldb: c_int, t: *mut c_double_complex, ldt: c_int)
                          -> c_int;

    pub fn LAPACKE_stpqrt2(matrix_layout: c_int, m: c_int, n: c_int, l: c_int, a: *mut c_float,
                           lda: c_int, b: *mut c_float, ldb: c_int, t: *mut c_float, ldt: c_int)
                           -> c_int;
    pub fn LAPACKE_dtpqrt2(matrix_layout: c_int, m: c_int, n: c_int, l: c_int, a: *mut c_double,
                           lda: c_int, b: *mut c_double, ldb: c_int, t: *mut c_double, ldt: c_int)
                           -> c_int;
    pub fn LAPACKE_ctpqrt2(matrix_layout: c_int, m: c_int, n: c_int, l: c_int,
                           a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex,
                           ldb: c_int, t: *mut c_float_complex, ldt: c_int)
                           -> c_int;
    pub fn LAPACKE_ztpqrt2(matrix_layout: c_int, m: c_int, n: c_int, l: c_int,
                           a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                           ldb: c_int, t: *mut c_double_complex, ldt: c_int)
                           -> c_int;

    pub fn LAPACKE_stprfb(matrix_layout: c_int, side: c_char, trans: c_char, direct: c_char,
                          storev: c_char, m: c_int, n: c_int, k: c_int, l: c_int,
                          v: *const c_float, ldv: c_int, t: *const c_float, ldt: c_int,
                          a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_dtprfb(matrix_layout: c_int, side: c_char, trans: c_char, direct: c_char,
                          storev: c_char, m: c_int, n: c_int, k: c_int, l: c_int,
                          v: *const c_double, ldv: c_int, t: *const c_double, ldt: c_int,
                          a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_ctprfb(matrix_layout: c_int, side: c_char, trans: c_char, direct: c_char,
                          storev: c_char, m: c_int, n: c_int, k: c_int, l: c_int,
                          v: *const c_float_complex, ldv: c_int, t: *const c_float_complex,
                          ldt: c_int, a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex,
                          ldb: c_int)
                          -> c_int;
    pub fn LAPACKE_ztprfb(matrix_layout: c_int, side: c_char, trans: c_char, direct: c_char,
                          storev: c_char, m: c_int, n: c_int, k: c_int, l: c_int,
                          v: *const c_double_complex, ldv: c_int, t: *const c_double_complex,
                          ldt: c_int, a: *mut c_double_complex, lda: c_int,
                          b: *mut c_double_complex, ldb: c_int)
                          -> c_int;

    pub fn LAPACKE_sgemqrt_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                                n: c_int, k: c_int, nb: c_int, v: *const c_float, ldv: c_int,
                                t: *const c_float, ldt: c_int, c: *mut c_float, ldc: c_int,
                                work: *mut c_float)
                                -> c_int;
    pub fn LAPACKE_dgemqrt_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                                n: c_int, k: c_int, nb: c_int, v: *const c_double, ldv: c_int,
                                t: *const c_double, ldt: c_int, c: *mut c_double, ldc: c_int,
                                work: *mut c_double)
                                -> c_int;
    pub fn LAPACKE_cgemqrt_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                                n: c_int, k: c_int, nb: c_int, v: *const c_float_complex,
                                ldv: c_int, t: *const c_float_complex, ldt: c_int,
                                c: *mut c_float_complex, ldc: c_int, work: *mut c_float_complex)
                                -> c_int;
    pub fn LAPACKE_zgemqrt_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                                n: c_int, k: c_int, nb: c_int, v: *const c_double_complex,
                                ldv: c_int, t: *const c_double_complex, ldt: c_int,
                                c: *mut c_double_complex, ldc: c_int, work: *mut c_double_complex)
                                -> c_int;

    pub fn LAPACKE_sgeqrt_work(matrix_layout: c_int, m: c_int, n: c_int, nb: c_int,
                               a: *mut c_float, lda: c_int, t: *mut c_float, ldt: c_int,
                               work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dgeqrt_work(matrix_layout: c_int, m: c_int, n: c_int, nb: c_int,
                               a: *mut c_double, lda: c_int, t: *mut c_double, ldt: c_int,
                               work: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_cgeqrt_work(matrix_layout: c_int, m: c_int, n: c_int, nb: c_int,
                               a: *mut c_float_complex, lda: c_int, t: *mut c_float_complex,
                               ldt: c_int, work: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_zgeqrt_work(matrix_layout: c_int, m: c_int, n: c_int, nb: c_int,
                               a: *mut c_double_complex, lda: c_int, t: *mut c_double_complex,
                               ldt: c_int, work: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_sgeqrt2_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float,
                                lda: c_int, t: *mut c_float, ldt: c_int)
                                -> c_int;
    pub fn LAPACKE_dgeqrt2_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double,
                                lda: c_int, t: *mut c_double, ldt: c_int)
                                -> c_int;
    pub fn LAPACKE_cgeqrt2_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                                lda: c_int, t: *mut c_float_complex, ldt: c_int)
                                -> c_int;
    pub fn LAPACKE_zgeqrt2_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                                lda: c_int, t: *mut c_double_complex, ldt: c_int)
                                -> c_int;

    pub fn LAPACKE_sgeqrt3_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float,
                                lda: c_int, t: *mut c_float, ldt: c_int)
                                -> c_int;
    pub fn LAPACKE_dgeqrt3_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double,
                                lda: c_int, t: *mut c_double, ldt: c_int)
                                -> c_int;
    pub fn LAPACKE_cgeqrt3_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_float_complex,
                                lda: c_int, t: *mut c_float_complex, ldt: c_int)
                                -> c_int;
    pub fn LAPACKE_zgeqrt3_work(matrix_layout: c_int, m: c_int, n: c_int, a: *mut c_double_complex,
                                lda: c_int, t: *mut c_double_complex, ldt: c_int)
                                -> c_int;

    pub fn LAPACKE_stpmqrt_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                                n: c_int, k: c_int, l: c_int, nb: c_int, v: *const c_float,
                                ldv: c_int, t: *const c_float, ldt: c_int, a: *mut c_float,
                                lda: c_int, b: *mut c_float, ldb: c_int, work: *mut c_float)
                                -> c_int;
    pub fn LAPACKE_dtpmqrt_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                                n: c_int, k: c_int, l: c_int, nb: c_int, v: *const c_double,
                                ldv: c_int, t: *const c_double, ldt: c_int, a: *mut c_double,
                                lda: c_int, b: *mut c_double, ldb: c_int, work: *mut c_double)
                                -> c_int;
    pub fn LAPACKE_ctpmqrt_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                                n: c_int, k: c_int, l: c_int, nb: c_int, v: *const c_float_complex,
                                ldv: c_int, t: *const c_float_complex, ldt: c_int,
                                a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex,
                                ldb: c_int, work: *mut c_float_complex)
                                -> c_int;
    pub fn LAPACKE_ztpmqrt_work(matrix_layout: c_int, side: c_char, trans: c_char, m: c_int,
                                n: c_int, k: c_int, l: c_int, nb: c_int,
                                v: *const c_double_complex, ldv: c_int, t: *const c_double_complex,
                                ldt: c_int, a: *mut c_double_complex, lda: c_int,
                                b: *mut c_double_complex, ldb: c_int, work: *mut c_double_complex)
                                -> c_int;

    pub fn LAPACKE_stpqrt_work(matrix_layout: c_int, m: c_int, n: c_int, l: c_int, nb: c_int,
                               a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int,
                               t: *mut c_float, ldt: c_int, work: *mut c_float)
                               -> c_int;
    pub fn LAPACKE_dtpqrt_work(matrix_layout: c_int, m: c_int, n: c_int, l: c_int, nb: c_int,
                               a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int,
                               t: *mut c_double, ldt: c_int, work: *mut c_double)
                               -> c_int;
    pub fn LAPACKE_ctpqrt_work(matrix_layout: c_int, m: c_int, n: c_int, l: c_int, nb: c_int,
                               a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex,
                               ldb: c_int, t: *mut c_float_complex, ldt: c_int,
                               work: *mut c_float_complex)
                               -> c_int;
    pub fn LAPACKE_ztpqrt_work(matrix_layout: c_int, m: c_int, n: c_int, l: c_int, nb: c_int,
                               a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                               ldb: c_int, t: *mut c_double_complex, ldt: c_int,
                               work: *mut c_double_complex)
                               -> c_int;

    pub fn LAPACKE_stpqrt2_work(matrix_layout: c_int, m: c_int, n: c_int, l: c_int,
                                a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int,
                                t: *mut c_float, ldt: c_int)
                                -> c_int;
    pub fn LAPACKE_dtpqrt2_work(matrix_layout: c_int, m: c_int, n: c_int, l: c_int,
                                a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int,
                                t: *mut c_double, ldt: c_int)
                                -> c_int;
    pub fn LAPACKE_ctpqrt2_work(matrix_layout: c_int, m: c_int, n: c_int, l: c_int,
                                a: *mut c_float_complex, lda: c_int, b: *mut c_float_complex,
                                ldb: c_int, t: *mut c_float_complex, ldt: c_int)
                                -> c_int;
    pub fn LAPACKE_ztpqrt2_work(matrix_layout: c_int, m: c_int, n: c_int, l: c_int,
                                a: *mut c_double_complex, lda: c_int, b: *mut c_double_complex,
                                ldb: c_int, t: *mut c_double_complex, ldt: c_int)
                                -> c_int;

    pub fn LAPACKE_stprfb_work(matrix_layout: c_int, side: c_char, trans: c_char, direct: c_char,
                               storev: c_char, m: c_int, n: c_int, k: c_int, l: c_int,
                               v: *const c_float, ldv: c_int, t: *const c_float, ldt: c_int,
                               a: *mut c_float, lda: c_int, b: *mut c_float, ldb: c_int,
                               work: *const c_float, ldwork: c_int)
                               -> c_int;
    pub fn LAPACKE_dtprfb_work(matrix_layout: c_int, side: c_char, trans: c_char, direct: c_char,
                               storev: c_char, m: c_int, n: c_int, k: c_int, l: c_int,
                               v: *const c_double, ldv: c_int, t: *const c_double, ldt: c_int,
                               a: *mut c_double, lda: c_int, b: *mut c_double, ldb: c_int,
                               work: *const c_double, ldwork: c_int)
                               -> c_int;
    pub fn LAPACKE_ctprfb_work(matrix_layout: c_int, side: c_char, trans: c_char, direct: c_char,
                               storev: c_char, m: c_int, n: c_int, k: c_int, l: c_int,
                               v: *const c_float_complex, ldv: c_int, t: *const c_float_complex,
                               ldt: c_int, a: *mut c_float_complex, lda: c_int,
                               b: *mut c_float_complex, ldb: c_int, work: *mut c_float_complex,
                               ldwork: c_int)
                               -> c_int;
    pub fn LAPACKE_ztprfb_work(matrix_layout: c_int, side: c_char, trans: c_char, direct: c_char,
                               storev: c_char, m: c_int, n: c_int, k: c_int, l: c_int,
                               v: *const c_double_complex, ldv: c_int, t: *const c_double_complex,
                               ldt: c_int, a: *mut c_double_complex, lda: c_int,
                               b: *mut c_double_complex, ldb: c_int, work: *mut c_double_complex,
                               ldwork: c_int)
                               -> c_int;
    // Version 3.X.X
    pub fn LAPACKE_ssysv_rook(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                              a: *mut c_float, lda: c_int, ipiv: *mut c_int, b: *mut c_float,
                              ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_dsysv_rook(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                              a: *mut c_double, lda: c_int, ipiv: *mut c_int, b: *mut c_double,
                              ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_csysv_rook(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                              a: *mut c_float_complex, lda: c_int, ipiv: *mut c_int,
                              b: *mut c_float_complex, ldb: c_int)
                              -> c_int;
    pub fn LAPACKE_zsysv_rook(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                              a: *mut c_double_complex, lda: c_int, ipiv: *mut c_int,
                              b: *mut c_double_complex, ldb: c_int)
                              -> c_int;

    pub fn LAPACKE_ssytrf_rook(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float,
                               lda: c_int, ipiv: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_dsytrf_rook(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double,
                               lda: c_int, ipiv: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_csytrf_rook(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *mut c_float_complex, lda: c_int, ipiv: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zsytrf_rook(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *mut c_double_complex, lda: c_int, ipiv: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_ssytrs_rook(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *const c_float, lda: c_int, ipiv: *const c_int, b: *mut c_float,
                               ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_dsytrs_rook(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *const c_double, lda: c_int, ipiv: *const c_int,
                               b: *mut c_double, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_csytrs_rook(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *const c_float_complex, lda: c_int, ipiv: *const c_int,
                               b: *mut c_float_complex, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_zsytrs_rook(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *const c_double_complex, lda: c_int, ipiv: *const c_int,
                               b: *mut c_double_complex, ldb: c_int)
                               -> c_int;

    pub fn LAPACKE_chetrf_rook(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *mut c_float_complex, lda: c_int, ipiv: *mut c_int)
                               -> c_int;
    pub fn LAPACKE_zhetrf_rook(matrix_layout: c_int, uplo: c_char, n: c_int,
                               a: *mut c_double_complex, lda: c_int, ipiv: *mut c_int)
                               -> c_int;

    pub fn LAPACKE_chetrs_rook(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *const c_float_complex, lda: c_int, ipiv: *const c_int,
                               b: *mut c_float_complex, ldb: c_int)
                               -> c_int;
    pub fn LAPACKE_zhetrs_rook(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                               a: *const c_double_complex, lda: c_int, ipiv: *const c_int,
                               b: *mut c_double_complex, ldb: c_int)
                               -> c_int;

    pub fn LAPACKE_csyr(matrix_layout: c_int, uplo: c_char, n: c_int, alpha: c_float_complex,
                        x: *const c_float_complex, incx: c_int, a: *mut c_float_complex,
                        lda: c_int)
                        -> c_int;
    pub fn LAPACKE_zsyr(matrix_layout: c_int, uplo: c_char, n: c_int, alpha: c_double_complex,
                        x: *const c_double_complex, incx: c_int, a: *mut c_double_complex,
                        lda: c_int)
                        -> c_int;

    pub fn LAPACKE_ssysv_rook_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                                   a: *mut c_float, lda: c_int, ipiv: *mut c_int, b: *mut c_float,
                                   ldb: c_int, work: *mut c_float, lwork: c_int)
                                   -> c_int;
    pub fn LAPACKE_dsysv_rook_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                                   a: *mut c_double, lda: c_int, ipiv: *mut c_int,
                                   b: *mut c_double, ldb: c_int, work: *mut c_double, lwork: c_int)
                                   -> c_int;
    pub fn LAPACKE_csysv_rook_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                                   a: *mut c_float_complex, lda: c_int, ipiv: *mut c_int,
                                   b: *mut c_float_complex, ldb: c_int, work: *mut c_float_complex,
                                   lwork: c_int)
                                   -> c_int;
    pub fn LAPACKE_zsysv_rook_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                                   a: *mut c_double_complex, lda: c_int, ipiv: *mut c_int,
                                   b: *mut c_double_complex, ldb: c_int,
                                   work: *mut c_double_complex, lwork: c_int)
                                   -> c_int;

    pub fn LAPACKE_ssytrf_rook_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_float,
                                    lda: c_int, ipiv: *mut c_int, work: *mut c_float, lwork: c_int)
                                    -> c_int;
    pub fn LAPACKE_dsytrf_rook_work(matrix_layout: c_int, uplo: c_char, n: c_int, a: *mut c_double,
                                    lda: c_int, ipiv: *mut c_int, work: *mut c_double,
                                    lwork: c_int)
                                    -> c_int;
    pub fn LAPACKE_csytrf_rook_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                                    a: *mut c_float_complex, lda: c_int, ipiv: *mut c_int,
                                    work: *mut c_float_complex, lwork: c_int)
                                    -> c_int;
    pub fn LAPACKE_zsytrf_rook_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                                    a: *mut c_double_complex, lda: c_int, ipiv: *mut c_int,
                                    work: *mut c_double_complex, lwork: c_int)
                                    -> c_int;

    pub fn LAPACKE_ssytrs_rook_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                                    a: *const c_float, lda: c_int, ipiv: *const c_int,
                                    b: *mut c_float, ldb: c_int)
                                    -> c_int;
    pub fn LAPACKE_dsytrs_rook_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                                    a: *const c_double, lda: c_int, ipiv: *const c_int,
                                    b: *mut c_double, ldb: c_int)
                                    -> c_int;
    pub fn LAPACKE_csytrs_rook_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                                    a: *const c_float_complex, lda: c_int, ipiv: *const c_int,
                                    b: *mut c_float_complex, ldb: c_int)
                                    -> c_int;
    pub fn LAPACKE_zsytrs_rook_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                                    a: *const c_double_complex, lda: c_int, ipiv: *const c_int,
                                    b: *mut c_double_complex, ldb: c_int)
                                    -> c_int;

    pub fn LAPACKE_chetrf_rook_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                                    a: *mut c_float_complex, lda: c_int, ipiv: *mut c_int,
                                    work: *mut c_float_complex, lwork: c_int)
                                    -> c_int;
    pub fn LAPACKE_zhetrf_rook_work(matrix_layout: c_int, uplo: c_char, n: c_int,
                                    a: *mut c_double_complex, lda: c_int, ipiv: *mut c_int,
                                    work: *mut c_double_complex, lwork: c_int)
                                    -> c_int;

    pub fn LAPACKE_chetrs_rook_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                                    a: *const c_float_complex, lda: c_int, ipiv: *const c_int,
                                    b: *mut c_float_complex, ldb: c_int)
                                    -> c_int;
    pub fn LAPACKE_zhetrs_rook_work(matrix_layout: c_int, uplo: c_char, n: c_int, nrhs: c_int,
                                    a: *const c_double_complex, lda: c_int, ipiv: *const c_int,
                                    b: *mut c_double_complex, ldb: c_int)
                                    -> c_int;


    pub fn LAPACKE_csyr_work(matrix_layout: c_int, uplo: c_char, n: c_int, alpha: c_float_complex,
                             x: *const c_float_complex, incx: c_int, a: *mut c_float_complex,
                             lda: c_int)
                             -> c_int;
    pub fn LAPACKE_zsyr_work(matrix_layout: c_int, uplo: c_char, n: c_int, alpha: c_double_complex,
                             x: *const c_double_complex, incx: c_int, a: *mut c_double_complex,
                             lda: c_int)
                             -> c_int;
    pub fn LAPACKE_ilaver(vers_major: *const c_int, vers_minor: *const c_int,
                          vers_patch: *const c_int);

    pub fn LAPACK_sgetrf(m: *mut c_int, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         ipiv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgetrf(m: *mut c_int, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         ipiv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgetrf(m: *mut c_int, n: *mut c_int, a: *mut c_float_complex, lda: *mut c_int,
                         ipiv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zgetrf(m: *mut c_int, n: *mut c_int, a: *mut c_double_complex, lda: *mut c_int,
                         ipiv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sgetrf2(m: *mut c_int, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                          ipiv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgetrf2(m: *mut c_int, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                          ipiv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgetrf2(m: *mut c_int, n: *mut c_int, a: *mut c_float_complex, lda: *mut c_int,
                          ipiv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zgetrf2(m: *mut c_int, n: *mut c_int, a: *mut c_double_complex, lda: *mut c_int,
                          ipiv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sgbtrf(m: *mut c_int, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                         ab: *mut c_float, ldab: *mut c_int, ipiv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgbtrf(m: *mut c_int, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                         ab: *mut c_double, ldab: *mut c_int, ipiv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgbtrf(m: *mut c_int, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                         ab: *mut c_float_complex, ldab: *mut c_int, ipiv: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_zgbtrf(m: *mut c_int, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                         ab: *mut c_double_complex, ldab: *mut c_int, ipiv: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_sgttrf(n: *mut c_int, dl: *mut c_float, d: *mut c_float, du: *mut c_float,
                         du2: *mut c_float, ipiv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgttrf(n: *mut c_int, dl: *mut c_double, d: *mut c_double, du: *mut c_double,
                         du2: *mut c_double, ipiv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgttrf(n: *mut c_int, dl: *mut c_float_complex, d: *mut c_float_complex,
                         du: *mut c_float_complex, du2: *mut c_float_complex, ipiv: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_zgttrf(n: *mut c_int, dl: *mut c_double_complex, d: *mut c_double_complex,
                         du: *mut c_double_complex, du2: *mut c_double_complex, ipiv: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_spotrf2(uplo: *mut c_char, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                          info: *mut c_int);
    pub fn LAPACK_dpotrf2(uplo: *mut c_char, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                          info: *mut c_int);
    pub fn LAPACK_cpotrf2(uplo: *mut c_char, n: *mut c_int, a: *mut c_float_complex,
                          lda: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zpotrf2(uplo: *mut c_char, n: *mut c_int, a: *mut c_double_complex,
                          lda: *mut c_int, info: *mut c_int);
    pub fn LAPACK_spotrf(uplo: *mut c_char, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dpotrf(uplo: *mut c_char, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_cpotrf(uplo: *mut c_char, n: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zpotrf(uplo: *mut c_char, n: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dpstrf(uplo: *mut c_char, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         piv: *mut c_int, rank: *mut c_int, tol: *mut c_double,
                         work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_spstrf(uplo: *mut c_char, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         piv: *mut c_int, rank: *mut c_int, tol: *mut c_float, work: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_zpstrf(uplo: *mut c_char, n: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, piv: *mut c_int, rank: *mut c_int, tol: *mut c_double,
                         work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_cpstrf(uplo: *mut c_char, n: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, piv: *mut c_int, rank: *mut c_int, tol: *mut c_float,
                         work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dpftrf(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int, a: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_spftrf(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int, a: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_zpftrf(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         a: *mut c_double_complex, info: *mut c_int);
    pub fn LAPACK_cpftrf(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         a: *mut c_float_complex, info: *mut c_int);
    pub fn LAPACK_spptrf(uplo: *mut c_char, n: *mut c_int, ap: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dpptrf(uplo: *mut c_char, n: *mut c_int, ap: *mut c_double, info: *mut c_int);
    pub fn LAPACK_cpptrf(uplo: *mut c_char, n: *mut c_int, ap: *mut c_float_complex,
                         info: *mut c_int);
    pub fn LAPACK_zpptrf(uplo: *mut c_char, n: *mut c_int, ap: *mut c_double_complex,
                         info: *mut c_int);
    pub fn LAPACK_spbtrf(uplo: *mut c_char, n: *mut c_int, kd: *mut c_int, ab: *mut c_float,
                         ldab: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dpbtrf(uplo: *mut c_char, n: *mut c_int, kd: *mut c_int, ab: *mut c_double,
                         ldab: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cpbtrf(uplo: *mut c_char, n: *mut c_int, kd: *mut c_int,
                         ab: *mut c_float_complex, ldab: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zpbtrf(uplo: *mut c_char, n: *mut c_int, kd: *mut c_int,
                         ab: *mut c_double_complex, ldab: *mut c_int, info: *mut c_int);
    pub fn LAPACK_spttrf(n: *mut c_int, d: *mut c_float, e: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dpttrf(n: *mut c_int, d: *mut c_double, e: *mut c_double, info: *mut c_int);
    pub fn LAPACK_cpttrf(n: *mut c_int, d: *mut c_float, e: *mut c_float_complex,
                         info: *mut c_int);
    pub fn LAPACK_zpttrf(n: *mut c_int, d: *mut c_double, e: *mut c_double_complex,
                         info: *mut c_int);
    pub fn LAPACK_ssytrf(uplo: *mut c_char, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         ipiv: *mut c_int, work: *mut c_float, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dsytrf(uplo: *mut c_char, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         ipiv: *mut c_int, work: *mut c_double, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_csytrf(uplo: *mut c_char, n: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, ipiv: *mut c_int, work: *mut c_float_complex,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zsytrf(uplo: *mut c_char, n: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, ipiv: *mut c_int, work: *mut c_double_complex,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_chetrf(uplo: *mut c_char, n: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, ipiv: *mut c_int, work: *mut c_float_complex,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zhetrf(uplo: *mut c_char, n: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, ipiv: *mut c_int, work: *mut c_double_complex,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ssptrf(uplo: *mut c_char, n: *mut c_int, ap: *mut c_float, ipiv: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dsptrf(uplo: *mut c_char, n: *mut c_int, ap: *mut c_double, ipiv: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_csptrf(uplo: *mut c_char, n: *mut c_int, ap: *mut c_float_complex,
                         ipiv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zsptrf(uplo: *mut c_char, n: *mut c_int, ap: *mut c_double_complex,
                         ipiv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_chptrf(uplo: *mut c_char, n: *mut c_int, ap: *mut c_float_complex,
                         ipiv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zhptrf(uplo: *mut c_char, n: *mut c_int, ap: *mut c_double_complex,
                         ipiv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sgetrs(trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int, a: *const c_float,
                         lda: *mut c_int, ipiv: *const c_int, b: *mut c_float, ldb: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dgetrs(trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int, a: *const c_double,
                         lda: *mut c_int, ipiv: *const c_int, b: *mut c_double, ldb: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_cgetrs(trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *const c_float_complex, lda: *mut c_int, ipiv: *const c_int,
                         b: *mut c_float_complex, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zgetrs(trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *const c_double_complex, lda: *mut c_int, ipiv: *const c_int,
                         b: *mut c_double_complex, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sgbtrs(trans: *mut c_char, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                         nrhs: *mut c_int, ab: *const c_float, ldab: *mut c_int,
                         ipiv: *const c_int, b: *mut c_float, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgbtrs(trans: *mut c_char, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                         nrhs: *mut c_int, ab: *const c_double, ldab: *mut c_int,
                         ipiv: *const c_int, b: *mut c_double, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgbtrs(trans: *mut c_char, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                         nrhs: *mut c_int, ab: *const c_float_complex, ldab: *mut c_int,
                         ipiv: *const c_int, b: *mut c_float_complex, ldb: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_zgbtrs(trans: *mut c_char, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                         nrhs: *mut c_int, ab: *const c_double_complex, ldab: *mut c_int,
                         ipiv: *const c_int, b: *mut c_double_complex, ldb: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_sgttrs(trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int, dl: *const c_float,
                         d: *const c_float, du: *const c_float, du2: *const c_float,
                         ipiv: *const c_int, b: *mut c_float, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgttrs(trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int, dl: *const c_double,
                         d: *const c_double, du: *const c_double, du2: *const c_double,
                         ipiv: *const c_int, b: *mut c_double, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgttrs(trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         dl: *const c_float_complex, d: *const c_float_complex,
                         du: *const c_float_complex, du2: *const c_float_complex,
                         ipiv: *const c_int, b: *mut c_float_complex, ldb: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_zgttrs(trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         dl: *const c_double_complex, d: *const c_double_complex,
                         du: *const c_double_complex, du2: *const c_double_complex,
                         ipiv: *const c_int, b: *mut c_double_complex, ldb: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_spotrs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, a: *const c_float,
                         lda: *mut c_int, b: *mut c_float, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dpotrs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, a: *const c_double,
                         lda: *mut c_int, b: *mut c_double, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cpotrs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *const c_float_complex, lda: *mut c_int, b: *mut c_float_complex,
                         ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zpotrs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *const c_double_complex, lda: *mut c_int, b: *mut c_double_complex,
                         ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dpftrs(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *const c_double, b: *mut c_double, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_spftrs(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *const c_float, b: *mut c_float, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zpftrs(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *const c_double_complex, b: *mut c_double_complex, ldb: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_cpftrs(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *const c_float_complex, b: *mut c_float_complex, ldb: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_spptrs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, ap: *const c_float,
                         b: *mut c_float, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dpptrs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, ap: *const c_double,
                         b: *mut c_double, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cpptrs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         ap: *const c_float_complex, b: *mut c_float_complex, ldb: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_zpptrs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         ap: *const c_double_complex, b: *mut c_double_complex, ldb: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_spbtrs(uplo: *mut c_char, n: *mut c_int, kd: *mut c_int, nrhs: *mut c_int,
                         ab: *const c_float, ldab: *mut c_int, b: *mut c_float, ldb: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dpbtrs(uplo: *mut c_char, n: *mut c_int, kd: *mut c_int, nrhs: *mut c_int,
                         ab: *const c_double, ldab: *mut c_int, b: *mut c_double, ldb: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_cpbtrs(uplo: *mut c_char, n: *mut c_int, kd: *mut c_int, nrhs: *mut c_int,
                         ab: *const c_float_complex, ldab: *mut c_int, b: *mut c_float_complex,
                         ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zpbtrs(uplo: *mut c_char, n: *mut c_int, kd: *mut c_int, nrhs: *mut c_int,
                         ab: *const c_double_complex, ldab: *mut c_int, b: *mut c_double_complex,
                         ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_spttrs(n: *mut c_int, nrhs: *mut c_int, d: *const c_float, e: *const c_float,
                         b: *mut c_float, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dpttrs(n: *mut c_int, nrhs: *mut c_int, d: *const c_double, e: *const c_double,
                         b: *mut c_double, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cpttrs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, d: *const c_float,
                         e: *const c_float_complex, b: *mut c_float_complex, ldb: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_zpttrs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, d: *const c_double,
                         e: *const c_double_complex, b: *mut c_double_complex, ldb: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_ssytrs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, a: *const c_float,
                         lda: *mut c_int, ipiv: *const c_int, b: *mut c_float, ldb: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dsytrs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, a: *const c_double,
                         lda: *mut c_int, ipiv: *const c_int, b: *mut c_double, ldb: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_csytrs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *const c_float_complex, lda: *mut c_int, ipiv: *const c_int,
                         b: *mut c_float_complex, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zsytrs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *const c_double_complex, lda: *mut c_int, ipiv: *const c_int,
                         b: *mut c_double_complex, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_chetrs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *const c_float_complex, lda: *mut c_int, ipiv: *const c_int,
                         b: *mut c_float_complex, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zhetrs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *const c_double_complex, lda: *mut c_int, ipiv: *const c_int,
                         b: *mut c_double_complex, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ssptrs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, ap: *const c_float,
                         ipiv: *const c_int, b: *mut c_float, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dsptrs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, ap: *const c_double,
                         ipiv: *const c_int, b: *mut c_double, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_csptrs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         ap: *const c_float_complex, ipiv: *const c_int, b: *mut c_float_complex,
                         ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zsptrs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         ap: *const c_double_complex, ipiv: *const c_int, b: *mut c_double_complex,
                         ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_chptrs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         ap: *const c_float_complex, ipiv: *const c_int, b: *mut c_float_complex,
                         ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zhptrs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         ap: *const c_double_complex, ipiv: *const c_int, b: *mut c_double_complex,
                         ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_strtrs(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         nrhs: *mut c_int, a: *const c_float, lda: *mut c_int, b: *mut c_float,
                         ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dtrtrs(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         nrhs: *mut c_int, a: *const c_double, lda: *mut c_int, b: *mut c_double,
                         ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ctrtrs(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         nrhs: *mut c_int, a: *const c_float_complex, lda: *mut c_int,
                         b: *mut c_float_complex, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ztrtrs(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         nrhs: *mut c_int, a: *const c_double_complex, lda: *mut c_int,
                         b: *mut c_double_complex, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_stptrs(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         nrhs: *mut c_int, ap: *const c_float, b: *mut c_float, ldb: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dtptrs(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         nrhs: *mut c_int, ap: *const c_double, b: *mut c_double, ldb: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_ctptrs(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         nrhs: *mut c_int, ap: *const c_float_complex, b: *mut c_float_complex,
                         ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ztptrs(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         nrhs: *mut c_int, ap: *const c_double_complex, b: *mut c_double_complex,
                         ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_stbtrs(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         kd: *mut c_int, nrhs: *mut c_int, ab: *const c_float, ldab: *mut c_int,
                         b: *mut c_float, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dtbtrs(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         kd: *mut c_int, nrhs: *mut c_int, ab: *const c_double, ldab: *mut c_int,
                         b: *mut c_double, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ctbtrs(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         kd: *mut c_int, nrhs: *mut c_int, ab: *const c_float_complex,
                         ldab: *mut c_int, b: *mut c_float_complex, ldb: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_ztbtrs(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         kd: *mut c_int, nrhs: *mut c_int, ab: *const c_double_complex,
                         ldab: *mut c_int, b: *mut c_double_complex, ldb: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_sgecon(norm: *mut c_char, n: *mut c_int, a: *const c_float, lda: *mut c_int,
                         anorm: *mut c_float, rcond: *mut c_float, work: *mut c_float,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgecon(norm: *mut c_char, n: *mut c_int, a: *const c_double, lda: *mut c_int,
                         anorm: *mut c_double, rcond: *mut c_double, work: *mut c_double,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgecon(norm: *mut c_char, n: *mut c_int, a: *const c_float_complex,
                         lda: *mut c_int, anorm: *mut c_float, rcond: *mut c_float,
                         work: *mut c_float_complex, rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zgecon(norm: *mut c_char, n: *mut c_int, a: *const c_double_complex,
                         lda: *mut c_int, anorm: *mut c_double, rcond: *mut c_double,
                         work: *mut c_double_complex, rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_sgbcon(norm: *mut c_char, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                         ab: *const c_float, ldab: *mut c_int, ipiv: *const c_int,
                         anorm: *mut c_float, rcond: *mut c_float, work: *mut c_float,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgbcon(norm: *mut c_char, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                         ab: *const c_double, ldab: *mut c_int, ipiv: *const c_int,
                         anorm: *mut c_double, rcond: *mut c_double, work: *mut c_double,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgbcon(norm: *mut c_char, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                         ab: *const c_float_complex, ldab: *mut c_int, ipiv: *const c_int,
                         anorm: *mut c_float, rcond: *mut c_float, work: *mut c_float_complex,
                         rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zgbcon(norm: *mut c_char, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                         ab: *const c_double_complex, ldab: *mut c_int, ipiv: *const c_int,
                         anorm: *mut c_double, rcond: *mut c_double, work: *mut c_double_complex,
                         rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_sgtcon(norm: *mut c_char, n: *mut c_int, dl: *const c_float, d: *const c_float,
                         du: *const c_float, du2: *const c_float, ipiv: *const c_int,
                         anorm: *mut c_float, rcond: *mut c_float, work: *mut c_float,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgtcon(norm: *mut c_char, n: *mut c_int, dl: *const c_double, d: *const c_double,
                         du: *const c_double, du2: *const c_double, ipiv: *const c_int,
                         anorm: *mut c_double, rcond: *mut c_double, work: *mut c_double,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgtcon(norm: *mut c_char, n: *mut c_int, dl: *const c_float_complex,
                         d: *const c_float_complex, du: *const c_float_complex,
                         du2: *const c_float_complex, ipiv: *const c_int, anorm: *mut c_float,
                         rcond: *mut c_float, work: *mut c_float_complex, info: *mut c_int);
    pub fn LAPACK_zgtcon(norm: *mut c_char, n: *mut c_int, dl: *const c_double_complex,
                         d: *const c_double_complex, du: *const c_double_complex,
                         du2: *const c_double_complex, ipiv: *const c_int, anorm: *mut c_double,
                         rcond: *mut c_double, work: *mut c_double_complex, info: *mut c_int);
    pub fn LAPACK_spocon(uplo: *mut c_char, n: *mut c_int, a: *const c_float, lda: *mut c_int,
                         anorm: *mut c_float, rcond: *mut c_float, work: *mut c_float,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dpocon(uplo: *mut c_char, n: *mut c_int, a: *const c_double, lda: *mut c_int,
                         anorm: *mut c_double, rcond: *mut c_double, work: *mut c_double,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cpocon(uplo: *mut c_char, n: *mut c_int, a: *const c_float_complex,
                         lda: *mut c_int, anorm: *mut c_float, rcond: *mut c_float,
                         work: *mut c_float_complex, rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zpocon(uplo: *mut c_char, n: *mut c_int, a: *const c_double_complex,
                         lda: *mut c_int, anorm: *mut c_double, rcond: *mut c_double,
                         work: *mut c_double_complex, rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_sppcon(uplo: *mut c_char, n: *mut c_int, ap: *const c_float, anorm: *mut c_float,
                         rcond: *mut c_float, work: *mut c_float, iwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dppcon(uplo: *mut c_char, n: *mut c_int, ap: *const c_double,
                         anorm: *mut c_double, rcond: *mut c_double, work: *mut c_double,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cppcon(uplo: *mut c_char, n: *mut c_int, ap: *const c_float_complex,
                         anorm: *mut c_float, rcond: *mut c_float, work: *mut c_float_complex,
                         rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zppcon(uplo: *mut c_char, n: *mut c_int, ap: *const c_double_complex,
                         anorm: *mut c_double, rcond: *mut c_double, work: *mut c_double_complex,
                         rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_spbcon(uplo: *mut c_char, n: *mut c_int, kd: *mut c_int, ab: *const c_float,
                         ldab: *mut c_int, anorm: *mut c_float, rcond: *mut c_float,
                         work: *mut c_float, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dpbcon(uplo: *mut c_char, n: *mut c_int, kd: *mut c_int, ab: *const c_double,
                         ldab: *mut c_int, anorm: *mut c_double, rcond: *mut c_double,
                         work: *mut c_double, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cpbcon(uplo: *mut c_char, n: *mut c_int, kd: *mut c_int,
                         ab: *const c_float_complex, ldab: *mut c_int, anorm: *mut c_float,
                         rcond: *mut c_float, work: *mut c_float_complex, rwork: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_zpbcon(uplo: *mut c_char, n: *mut c_int, kd: *mut c_int,
                         ab: *const c_double_complex, ldab: *mut c_int, anorm: *mut c_double,
                         rcond: *mut c_double, work: *mut c_double_complex, rwork: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_sptcon(n: *mut c_int, d: *const c_float, e: *const c_float, anorm: *mut c_float,
                         rcond: *mut c_float, work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dptcon(n: *mut c_int, d: *const c_double, e: *const c_double,
                         anorm: *mut c_double, rcond: *mut c_double, work: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_cptcon(n: *mut c_int, d: *const c_float, e: *const c_float_complex,
                         anorm: *mut c_float, rcond: *mut c_float, work: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_zptcon(n: *mut c_int, d: *const c_double, e: *const c_double_complex,
                         anorm: *mut c_double, rcond: *mut c_double, work: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_ssycon(uplo: *mut c_char, n: *mut c_int, a: *const c_float, lda: *mut c_int,
                         ipiv: *const c_int, anorm: *mut c_float, rcond: *mut c_float,
                         work: *mut c_float, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dsycon(uplo: *mut c_char, n: *mut c_int, a: *const c_double, lda: *mut c_int,
                         ipiv: *const c_int, anorm: *mut c_double, rcond: *mut c_double,
                         work: *mut c_double, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_csycon(uplo: *mut c_char, n: *mut c_int, a: *const c_float_complex,
                         lda: *mut c_int, ipiv: *const c_int, anorm: *mut c_float,
                         rcond: *mut c_float, work: *mut c_float_complex, info: *mut c_int);
    pub fn LAPACK_zsycon(uplo: *mut c_char, n: *mut c_int, a: *const c_double_complex,
                         lda: *mut c_int, ipiv: *const c_int, anorm: *mut c_double,
                         rcond: *mut c_double, work: *mut c_double_complex, info: *mut c_int);
    pub fn LAPACK_checon(uplo: *mut c_char, n: *mut c_int, a: *const c_float_complex,
                         lda: *mut c_int, ipiv: *const c_int, anorm: *mut c_float,
                         rcond: *mut c_float, work: *mut c_float_complex, info: *mut c_int);
    pub fn LAPACK_zhecon(uplo: *mut c_char, n: *mut c_int, a: *const c_double_complex,
                         lda: *mut c_int, ipiv: *const c_int, anorm: *mut c_double,
                         rcond: *mut c_double, work: *mut c_double_complex, info: *mut c_int);
    pub fn LAPACK_sspcon(uplo: *mut c_char, n: *mut c_int, ap: *const c_float, ipiv: *const c_int,
                         anorm: *mut c_float, rcond: *mut c_float, work: *mut c_float,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dspcon(uplo: *mut c_char, n: *mut c_int, ap: *const c_double, ipiv: *const c_int,
                         anorm: *mut c_double, rcond: *mut c_double, work: *mut c_double,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cspcon(uplo: *mut c_char, n: *mut c_int, ap: *const c_float_complex,
                         ipiv: *const c_int, anorm: *mut c_float, rcond: *mut c_float,
                         work: *mut c_float_complex, info: *mut c_int);
    pub fn LAPACK_zspcon(uplo: *mut c_char, n: *mut c_int, ap: *const c_double_complex,
                         ipiv: *const c_int, anorm: *mut c_double, rcond: *mut c_double,
                         work: *mut c_double_complex, info: *mut c_int);
    pub fn LAPACK_chpcon(uplo: *mut c_char, n: *mut c_int, ap: *const c_float_complex,
                         ipiv: *const c_int, anorm: *mut c_float, rcond: *mut c_float,
                         work: *mut c_float_complex, info: *mut c_int);
    pub fn LAPACK_zhpcon(uplo: *mut c_char, n: *mut c_int, ap: *const c_double_complex,
                         ipiv: *const c_int, anorm: *mut c_double, rcond: *mut c_double,
                         work: *mut c_double_complex, info: *mut c_int);
    pub fn LAPACK_strcon(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         a: *const c_float, lda: *mut c_int, rcond: *mut c_float,
                         work: *mut c_float, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dtrcon(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         a: *const c_double, lda: *mut c_int, rcond: *mut c_double,
                         work: *mut c_double, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ctrcon(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         a: *const c_float_complex, lda: *mut c_int, rcond: *mut c_float,
                         work: *mut c_float_complex, rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_ztrcon(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         a: *const c_double_complex, lda: *mut c_int, rcond: *mut c_double,
                         work: *mut c_double_complex, rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_stpcon(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         ap: *const c_float, rcond: *mut c_float, work: *mut c_float,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dtpcon(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         ap: *const c_double, rcond: *mut c_double, work: *mut c_double,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ctpcon(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         ap: *const c_float_complex, rcond: *mut c_float,
                         work: *mut c_float_complex, rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_ztpcon(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         ap: *const c_double_complex, rcond: *mut c_double,
                         work: *mut c_double_complex, rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_stbcon(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         kd: *mut c_int, ab: *const c_float, ldab: *mut c_int, rcond: *mut c_float,
                         work: *mut c_float, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dtbcon(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         kd: *mut c_int, ab: *const c_double, ldab: *mut c_int,
                         rcond: *mut c_double, work: *mut c_double, iwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_ctbcon(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         kd: *mut c_int, ab: *const c_float_complex, ldab: *mut c_int,
                         rcond: *mut c_float, work: *mut c_float_complex, rwork: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_ztbcon(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         kd: *mut c_int, ab: *const c_double_complex, ldab: *mut c_int,
                         rcond: *mut c_double, work: *mut c_double_complex, rwork: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_sgerfs(trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int, a: *const c_float,
                         lda: *mut c_int, af: *const c_float, ldaf: *mut c_int, ipiv: *const c_int,
                         b: *const c_float, ldb: *mut c_int, x: *mut c_float, ldx: *mut c_int,
                         ferr: *mut c_float, berr: *mut c_float, work: *mut c_float,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgerfs(trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int, a: *const c_double,
                         lda: *mut c_int, af: *const c_double, ldaf: *mut c_int,
                         ipiv: *const c_int, b: *const c_double, ldb: *mut c_int, x: *mut c_double,
                         ldx: *mut c_int, ferr: *mut c_double, berr: *mut c_double,
                         work: *mut c_double, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgerfs(trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *const c_float_complex, lda: *mut c_int, af: *const c_float_complex,
                         ldaf: *mut c_int, ipiv: *const c_int, b: *const c_float_complex,
                         ldb: *mut c_int, x: *mut c_float_complex, ldx: *mut c_int,
                         ferr: *mut c_float, berr: *mut c_float, work: *mut c_float_complex,
                         rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zgerfs(trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *const c_double_complex, lda: *mut c_int, af: *const c_double_complex,
                         ldaf: *mut c_int, ipiv: *const c_int, b: *const c_double_complex,
                         ldb: *mut c_int, x: *mut c_double_complex, ldx: *mut c_int,
                         ferr: *mut c_double, berr: *mut c_double, work: *mut c_double_complex,
                         rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_dgerfsx(trans: *mut c_char, equed: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *const c_double, lda: *mut c_int, af: *const c_double,
                          ldaf: *mut c_int, ipiv: *const c_int, r: *const c_double,
                          c: *const c_double, b: *const c_double, ldb: *mut c_int,
                          x: *mut c_double, ldx: *mut c_int, rcond: *mut c_double,
                          berr: *mut c_double, n_err_bnds: *mut c_int,
                          err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                          nparams: *mut c_int, params: *mut c_double, work: *mut c_double,
                          iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sgerfsx(trans: *mut c_char, equed: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *const c_float, lda: *mut c_int, af: *const c_float, ldaf: *mut c_int,
                          ipiv: *const c_int, r: *const c_float, c: *const c_float,
                          b: *const c_float, ldb: *mut c_int, x: *mut c_float, ldx: *mut c_int,
                          rcond: *mut c_float, berr: *mut c_float, n_err_bnds: *mut c_int,
                          err_bnds_norm: *mut c_float, err_bnds_comp: *mut c_float,
                          nparams: *mut c_int, params: *mut c_float, work: *mut c_float,
                          iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zgerfsx(trans: *mut c_char, equed: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *const c_double_complex, lda: *mut c_int, af: *const c_double_complex,
                          ldaf: *mut c_int, ipiv: *const c_int, r: *const c_double,
                          c: *const c_double, b: *const c_double_complex, ldb: *mut c_int,
                          x: *mut c_double_complex, ldx: *mut c_int, rcond: *mut c_double,
                          berr: *mut c_double, n_err_bnds: *mut c_int,
                          err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                          nparams: *mut c_int, params: *mut c_double, work: *mut c_double_complex,
                          rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_cgerfsx(trans: *mut c_char, equed: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *const c_float_complex, lda: *mut c_int, af: *const c_float_complex,
                          ldaf: *mut c_int, ipiv: *const c_int, r: *const c_float,
                          c: *const c_float, b: *const c_float_complex, ldb: *mut c_int,
                          x: *mut c_float_complex, ldx: *mut c_int, rcond: *mut c_float,
                          berr: *mut c_float, n_err_bnds: *mut c_int, err_bnds_norm: *mut c_float,
                          err_bnds_comp: *mut c_float, nparams: *mut c_int, params: *mut c_float,
                          work: *mut c_float_complex, rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_sgbrfs(trans: *mut c_char, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                         nrhs: *mut c_int, ab: *const c_float, ldab: *mut c_int,
                         afb: *const c_float, ldafb: *mut c_int, ipiv: *const c_int,
                         b: *const c_float, ldb: *mut c_int, x: *mut c_float, ldx: *mut c_int,
                         ferr: *mut c_float, berr: *mut c_float, work: *mut c_float,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgbrfs(trans: *mut c_char, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                         nrhs: *mut c_int, ab: *const c_double, ldab: *mut c_int,
                         afb: *const c_double, ldafb: *mut c_int, ipiv: *const c_int,
                         b: *const c_double, ldb: *mut c_int, x: *mut c_double, ldx: *mut c_int,
                         ferr: *mut c_double, berr: *mut c_double, work: *mut c_double,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgbrfs(trans: *mut c_char, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                         nrhs: *mut c_int, ab: *const c_float_complex, ldab: *mut c_int,
                         afb: *const c_float_complex, ldafb: *mut c_int, ipiv: *const c_int,
                         b: *const c_float_complex, ldb: *mut c_int, x: *mut c_float_complex,
                         ldx: *mut c_int, ferr: *mut c_float, berr: *mut c_float,
                         work: *mut c_float_complex, rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zgbrfs(trans: *mut c_char, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                         nrhs: *mut c_int, ab: *const c_double_complex, ldab: *mut c_int,
                         afb: *const c_double_complex, ldafb: *mut c_int, ipiv: *const c_int,
                         b: *const c_double_complex, ldb: *mut c_int, x: *mut c_double_complex,
                         ldx: *mut c_int, ferr: *mut c_double, berr: *mut c_double,
                         work: *mut c_double_complex, rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_dgbrfsx(trans: *mut c_char, equed: *mut c_char, n: *mut c_int, kl: *mut c_int,
                          ku: *mut c_int, nrhs: *mut c_int, ab: *const c_double, ldab: *mut c_int,
                          afb: *const c_double, ldafb: *mut c_int, ipiv: *const c_int,
                          r: *const c_double, c: *const c_double, b: *const c_double,
                          ldb: *mut c_int, x: *mut c_double, ldx: *mut c_int, rcond: *mut c_double,
                          berr: *mut c_double, n_err_bnds: *mut c_int,
                          err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                          nparams: *mut c_int, params: *mut c_double, work: *mut c_double,
                          iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sgbrfsx(trans: *mut c_char, equed: *mut c_char, n: *mut c_int, kl: *mut c_int,
                          ku: *mut c_int, nrhs: *mut c_int, ab: *const c_float, ldab: *mut c_int,
                          afb: *const c_float, ldafb: *mut c_int, ipiv: *const c_int,
                          r: *const c_float, c: *const c_float, b: *const c_float, ldb: *mut c_int,
                          x: *mut c_float, ldx: *mut c_int, rcond: *mut c_float,
                          berr: *mut c_float, n_err_bnds: *mut c_int, err_bnds_norm: *mut c_float,
                          err_bnds_comp: *mut c_float, nparams: *mut c_int, params: *mut c_float,
                          work: *mut c_float, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zgbrfsx(trans: *mut c_char, equed: *mut c_char, n: *mut c_int, kl: *mut c_int,
                          ku: *mut c_int, nrhs: *mut c_int, ab: *const c_double_complex,
                          ldab: *mut c_int, afb: *const c_double_complex, ldafb: *mut c_int,
                          ipiv: *const c_int, r: *const c_double, c: *const c_double,
                          b: *const c_double_complex, ldb: *mut c_int, x: *mut c_double_complex,
                          ldx: *mut c_int, rcond: *mut c_double, berr: *mut c_double,
                          n_err_bnds: *mut c_int, err_bnds_norm: *mut c_double,
                          err_bnds_comp: *mut c_double, nparams: *mut c_int, params: *mut c_double,
                          work: *mut c_double_complex, rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_cgbrfsx(trans: *mut c_char, equed: *mut c_char, n: *mut c_int, kl: *mut c_int,
                          ku: *mut c_int, nrhs: *mut c_int, ab: *const c_float_complex,
                          ldab: *mut c_int, afb: *const c_float_complex, ldafb: *mut c_int,
                          ipiv: *const c_int, r: *const c_float, c: *const c_float,
                          b: *const c_float_complex, ldb: *mut c_int, x: *mut c_float_complex,
                          ldx: *mut c_int, rcond: *mut c_float, berr: *mut c_float,
                          n_err_bnds: *mut c_int, err_bnds_norm: *mut c_float,
                          err_bnds_comp: *mut c_float, nparams: *mut c_int, params: *mut c_float,
                          work: *mut c_float_complex, rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_sgtrfs(trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int, dl: *const c_float,
                         d: *const c_float, du: *const c_float, dlf: *const c_float,
                         df: *const c_float, duf: *const c_float, du2: *const c_float,
                         ipiv: *const c_int, b: *const c_float, ldb: *mut c_int, x: *mut c_float,
                         ldx: *mut c_int, ferr: *mut c_float, berr: *mut c_float,
                         work: *mut c_float, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgtrfs(trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int, dl: *const c_double,
                         d: *const c_double, du: *const c_double, dlf: *const c_double,
                         df: *const c_double, duf: *const c_double, du2: *const c_double,
                         ipiv: *const c_int, b: *const c_double, ldb: *mut c_int, x: *mut c_double,
                         ldx: *mut c_int, ferr: *mut c_double, berr: *mut c_double,
                         work: *mut c_double, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgtrfs(trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         dl: *const c_float_complex, d: *const c_float_complex,
                         du: *const c_float_complex, dlf: *const c_float_complex,
                         df: *const c_float_complex, duf: *const c_float_complex,
                         du2: *const c_float_complex, ipiv: *const c_int,
                         b: *const c_float_complex, ldb: *mut c_int, x: *mut c_float_complex,
                         ldx: *mut c_int, ferr: *mut c_float, berr: *mut c_float,
                         work: *mut c_float_complex, rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zgtrfs(trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         dl: *const c_double_complex, d: *const c_double_complex,
                         du: *const c_double_complex, dlf: *const c_double_complex,
                         df: *const c_double_complex, duf: *const c_double_complex,
                         du2: *const c_double_complex, ipiv: *const c_int,
                         b: *const c_double_complex, ldb: *mut c_int, x: *mut c_double_complex,
                         ldx: *mut c_int, ferr: *mut c_double, berr: *mut c_double,
                         work: *mut c_double_complex, rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_sporfs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, a: *const c_float,
                         lda: *mut c_int, af: *const c_float, ldaf: *mut c_int, b: *const c_float,
                         ldb: *mut c_int, x: *mut c_float, ldx: *mut c_int, ferr: *mut c_float,
                         berr: *mut c_float, work: *mut c_float, iwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dporfs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, a: *const c_double,
                         lda: *mut c_int, af: *const c_double, ldaf: *mut c_int,
                         b: *const c_double, ldb: *mut c_int, x: *mut c_double, ldx: *mut c_int,
                         ferr: *mut c_double, berr: *mut c_double, work: *mut c_double,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cporfs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *const c_float_complex, lda: *mut c_int, af: *const c_float_complex,
                         ldaf: *mut c_int, b: *const c_float_complex, ldb: *mut c_int,
                         x: *mut c_float_complex, ldx: *mut c_int, ferr: *mut c_float,
                         berr: *mut c_float, work: *mut c_float_complex, rwork: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_zporfs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *const c_double_complex, lda: *mut c_int, af: *const c_double_complex,
                         ldaf: *mut c_int, b: *const c_double_complex, ldb: *mut c_int,
                         x: *mut c_double_complex, ldx: *mut c_int, ferr: *mut c_double,
                         berr: *mut c_double, work: *mut c_double_complex, rwork: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_dporfsx(uplo: *mut c_char, equed: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *const c_double, lda: *mut c_int, af: *const c_double,
                          ldaf: *mut c_int, s: *const c_double, b: *const c_double,
                          ldb: *mut c_int, x: *mut c_double, ldx: *mut c_int, rcond: *mut c_double,
                          berr: *mut c_double, n_err_bnds: *mut c_int,
                          err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                          nparams: *mut c_int, params: *mut c_double, work: *mut c_double,
                          iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sporfsx(uplo: *mut c_char, equed: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *const c_float, lda: *mut c_int, af: *const c_float, ldaf: *mut c_int,
                          s: *const c_float, b: *const c_float, ldb: *mut c_int, x: *mut c_float,
                          ldx: *mut c_int, rcond: *mut c_float, berr: *mut c_float,
                          n_err_bnds: *mut c_int, err_bnds_norm: *mut c_float,
                          err_bnds_comp: *mut c_float, nparams: *mut c_int, params: *mut c_float,
                          work: *mut c_float, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zporfsx(uplo: *mut c_char, equed: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *const c_double_complex, lda: *mut c_int, af: *const c_double_complex,
                          ldaf: *mut c_int, s: *const c_double, b: *const c_double_complex,
                          ldb: *mut c_int, x: *mut c_double_complex, ldx: *mut c_int,
                          rcond: *mut c_double, berr: *mut c_double, n_err_bnds: *mut c_int,
                          err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                          nparams: *mut c_int, params: *mut c_double, work: *mut c_double_complex,
                          rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_cporfsx(uplo: *mut c_char, equed: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *const c_float_complex, lda: *mut c_int, af: *const c_float_complex,
                          ldaf: *mut c_int, s: *const c_float, b: *const c_float_complex,
                          ldb: *mut c_int, x: *mut c_float_complex, ldx: *mut c_int,
                          rcond: *mut c_float, berr: *mut c_float, n_err_bnds: *mut c_int,
                          err_bnds_norm: *mut c_float, err_bnds_comp: *mut c_float,
                          nparams: *mut c_int, params: *mut c_float, work: *mut c_float_complex,
                          rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_spprfs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, ap: *const c_float,
                         afp: *const c_float, b: *const c_float, ldb: *mut c_int, x: *mut c_float,
                         ldx: *mut c_int, ferr: *mut c_float, berr: *mut c_float,
                         work: *mut c_float, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dpprfs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, ap: *const c_double,
                         afp: *const c_double, b: *const c_double, ldb: *mut c_int,
                         x: *mut c_double, ldx: *mut c_int, ferr: *mut c_double,
                         berr: *mut c_double, work: *mut c_double, iwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_cpprfs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         ap: *const c_float_complex, afp: *const c_float_complex,
                         b: *const c_float_complex, ldb: *mut c_int, x: *mut c_float_complex,
                         ldx: *mut c_int, ferr: *mut c_float, berr: *mut c_float,
                         work: *mut c_float_complex, rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zpprfs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         ap: *const c_double_complex, afp: *const c_double_complex,
                         b: *const c_double_complex, ldb: *mut c_int, x: *mut c_double_complex,
                         ldx: *mut c_int, ferr: *mut c_double, berr: *mut c_double,
                         work: *mut c_double_complex, rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_spbrfs(uplo: *mut c_char, n: *mut c_int, kd: *mut c_int, nrhs: *mut c_int,
                         ab: *const c_float, ldab: *mut c_int, afb: *const c_float,
                         ldafb: *mut c_int, b: *const c_float, ldb: *mut c_int, x: *mut c_float,
                         ldx: *mut c_int, ferr: *mut c_float, berr: *mut c_float,
                         work: *mut c_float, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dpbrfs(uplo: *mut c_char, n: *mut c_int, kd: *mut c_int, nrhs: *mut c_int,
                         ab: *const c_double, ldab: *mut c_int, afb: *const c_double,
                         ldafb: *mut c_int, b: *const c_double, ldb: *mut c_int, x: *mut c_double,
                         ldx: *mut c_int, ferr: *mut c_double, berr: *mut c_double,
                         work: *mut c_double, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cpbrfs(uplo: *mut c_char, n: *mut c_int, kd: *mut c_int, nrhs: *mut c_int,
                         ab: *const c_float_complex, ldab: *mut c_int, afb: *const c_float_complex,
                         ldafb: *mut c_int, b: *const c_float_complex, ldb: *mut c_int,
                         x: *mut c_float_complex, ldx: *mut c_int, ferr: *mut c_float,
                         berr: *mut c_float, work: *mut c_float_complex, rwork: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_zpbrfs(uplo: *mut c_char, n: *mut c_int, kd: *mut c_int, nrhs: *mut c_int,
                         ab: *const c_double_complex, ldab: *mut c_int,
                         afb: *const c_double_complex, ldafb: *mut c_int,
                         b: *const c_double_complex, ldb: *mut c_int, x: *mut c_double_complex,
                         ldx: *mut c_int, ferr: *mut c_double, berr: *mut c_double,
                         work: *mut c_double_complex, rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_sptrfs(n: *mut c_int, nrhs: *mut c_int, d: *const c_float, e: *const c_float,
                         df: *const c_float, ef: *const c_float, b: *const c_float,
                         ldb: *mut c_int, x: *mut c_float, ldx: *mut c_int, ferr: *mut c_float,
                         berr: *mut c_float, work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dptrfs(n: *mut c_int, nrhs: *mut c_int, d: *const c_double, e: *const c_double,
                         df: *const c_double, ef: *const c_double, b: *const c_double,
                         ldb: *mut c_int, x: *mut c_double, ldx: *mut c_int, ferr: *mut c_double,
                         berr: *mut c_double, work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_cptrfs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, d: *const c_float,
                         e: *const c_float_complex, df: *const c_float, ef: *const c_float_complex,
                         b: *const c_float_complex, ldb: *mut c_int, x: *mut c_float_complex,
                         ldx: *mut c_int, ferr: *mut c_float, berr: *mut c_float,
                         work: *mut c_float_complex, rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zptrfs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, d: *const c_double,
                         e: *const c_double_complex, df: *const c_double,
                         ef: *const c_double_complex, b: *const c_double_complex, ldb: *mut c_int,
                         x: *mut c_double_complex, ldx: *mut c_int, ferr: *mut c_double,
                         berr: *mut c_double, work: *mut c_double_complex, rwork: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_ssyrfs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, a: *const c_float,
                         lda: *mut c_int, af: *const c_float, ldaf: *mut c_int, ipiv: *const c_int,
                         b: *const c_float, ldb: *mut c_int, x: *mut c_float, ldx: *mut c_int,
                         ferr: *mut c_float, berr: *mut c_float, work: *mut c_float,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dsyrfs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, a: *const c_double,
                         lda: *mut c_int, af: *const c_double, ldaf: *mut c_int,
                         ipiv: *const c_int, b: *const c_double, ldb: *mut c_int, x: *mut c_double,
                         ldx: *mut c_int, ferr: *mut c_double, berr: *mut c_double,
                         work: *mut c_double, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_csyrfs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *const c_float_complex, lda: *mut c_int, af: *const c_float_complex,
                         ldaf: *mut c_int, ipiv: *const c_int, b: *const c_float_complex,
                         ldb: *mut c_int, x: *mut c_float_complex, ldx: *mut c_int,
                         ferr: *mut c_float, berr: *mut c_float, work: *mut c_float_complex,
                         rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zsyrfs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *const c_double_complex, lda: *mut c_int, af: *const c_double_complex,
                         ldaf: *mut c_int, ipiv: *const c_int, b: *const c_double_complex,
                         ldb: *mut c_int, x: *mut c_double_complex, ldx: *mut c_int,
                         ferr: *mut c_double, berr: *mut c_double, work: *mut c_double_complex,
                         rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_dsyrfsx(uplo: *mut c_char, equed: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *const c_double, lda: *mut c_int, af: *const c_double,
                          ldaf: *mut c_int, ipiv: *const c_int, s: *const c_double,
                          b: *const c_double, ldb: *mut c_int, x: *mut c_double, ldx: *mut c_int,
                          rcond: *mut c_double, berr: *mut c_double, n_err_bnds: *mut c_int,
                          err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                          nparams: *mut c_int, params: *mut c_double, work: *mut c_double,
                          iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ssyrfsx(uplo: *mut c_char, equed: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *const c_float, lda: *mut c_int, af: *const c_float, ldaf: *mut c_int,
                          ipiv: *const c_int, s: *const c_float, b: *const c_float,
                          ldb: *mut c_int, x: *mut c_float, ldx: *mut c_int, rcond: *mut c_float,
                          berr: *mut c_float, n_err_bnds: *mut c_int, err_bnds_norm: *mut c_float,
                          err_bnds_comp: *mut c_float, nparams: *mut c_int, params: *mut c_float,
                          work: *mut c_float, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zsyrfsx(uplo: *mut c_char, equed: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *const c_double_complex, lda: *mut c_int, af: *const c_double_complex,
                          ldaf: *mut c_int, ipiv: *const c_int, s: *const c_double,
                          b: *const c_double_complex, ldb: *mut c_int, x: *mut c_double_complex,
                          ldx: *mut c_int, rcond: *mut c_double, berr: *mut c_double,
                          n_err_bnds: *mut c_int, err_bnds_norm: *mut c_double,
                          err_bnds_comp: *mut c_double, nparams: *mut c_int, params: *mut c_double,
                          work: *mut c_double_complex, rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_csyrfsx(uplo: *mut c_char, equed: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *const c_float_complex, lda: *mut c_int, af: *const c_float_complex,
                          ldaf: *mut c_int, ipiv: *const c_int, s: *const c_float,
                          b: *const c_float_complex, ldb: *mut c_int, x: *mut c_float_complex,
                          ldx: *mut c_int, rcond: *mut c_float, berr: *mut c_float,
                          n_err_bnds: *mut c_int, err_bnds_norm: *mut c_float,
                          err_bnds_comp: *mut c_float, nparams: *mut c_int, params: *mut c_float,
                          work: *mut c_float_complex, rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_cherfs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *const c_float_complex, lda: *mut c_int, af: *const c_float_complex,
                         ldaf: *mut c_int, ipiv: *const c_int, b: *const c_float_complex,
                         ldb: *mut c_int, x: *mut c_float_complex, ldx: *mut c_int,
                         ferr: *mut c_float, berr: *mut c_float, work: *mut c_float_complex,
                         rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zherfs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *const c_double_complex, lda: *mut c_int, af: *const c_double_complex,
                         ldaf: *mut c_int, ipiv: *const c_int, b: *const c_double_complex,
                         ldb: *mut c_int, x: *mut c_double_complex, ldx: *mut c_int,
                         ferr: *mut c_double, berr: *mut c_double, work: *mut c_double_complex,
                         rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_zherfsx(uplo: *mut c_char, equed: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *const c_double_complex, lda: *mut c_int, af: *const c_double_complex,
                          ldaf: *mut c_int, ipiv: *const c_int, s: *const c_double,
                          b: *const c_double_complex, ldb: *mut c_int, x: *mut c_double_complex,
                          ldx: *mut c_int, rcond: *mut c_double, berr: *mut c_double,
                          n_err_bnds: *mut c_int, err_bnds_norm: *mut c_double,
                          err_bnds_comp: *mut c_double, nparams: *mut c_int, params: *mut c_double,
                          work: *mut c_double_complex, rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_cherfsx(uplo: *mut c_char, equed: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *const c_float_complex, lda: *mut c_int, af: *const c_float_complex,
                          ldaf: *mut c_int, ipiv: *const c_int, s: *const c_float,
                          b: *const c_float_complex, ldb: *mut c_int, x: *mut c_float_complex,
                          ldx: *mut c_int, rcond: *mut c_float, berr: *mut c_float,
                          n_err_bnds: *mut c_int, err_bnds_norm: *mut c_float,
                          err_bnds_comp: *mut c_float, nparams: *mut c_int, params: *mut c_float,
                          work: *mut c_float_complex, rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_ssprfs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, ap: *const c_float,
                         afp: *const c_float, ipiv: *const c_int, b: *const c_float,
                         ldb: *mut c_int, x: *mut c_float, ldx: *mut c_int, ferr: *mut c_float,
                         berr: *mut c_float, work: *mut c_float, iwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dsprfs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, ap: *const c_double,
                         afp: *const c_double, ipiv: *const c_int, b: *const c_double,
                         ldb: *mut c_int, x: *mut c_double, ldx: *mut c_int, ferr: *mut c_double,
                         berr: *mut c_double, work: *mut c_double, iwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_csprfs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         ap: *const c_float_complex, afp: *const c_float_complex,
                         ipiv: *const c_int, b: *const c_float_complex, ldb: *mut c_int,
                         x: *mut c_float_complex, ldx: *mut c_int, ferr: *mut c_float,
                         berr: *mut c_float, work: *mut c_float_complex, rwork: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_zsprfs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         ap: *const c_double_complex, afp: *const c_double_complex,
                         ipiv: *const c_int, b: *const c_double_complex, ldb: *mut c_int,
                         x: *mut c_double_complex, ldx: *mut c_int, ferr: *mut c_double,
                         berr: *mut c_double, work: *mut c_double_complex, rwork: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_chprfs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         ap: *const c_float_complex, afp: *const c_float_complex,
                         ipiv: *const c_int, b: *const c_float_complex, ldb: *mut c_int,
                         x: *mut c_float_complex, ldx: *mut c_int, ferr: *mut c_float,
                         berr: *mut c_float, work: *mut c_float_complex, rwork: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_zhprfs(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         ap: *const c_double_complex, afp: *const c_double_complex,
                         ipiv: *const c_int, b: *const c_double_complex, ldb: *mut c_int,
                         x: *mut c_double_complex, ldx: *mut c_int, ferr: *mut c_double,
                         berr: *mut c_double, work: *mut c_double_complex, rwork: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_strrfs(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         nrhs: *mut c_int, a: *const c_float, lda: *mut c_int, b: *const c_float,
                         ldb: *mut c_int, x: *const c_float, ldx: *mut c_int, ferr: *mut c_float,
                         berr: *mut c_float, work: *mut c_float, iwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dtrrfs(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         nrhs: *mut c_int, a: *const c_double, lda: *mut c_int, b: *const c_double,
                         ldb: *mut c_int, x: *const c_double, ldx: *mut c_int, ferr: *mut c_double,
                         berr: *mut c_double, work: *mut c_double, iwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_ctrrfs(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         nrhs: *mut c_int, a: *const c_float_complex, lda: *mut c_int,
                         b: *const c_float_complex, ldb: *mut c_int, x: *const c_float_complex,
                         ldx: *mut c_int, ferr: *mut c_float, berr: *mut c_float,
                         work: *mut c_float_complex, rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_ztrrfs(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         nrhs: *mut c_int, a: *const c_double_complex, lda: *mut c_int,
                         b: *const c_double_complex, ldb: *mut c_int, x: *const c_double_complex,
                         ldx: *mut c_int, ferr: *mut c_double, berr: *mut c_double,
                         work: *mut c_double_complex, rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_stprfs(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         nrhs: *mut c_int, ap: *const c_float, b: *const c_float, ldb: *mut c_int,
                         x: *const c_float, ldx: *mut c_int, ferr: *mut c_float,
                         berr: *mut c_float, work: *mut c_float, iwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dtprfs(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         nrhs: *mut c_int, ap: *const c_double, b: *const c_double,
                         ldb: *mut c_int, x: *const c_double, ldx: *mut c_int, ferr: *mut c_double,
                         berr: *mut c_double, work: *mut c_double, iwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_ctprfs(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         nrhs: *mut c_int, ap: *const c_float_complex, b: *const c_float_complex,
                         ldb: *mut c_int, x: *const c_float_complex, ldx: *mut c_int,
                         ferr: *mut c_float, berr: *mut c_float, work: *mut c_float_complex,
                         rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_ztprfs(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         nrhs: *mut c_int, ap: *const c_double_complex, b: *const c_double_complex,
                         ldb: *mut c_int, x: *const c_double_complex, ldx: *mut c_int,
                         ferr: *mut c_double, berr: *mut c_double, work: *mut c_double_complex,
                         rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_stbrfs(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         kd: *mut c_int, nrhs: *mut c_int, ab: *const c_float, ldab: *mut c_int,
                         b: *const c_float, ldb: *mut c_int, x: *const c_float, ldx: *mut c_int,
                         ferr: *mut c_float, berr: *mut c_float, work: *mut c_float,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dtbrfs(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         kd: *mut c_int, nrhs: *mut c_int, ab: *const c_double, ldab: *mut c_int,
                         b: *const c_double, ldb: *mut c_int, x: *const c_double, ldx: *mut c_int,
                         ferr: *mut c_double, berr: *mut c_double, work: *mut c_double,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ctbrfs(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         kd: *mut c_int, nrhs: *mut c_int, ab: *const c_float_complex,
                         ldab: *mut c_int, b: *const c_float_complex, ldb: *mut c_int,
                         x: *const c_float_complex, ldx: *mut c_int, ferr: *mut c_float,
                         berr: *mut c_float, work: *mut c_float_complex, rwork: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_ztbrfs(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         kd: *mut c_int, nrhs: *mut c_int, ab: *const c_double_complex,
                         ldab: *mut c_int, b: *const c_double_complex, ldb: *mut c_int,
                         x: *const c_double_complex, ldx: *mut c_int, ferr: *mut c_double,
                         berr: *mut c_double, work: *mut c_double_complex, rwork: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_sgetri(n: *mut c_int, a: *mut c_float, lda: *mut c_int, ipiv: *const c_int,
                         work: *mut c_float, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgetri(n: *mut c_int, a: *mut c_double, lda: *mut c_int, ipiv: *const c_int,
                         work: *mut c_double, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgetri(n: *mut c_int, a: *mut c_float_complex, lda: *mut c_int,
                         ipiv: *const c_int, work: *mut c_float_complex, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_zgetri(n: *mut c_int, a: *mut c_double_complex, lda: *mut c_int,
                         ipiv: *const c_int, work: *mut c_double_complex, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_spotri(uplo: *mut c_char, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dpotri(uplo: *mut c_char, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_cpotri(uplo: *mut c_char, n: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zpotri(uplo: *mut c_char, n: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dpftri(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int, a: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_spftri(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int, a: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_zpftri(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         a: *mut c_double_complex, info: *mut c_int);
    pub fn LAPACK_cpftri(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         a: *mut c_float_complex, info: *mut c_int);
    pub fn LAPACK_spptri(uplo: *mut c_char, n: *mut c_int, ap: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dpptri(uplo: *mut c_char, n: *mut c_int, ap: *mut c_double, info: *mut c_int);
    pub fn LAPACK_cpptri(uplo: *mut c_char, n: *mut c_int, ap: *mut c_float_complex,
                         info: *mut c_int);
    pub fn LAPACK_zpptri(uplo: *mut c_char, n: *mut c_int, ap: *mut c_double_complex,
                         info: *mut c_int);
    pub fn LAPACK_ssytri(uplo: *mut c_char, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         ipiv: *const c_int, work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dsytri(uplo: *mut c_char, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         ipiv: *const c_int, work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_csytri(uplo: *mut c_char, n: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, ipiv: *const c_int, work: *mut c_float_complex,
                         info: *mut c_int);
    pub fn LAPACK_zsytri(uplo: *mut c_char, n: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, ipiv: *const c_int, work: *mut c_double_complex,
                         info: *mut c_int);
    pub fn LAPACK_chetri(uplo: *mut c_char, n: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, ipiv: *const c_int, work: *mut c_float_complex,
                         info: *mut c_int);
    pub fn LAPACK_zhetri(uplo: *mut c_char, n: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, ipiv: *const c_int, work: *mut c_double_complex,
                         info: *mut c_int);
    pub fn LAPACK_ssptri(uplo: *mut c_char, n: *mut c_int, ap: *mut c_float, ipiv: *const c_int,
                         work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dsptri(uplo: *mut c_char, n: *mut c_int, ap: *mut c_double, ipiv: *const c_int,
                         work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_csptri(uplo: *mut c_char, n: *mut c_int, ap: *mut c_float_complex,
                         ipiv: *const c_int, work: *mut c_float_complex, info: *mut c_int);
    pub fn LAPACK_zsptri(uplo: *mut c_char, n: *mut c_int, ap: *mut c_double_complex,
                         ipiv: *const c_int, work: *mut c_double_complex, info: *mut c_int);
    pub fn LAPACK_chptri(uplo: *mut c_char, n: *mut c_int, ap: *mut c_float_complex,
                         ipiv: *const c_int, work: *mut c_float_complex, info: *mut c_int);
    pub fn LAPACK_zhptri(uplo: *mut c_char, n: *mut c_int, ap: *mut c_double_complex,
                         ipiv: *const c_int, work: *mut c_double_complex, info: *mut c_int);
    pub fn LAPACK_strtri(uplo: *mut c_char, diag: *mut c_char, n: *mut c_int, a: *mut c_float,
                         lda: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dtrtri(uplo: *mut c_char, diag: *mut c_char, n: *mut c_int, a: *mut c_double,
                         lda: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ctrtri(uplo: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         a: *mut c_float_complex, lda: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ztrtri(uplo: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         a: *mut c_double_complex, lda: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dtftri(transr: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         a: *mut c_double, info: *mut c_int);
    pub fn LAPACK_stftri(transr: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         a: *mut c_float, info: *mut c_int);
    pub fn LAPACK_ztftri(transr: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         a: *mut c_double_complex, info: *mut c_int);
    pub fn LAPACK_ctftri(transr: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         a: *mut c_float_complex, info: *mut c_int);
    pub fn LAPACK_stptri(uplo: *mut c_char, diag: *mut c_char, n: *mut c_int, ap: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_dtptri(uplo: *mut c_char, diag: *mut c_char, n: *mut c_int, ap: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_ctptri(uplo: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         ap: *mut c_float_complex, info: *mut c_int);
    pub fn LAPACK_ztptri(uplo: *mut c_char, diag: *mut c_char, n: *mut c_int,
                         ap: *mut c_double_complex, info: *mut c_int);
    pub fn LAPACK_sgeequ(m: *mut c_int, n: *mut c_int, a: *const c_float, lda: *mut c_int,
                         r: *mut c_float, c: *mut c_float, rowcnd: *mut c_float,
                         colcnd: *mut c_float, amax: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dgeequ(m: *mut c_int, n: *mut c_int, a: *const c_double, lda: *mut c_int,
                         r: *mut c_double, c: *mut c_double, rowcnd: *mut c_double,
                         colcnd: *mut c_double, amax: *mut c_double, info: *mut c_int);
    pub fn LAPACK_cgeequ(m: *mut c_int, n: *mut c_int, a: *const c_float_complex, lda: *mut c_int,
                         r: *mut c_float, c: *mut c_float, rowcnd: *mut c_float,
                         colcnd: *mut c_float, amax: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zgeequ(m: *mut c_int, n: *mut c_int, a: *const c_double_complex, lda: *mut c_int,
                         r: *mut c_double, c: *mut c_double, rowcnd: *mut c_double,
                         colcnd: *mut c_double, amax: *mut c_double, info: *mut c_int);
    pub fn LAPACK_dgeequb(m: *mut c_int, n: *mut c_int, a: *const c_double, lda: *mut c_int,
                          r: *mut c_double, c: *mut c_double, rowcnd: *mut c_double,
                          colcnd: *mut c_double, amax: *mut c_double, info: *mut c_int);
    pub fn LAPACK_sgeequb(m: *mut c_int, n: *mut c_int, a: *const c_float, lda: *mut c_int,
                          r: *mut c_float, c: *mut c_float, rowcnd: *mut c_float,
                          colcnd: *mut c_float, amax: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zgeequb(m: *mut c_int, n: *mut c_int, a: *const c_double_complex,
                          lda: *mut c_int, r: *mut c_double, c: *mut c_double,
                          rowcnd: *mut c_double, colcnd: *mut c_double, amax: *mut c_double,
                          info: *mut c_int);
    pub fn LAPACK_cgeequb(m: *mut c_int, n: *mut c_int, a: *const c_float_complex, lda: *mut c_int,
                          r: *mut c_float, c: *mut c_float, rowcnd: *mut c_float,
                          colcnd: *mut c_float, amax: *mut c_float, info: *mut c_int);
    pub fn LAPACK_sgbequ(m: *mut c_int, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                         ab: *const c_float, ldab: *mut c_int, r: *mut c_float, c: *mut c_float,
                         rowcnd: *mut c_float, colcnd: *mut c_float, amax: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_dgbequ(m: *mut c_int, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                         ab: *const c_double, ldab: *mut c_int, r: *mut c_double, c: *mut c_double,
                         rowcnd: *mut c_double, colcnd: *mut c_double, amax: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_cgbequ(m: *mut c_int, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                         ab: *const c_float_complex, ldab: *mut c_int, r: *mut c_float,
                         c: *mut c_float, rowcnd: *mut c_float, colcnd: *mut c_float,
                         amax: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zgbequ(m: *mut c_int, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                         ab: *const c_double_complex, ldab: *mut c_int, r: *mut c_double,
                         c: *mut c_double, rowcnd: *mut c_double, colcnd: *mut c_double,
                         amax: *mut c_double, info: *mut c_int);
    pub fn LAPACK_dgbequb(m: *mut c_int, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                          ab: *const c_double, ldab: *mut c_int, r: *mut c_double,
                          c: *mut c_double, rowcnd: *mut c_double, colcnd: *mut c_double,
                          amax: *mut c_double, info: *mut c_int);
    pub fn LAPACK_sgbequb(m: *mut c_int, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                          ab: *const c_float, ldab: *mut c_int, r: *mut c_float, c: *mut c_float,
                          rowcnd: *mut c_float, colcnd: *mut c_float, amax: *mut c_float,
                          info: *mut c_int);
    pub fn LAPACK_zgbequb(m: *mut c_int, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                          ab: *const c_double_complex, ldab: *mut c_int, r: *mut c_double,
                          c: *mut c_double, rowcnd: *mut c_double, colcnd: *mut c_double,
                          amax: *mut c_double, info: *mut c_int);
    pub fn LAPACK_cgbequb(m: *mut c_int, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                          ab: *const c_float_complex, ldab: *mut c_int, r: *mut c_float,
                          c: *mut c_float, rowcnd: *mut c_float, colcnd: *mut c_float,
                          amax: *mut c_float, info: *mut c_int);
    pub fn LAPACK_spoequ(n: *mut c_int, a: *const c_float, lda: *mut c_int, s: *mut c_float,
                         scond: *mut c_float, amax: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dpoequ(n: *mut c_int, a: *const c_double, lda: *mut c_int, s: *mut c_double,
                         scond: *mut c_double, amax: *mut c_double, info: *mut c_int);
    pub fn LAPACK_cpoequ(n: *mut c_int, a: *const c_float_complex, lda: *mut c_int,
                         s: *mut c_float, scond: *mut c_float, amax: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_zpoequ(n: *mut c_int, a: *const c_double_complex, lda: *mut c_int,
                         s: *mut c_double, scond: *mut c_double, amax: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_dpoequb(n: *mut c_int, a: *const c_double, lda: *mut c_int, s: *mut c_double,
                          scond: *mut c_double, amax: *mut c_double, info: *mut c_int);
    pub fn LAPACK_spoequb(n: *mut c_int, a: *const c_float, lda: *mut c_int, s: *mut c_float,
                          scond: *mut c_float, amax: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zpoequb(n: *mut c_int, a: *const c_double_complex, lda: *mut c_int,
                          s: *mut c_double, scond: *mut c_double, amax: *mut c_double,
                          info: *mut c_int);
    pub fn LAPACK_cpoequb(n: *mut c_int, a: *const c_float_complex, lda: *mut c_int,
                          s: *mut c_float, scond: *mut c_float, amax: *mut c_float,
                          info: *mut c_int);
    pub fn LAPACK_sppequ(uplo: *mut c_char, n: *mut c_int, ap: *const c_float, s: *mut c_float,
                         scond: *mut c_float, amax: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dppequ(uplo: *mut c_char, n: *mut c_int, ap: *const c_double, s: *mut c_double,
                         scond: *mut c_double, amax: *mut c_double, info: *mut c_int);
    pub fn LAPACK_cppequ(uplo: *mut c_char, n: *mut c_int, ap: *const c_float_complex,
                         s: *mut c_float, scond: *mut c_float, amax: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_zppequ(uplo: *mut c_char, n: *mut c_int, ap: *const c_double_complex,
                         s: *mut c_double, scond: *mut c_double, amax: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_spbequ(uplo: *mut c_char, n: *mut c_int, kd: *mut c_int, ab: *const c_float,
                         ldab: *mut c_int, s: *mut c_float, scond: *mut c_float,
                         amax: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dpbequ(uplo: *mut c_char, n: *mut c_int, kd: *mut c_int, ab: *const c_double,
                         ldab: *mut c_int, s: *mut c_double, scond: *mut c_double,
                         amax: *mut c_double, info: *mut c_int);
    pub fn LAPACK_cpbequ(uplo: *mut c_char, n: *mut c_int, kd: *mut c_int,
                         ab: *const c_float_complex, ldab: *mut c_int, s: *mut c_float,
                         scond: *mut c_float, amax: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zpbequ(uplo: *mut c_char, n: *mut c_int, kd: *mut c_int,
                         ab: *const c_double_complex, ldab: *mut c_int, s: *mut c_double,
                         scond: *mut c_double, amax: *mut c_double, info: *mut c_int);
    pub fn LAPACK_dsyequb(uplo: *mut c_char, n: *mut c_int, a: *const c_double, lda: *mut c_int,
                          s: *mut c_double, scond: *mut c_double, amax: *mut c_double,
                          work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_ssyequb(uplo: *mut c_char, n: *mut c_int, a: *const c_float, lda: *mut c_int,
                          s: *mut c_float, scond: *mut c_float, amax: *mut c_float,
                          work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zsyequb(uplo: *mut c_char, n: *mut c_int, a: *const c_double_complex,
                          lda: *mut c_int, s: *mut c_double, scond: *mut c_double,
                          amax: *mut c_double, work: *mut c_double_complex, info: *mut c_int);
    pub fn LAPACK_csyequb(uplo: *mut c_char, n: *mut c_int, a: *const c_float_complex,
                          lda: *mut c_int, s: *mut c_float, scond: *mut c_float,
                          amax: *mut c_float, work: *mut c_float_complex, info: *mut c_int);
    pub fn LAPACK_zheequb(uplo: *mut c_char, n: *mut c_int, a: *const c_double_complex,
                          lda: *mut c_int, s: *mut c_double, scond: *mut c_double,
                          amax: *mut c_double, work: *mut c_double_complex, info: *mut c_int);
    pub fn LAPACK_cheequb(uplo: *mut c_char, n: *mut c_int, a: *const c_float_complex,
                          lda: *mut c_int, s: *mut c_float, scond: *mut c_float,
                          amax: *mut c_float, work: *mut c_float_complex, info: *mut c_int);
    pub fn LAPACK_sgesv(n: *mut c_int, nrhs: *mut c_int, a: *mut c_float, lda: *mut c_int,
                        ipiv: *mut c_int, b: *mut c_float, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgesv(n: *mut c_int, nrhs: *mut c_int, a: *mut c_double, lda: *mut c_int,
                        ipiv: *mut c_int, b: *mut c_double, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgesv(n: *mut c_int, nrhs: *mut c_int, a: *mut c_float_complex, lda: *mut c_int,
                        ipiv: *mut c_int, b: *mut c_float_complex, ldb: *mut c_int,
                        info: *mut c_int);
    pub fn LAPACK_zgesv(n: *mut c_int, nrhs: *mut c_int, a: *mut c_double_complex, lda: *mut c_int,
                        ipiv: *mut c_int, b: *mut c_double_complex, ldb: *mut c_int,
                        info: *mut c_int);
    pub fn LAPACK_dsgesv(n: *mut c_int, nrhs: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         ipiv: *mut c_int, b: *mut c_double, ldb: *mut c_int, x: *mut c_double,
                         ldx: *mut c_int, work: *mut c_double, swork: *mut c_float,
                         iter: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zcgesv(n: *mut c_int, nrhs: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, ipiv: *mut c_int, b: *mut c_double_complex,
                         ldb: *mut c_int, x: *mut c_double_complex, ldx: *mut c_int,
                         work: *mut c_double_complex, swork: *mut c_float_complex,
                         rwork: *mut c_double, iter: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sgesvx(fact: *mut c_char, trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *mut c_float, lda: *mut c_int, af: *mut c_float, ldaf: *mut c_int,
                         ipiv: *mut c_int, equed: *mut c_char, r: *mut c_float, c: *mut c_float,
                         b: *mut c_float, ldb: *mut c_int, x: *mut c_float, ldx: *mut c_int,
                         rcond: *mut c_float, ferr: *mut c_float, berr: *mut c_float,
                         work: *mut c_float, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgesvx(fact: *mut c_char, trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *mut c_double, lda: *mut c_int, af: *mut c_double, ldaf: *mut c_int,
                         ipiv: *mut c_int, equed: *mut c_char, r: *mut c_double, c: *mut c_double,
                         b: *mut c_double, ldb: *mut c_int, x: *mut c_double, ldx: *mut c_int,
                         rcond: *mut c_double, ferr: *mut c_double, berr: *mut c_double,
                         work: *mut c_double, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgesvx(fact: *mut c_char, trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *mut c_float_complex, lda: *mut c_int, af: *mut c_float_complex,
                         ldaf: *mut c_int, ipiv: *mut c_int, equed: *mut c_char, r: *mut c_float,
                         c: *mut c_float, b: *mut c_float_complex, ldb: *mut c_int,
                         x: *mut c_float_complex, ldx: *mut c_int, rcond: *mut c_float,
                         ferr: *mut c_float, berr: *mut c_float, work: *mut c_float_complex,
                         rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zgesvx(fact: *mut c_char, trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *mut c_double_complex, lda: *mut c_int, af: *mut c_double_complex,
                         ldaf: *mut c_int, ipiv: *mut c_int, equed: *mut c_char, r: *mut c_double,
                         c: *mut c_double, b: *mut c_double_complex, ldb: *mut c_int,
                         x: *mut c_double_complex, ldx: *mut c_int, rcond: *mut c_double,
                         ferr: *mut c_double, berr: *mut c_double, work: *mut c_double_complex,
                         rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_dgesvxx(fact: *mut c_char, trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *mut c_double, lda: *mut c_int, af: *mut c_double, ldaf: *mut c_int,
                          ipiv: *mut c_int, equed: *mut c_char, r: *mut c_double, c: *mut c_double,
                          b: *mut c_double, ldb: *mut c_int, x: *mut c_double, ldx: *mut c_int,
                          rcond: *mut c_double, rpvgrw: *mut c_double, berr: *mut c_double,
                          n_err_bnds: *mut c_int, err_bnds_norm: *mut c_double,
                          err_bnds_comp: *mut c_double, nparams: *mut c_int, params: *mut c_double,
                          work: *mut c_double, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sgesvxx(fact: *mut c_char, trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *mut c_float, lda: *mut c_int, af: *mut c_float, ldaf: *mut c_int,
                          ipiv: *mut c_int, equed: *mut c_char, r: *mut c_float, c: *mut c_float,
                          b: *mut c_float, ldb: *mut c_int, x: *mut c_float, ldx: *mut c_int,
                          rcond: *mut c_float, rpvgrw: *mut c_float, berr: *mut c_float,
                          n_err_bnds: *mut c_int, err_bnds_norm: *mut c_float,
                          err_bnds_comp: *mut c_float, nparams: *mut c_int, params: *mut c_float,
                          work: *mut c_float, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zgesvxx(fact: *mut c_char, trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *mut c_double_complex, lda: *mut c_int, af: *mut c_double_complex,
                          ldaf: *mut c_int, ipiv: *mut c_int, equed: *mut c_char, r: *mut c_double,
                          c: *mut c_double, b: *mut c_double_complex, ldb: *mut c_int,
                          x: *mut c_double_complex, ldx: *mut c_int, rcond: *mut c_double,
                          rpvgrw: *mut c_double, berr: *mut c_double, n_err_bnds: *mut c_int,
                          err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                          nparams: *mut c_int, params: *mut c_double, work: *mut c_double_complex,
                          rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_cgesvxx(fact: *mut c_char, trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *mut c_float_complex, lda: *mut c_int, af: *mut c_float_complex,
                          ldaf: *mut c_int, ipiv: *mut c_int, equed: *mut c_char, r: *mut c_float,
                          c: *mut c_float, b: *mut c_float_complex, ldb: *mut c_int,
                          x: *mut c_float_complex, ldx: *mut c_int, rcond: *mut c_float,
                          rpvgrw: *mut c_float, berr: *mut c_float, n_err_bnds: *mut c_int,
                          err_bnds_norm: *mut c_float, err_bnds_comp: *mut c_float,
                          nparams: *mut c_int, params: *mut c_float, work: *mut c_float_complex,
                          rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_sgbsv(n: *mut c_int, kl: *mut c_int, ku: *mut c_int, nrhs: *mut c_int,
                        ab: *mut c_float, ldab: *mut c_int, ipiv: *mut c_int, b: *mut c_float,
                        ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgbsv(n: *mut c_int, kl: *mut c_int, ku: *mut c_int, nrhs: *mut c_int,
                        ab: *mut c_double, ldab: *mut c_int, ipiv: *mut c_int, b: *mut c_double,
                        ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgbsv(n: *mut c_int, kl: *mut c_int, ku: *mut c_int, nrhs: *mut c_int,
                        ab: *mut c_float_complex, ldab: *mut c_int, ipiv: *mut c_int,
                        b: *mut c_float_complex, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zgbsv(n: *mut c_int, kl: *mut c_int, ku: *mut c_int, nrhs: *mut c_int,
                        ab: *mut c_double_complex, ldab: *mut c_int, ipiv: *mut c_int,
                        b: *mut c_double_complex, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sgbsvx(fact: *mut c_char, trans: *mut c_char, n: *mut c_int, kl: *mut c_int,
                         ku: *mut c_int, nrhs: *mut c_int, ab: *mut c_float, ldab: *mut c_int,
                         afb: *mut c_float, ldafb: *mut c_int, ipiv: *mut c_int,
                         equed: *mut c_char, r: *mut c_float, c: *mut c_float, b: *mut c_float,
                         ldb: *mut c_int, x: *mut c_float, ldx: *mut c_int, rcond: *mut c_float,
                         ferr: *mut c_float, berr: *mut c_float, work: *mut c_float,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgbsvx(fact: *mut c_char, trans: *mut c_char, n: *mut c_int, kl: *mut c_int,
                         ku: *mut c_int, nrhs: *mut c_int, ab: *mut c_double, ldab: *mut c_int,
                         afb: *mut c_double, ldafb: *mut c_int, ipiv: *mut c_int,
                         equed: *mut c_char, r: *mut c_double, c: *mut c_double, b: *mut c_double,
                         ldb: *mut c_int, x: *mut c_double, ldx: *mut c_int, rcond: *mut c_double,
                         ferr: *mut c_double, berr: *mut c_double, work: *mut c_double,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgbsvx(fact: *mut c_char, trans: *mut c_char, n: *mut c_int, kl: *mut c_int,
                         ku: *mut c_int, nrhs: *mut c_int, ab: *mut c_float_complex,
                         ldab: *mut c_int, afb: *mut c_float_complex, ldafb: *mut c_int,
                         ipiv: *mut c_int, equed: *mut c_char, r: *mut c_float, c: *mut c_float,
                         b: *mut c_float_complex, ldb: *mut c_int, x: *mut c_float_complex,
                         ldx: *mut c_int, rcond: *mut c_float, ferr: *mut c_float,
                         berr: *mut c_float, work: *mut c_float_complex, rwork: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_zgbsvx(fact: *mut c_char, trans: *mut c_char, n: *mut c_int, kl: *mut c_int,
                         ku: *mut c_int, nrhs: *mut c_int, ab: *mut c_double_complex,
                         ldab: *mut c_int, afb: *mut c_double_complex, ldafb: *mut c_int,
                         ipiv: *mut c_int, equed: *mut c_char, r: *mut c_double, c: *mut c_double,
                         b: *mut c_double_complex, ldb: *mut c_int, x: *mut c_double_complex,
                         ldx: *mut c_int, rcond: *mut c_double, ferr: *mut c_double,
                         berr: *mut c_double, work: *mut c_double_complex, rwork: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_dgbsvxx(fact: *mut c_char, trans: *mut c_char, n: *mut c_int, kl: *mut c_int,
                          ku: *mut c_int, nrhs: *mut c_int, ab: *mut c_double, ldab: *mut c_int,
                          afb: *mut c_double, ldafb: *mut c_int, ipiv: *mut c_int,
                          equed: *mut c_char, r: *mut c_double, c: *mut c_double, b: *mut c_double,
                          ldb: *mut c_int, x: *mut c_double, ldx: *mut c_int, rcond: *mut c_double,
                          rpvgrw: *mut c_double, berr: *mut c_double, n_err_bnds: *mut c_int,
                          err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                          nparams: *mut c_int, params: *mut c_double, work: *mut c_double,
                          iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sgbsvxx(fact: *mut c_char, trans: *mut c_char, n: *mut c_int, kl: *mut c_int,
                          ku: *mut c_int, nrhs: *mut c_int, ab: *mut c_float, ldab: *mut c_int,
                          afb: *mut c_float, ldafb: *mut c_int, ipiv: *mut c_int,
                          equed: *mut c_char, r: *mut c_float, c: *mut c_float, b: *mut c_float,
                          ldb: *mut c_int, x: *mut c_float, ldx: *mut c_int, rcond: *mut c_float,
                          rpvgrw: *mut c_float, berr: *mut c_float, n_err_bnds: *mut c_int,
                          err_bnds_norm: *mut c_float, err_bnds_comp: *mut c_float,
                          nparams: *mut c_int, params: *mut c_float, work: *mut c_float,
                          iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zgbsvxx(fact: *mut c_char, trans: *mut c_char, n: *mut c_int, kl: *mut c_int,
                          ku: *mut c_int, nrhs: *mut c_int, ab: *mut c_double_complex,
                          ldab: *mut c_int, afb: *mut c_double_complex, ldafb: *mut c_int,
                          ipiv: *mut c_int, equed: *mut c_char, r: *mut c_double, c: *mut c_double,
                          b: *mut c_double_complex, ldb: *mut c_int, x: *mut c_double_complex,
                          ldx: *mut c_int, rcond: *mut c_double, rpvgrw: *mut c_double,
                          berr: *mut c_double, n_err_bnds: *mut c_int,
                          err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                          nparams: *mut c_int, params: *mut c_double, work: *mut c_double_complex,
                          rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_cgbsvxx(fact: *mut c_char, trans: *mut c_char, n: *mut c_int, kl: *mut c_int,
                          ku: *mut c_int, nrhs: *mut c_int, ab: *mut c_float_complex,
                          ldab: *mut c_int, afb: *mut c_float_complex, ldafb: *mut c_int,
                          ipiv: *mut c_int, equed: *mut c_char, r: *mut c_float, c: *mut c_float,
                          b: *mut c_float_complex, ldb: *mut c_int, x: *mut c_float_complex,
                          ldx: *mut c_int, rcond: *mut c_float, rpvgrw: *mut c_float,
                          berr: *mut c_float, n_err_bnds: *mut c_int, err_bnds_norm: *mut c_float,
                          err_bnds_comp: *mut c_float, nparams: *mut c_int, params: *mut c_float,
                          work: *mut c_float_complex, rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_sgtsv(n: *mut c_int, nrhs: *mut c_int, dl: *mut c_float, d: *mut c_float,
                        du: *mut c_float, b: *mut c_float, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgtsv(n: *mut c_int, nrhs: *mut c_int, dl: *mut c_double, d: *mut c_double,
                        du: *mut c_double, b: *mut c_double, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgtsv(n: *mut c_int, nrhs: *mut c_int, dl: *mut c_float_complex,
                        d: *mut c_float_complex, du: *mut c_float_complex, b: *mut c_float_complex,
                        ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zgtsv(n: *mut c_int, nrhs: *mut c_int, dl: *mut c_double_complex,
                        d: *mut c_double_complex, du: *mut c_double_complex,
                        b: *mut c_double_complex, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sgtsvx(fact: *mut c_char, trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         dl: *const c_float, d: *const c_float, du: *const c_float,
                         dlf: *mut c_float, df: *mut c_float, duf: *mut c_float, du2: *mut c_float,
                         ipiv: *mut c_int, b: *const c_float, ldb: *mut c_int, x: *mut c_float,
                         ldx: *mut c_int, rcond: *mut c_float, ferr: *mut c_float,
                         berr: *mut c_float, work: *mut c_float, iwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dgtsvx(fact: *mut c_char, trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         dl: *const c_double, d: *const c_double, du: *const c_double,
                         dlf: *mut c_double, df: *mut c_double, duf: *mut c_double,
                         du2: *mut c_double, ipiv: *mut c_int, b: *const c_double, ldb: *mut c_int,
                         x: *mut c_double, ldx: *mut c_int, rcond: *mut c_double,
                         ferr: *mut c_double, berr: *mut c_double, work: *mut c_double,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgtsvx(fact: *mut c_char, trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         dl: *const c_float_complex, d: *const c_float_complex,
                         du: *const c_float_complex, dlf: *mut c_float_complex,
                         df: *mut c_float_complex, duf: *mut c_float_complex,
                         du2: *mut c_float_complex, ipiv: *mut c_int, b: *const c_float_complex,
                         ldb: *mut c_int, x: *mut c_float_complex, ldx: *mut c_int,
                         rcond: *mut c_float, ferr: *mut c_float, berr: *mut c_float,
                         work: *mut c_float_complex, rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zgtsvx(fact: *mut c_char, trans: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         dl: *const c_double_complex, d: *const c_double_complex,
                         du: *const c_double_complex, dlf: *mut c_double_complex,
                         df: *mut c_double_complex, duf: *mut c_double_complex,
                         du2: *mut c_double_complex, ipiv: *mut c_int, b: *const c_double_complex,
                         ldb: *mut c_int, x: *mut c_double_complex, ldx: *mut c_int,
                         rcond: *mut c_double, ferr: *mut c_double, berr: *mut c_double,
                         work: *mut c_double_complex, rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_sposv(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, a: *mut c_float,
                        lda: *mut c_int, b: *mut c_float, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dposv(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, a: *mut c_double,
                        lda: *mut c_int, b: *mut c_double, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cposv(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                        a: *mut c_float_complex, lda: *mut c_int, b: *mut c_float_complex,
                        ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zposv(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                        a: *mut c_double_complex, lda: *mut c_int, b: *mut c_double_complex,
                        ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dsposv(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, a: *mut c_double,
                         lda: *mut c_int, b: *mut c_double, ldb: *mut c_int, x: *mut c_double,
                         ldx: *mut c_int, work: *mut c_double, swork: *mut c_float,
                         iter: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zcposv(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *mut c_double_complex, lda: *mut c_int, b: *mut c_double_complex,
                         ldb: *mut c_int, x: *mut c_double_complex, ldx: *mut c_int,
                         work: *mut c_double_complex, swork: *mut c_float_complex,
                         rwork: *mut c_double, iter: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sposvx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *mut c_float, lda: *mut c_int, af: *mut c_float, ldaf: *mut c_int,
                         equed: *mut c_char, s: *mut c_float, b: *mut c_float, ldb: *mut c_int,
                         x: *mut c_float, ldx: *mut c_int, rcond: *mut c_float, ferr: *mut c_float,
                         berr: *mut c_float, work: *mut c_float, iwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dposvx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *mut c_double, lda: *mut c_int, af: *mut c_double, ldaf: *mut c_int,
                         equed: *mut c_char, s: *mut c_double, b: *mut c_double, ldb: *mut c_int,
                         x: *mut c_double, ldx: *mut c_int, rcond: *mut c_double,
                         ferr: *mut c_double, berr: *mut c_double, work: *mut c_double,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cposvx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *mut c_float_complex, lda: *mut c_int, af: *mut c_float_complex,
                         ldaf: *mut c_int, equed: *mut c_char, s: *mut c_float,
                         b: *mut c_float_complex, ldb: *mut c_int, x: *mut c_float_complex,
                         ldx: *mut c_int, rcond: *mut c_float, ferr: *mut c_float,
                         berr: *mut c_float, work: *mut c_float_complex, rwork: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_zposvx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *mut c_double_complex, lda: *mut c_int, af: *mut c_double_complex,
                         ldaf: *mut c_int, equed: *mut c_char, s: *mut c_double,
                         b: *mut c_double_complex, ldb: *mut c_int, x: *mut c_double_complex,
                         ldx: *mut c_int, rcond: *mut c_double, ferr: *mut c_double,
                         berr: *mut c_double, work: *mut c_double_complex, rwork: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_dposvxx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *mut c_double, lda: *mut c_int, af: *mut c_double, ldaf: *mut c_int,
                          equed: *mut c_char, s: *mut c_double, b: *mut c_double, ldb: *mut c_int,
                          x: *mut c_double, ldx: *mut c_int, rcond: *mut c_double,
                          rpvgrw: *mut c_double, berr: *mut c_double, n_err_bnds: *mut c_int,
                          err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                          nparams: *mut c_int, params: *mut c_double, work: *mut c_double,
                          iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sposvxx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *mut c_float, lda: *mut c_int, af: *mut c_float, ldaf: *mut c_int,
                          equed: *mut c_char, s: *mut c_float, b: *mut c_float, ldb: *mut c_int,
                          x: *mut c_float, ldx: *mut c_int, rcond: *mut c_float,
                          rpvgrw: *mut c_float, berr: *mut c_float, n_err_bnds: *mut c_int,
                          err_bnds_norm: *mut c_float, err_bnds_comp: *mut c_float,
                          nparams: *mut c_int, params: *mut c_float, work: *mut c_float,
                          iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zposvxx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *mut c_double_complex, lda: *mut c_int, af: *mut c_double_complex,
                          ldaf: *mut c_int, equed: *mut c_char, s: *mut c_double,
                          b: *mut c_double_complex, ldb: *mut c_int, x: *mut c_double_complex,
                          ldx: *mut c_int, rcond: *mut c_double, rpvgrw: *mut c_double,
                          berr: *mut c_double, n_err_bnds: *mut c_int,
                          err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                          nparams: *mut c_int, params: *mut c_double, work: *mut c_double_complex,
                          rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_cposvxx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *mut c_float_complex, lda: *mut c_int, af: *mut c_float_complex,
                          ldaf: *mut c_int, equed: *mut c_char, s: *mut c_float,
                          b: *mut c_float_complex, ldb: *mut c_int, x: *mut c_float_complex,
                          ldx: *mut c_int, rcond: *mut c_float, rpvgrw: *mut c_float,
                          berr: *mut c_float, n_err_bnds: *mut c_int, err_bnds_norm: *mut c_float,
                          err_bnds_comp: *mut c_float, nparams: *mut c_int, params: *mut c_float,
                          work: *mut c_float_complex, rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_sppsv(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, ap: *mut c_float,
                        b: *mut c_float, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dppsv(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, ap: *mut c_double,
                        b: *mut c_double, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cppsv(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                        ap: *mut c_float_complex, b: *mut c_float_complex, ldb: *mut c_int,
                        info: *mut c_int);
    pub fn LAPACK_zppsv(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                        ap: *mut c_double_complex, b: *mut c_double_complex, ldb: *mut c_int,
                        info: *mut c_int);
    pub fn LAPACK_sppsvx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         ap: *mut c_float, afp: *mut c_float, equed: *mut c_char, s: *mut c_float,
                         b: *mut c_float, ldb: *mut c_int, x: *mut c_float, ldx: *mut c_int,
                         rcond: *mut c_float, ferr: *mut c_float, berr: *mut c_float,
                         work: *mut c_float, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dppsvx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         ap: *mut c_double, afp: *mut c_double, equed: *mut c_char,
                         s: *mut c_double, b: *mut c_double, ldb: *mut c_int, x: *mut c_double,
                         ldx: *mut c_int, rcond: *mut c_double, ferr: *mut c_double,
                         berr: *mut c_double, work: *mut c_double, iwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_cppsvx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         ap: *mut c_float_complex, afp: *mut c_float_complex, equed: *mut c_char,
                         s: *mut c_float, b: *mut c_float_complex, ldb: *mut c_int,
                         x: *mut c_float_complex, ldx: *mut c_int, rcond: *mut c_float,
                         ferr: *mut c_float, berr: *mut c_float, work: *mut c_float_complex,
                         rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zppsvx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         ap: *mut c_double_complex, afp: *mut c_double_complex, equed: *mut c_char,
                         s: *mut c_double, b: *mut c_double_complex, ldb: *mut c_int,
                         x: *mut c_double_complex, ldx: *mut c_int, rcond: *mut c_double,
                         ferr: *mut c_double, berr: *mut c_double, work: *mut c_double_complex,
                         rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_spbsv(uplo: *mut c_char, n: *mut c_int, kd: *mut c_int, nrhs: *mut c_int,
                        ab: *mut c_float, ldab: *mut c_int, b: *mut c_float, ldb: *mut c_int,
                        info: *mut c_int);
    pub fn LAPACK_dpbsv(uplo: *mut c_char, n: *mut c_int, kd: *mut c_int, nrhs: *mut c_int,
                        ab: *mut c_double, ldab: *mut c_int, b: *mut c_double, ldb: *mut c_int,
                        info: *mut c_int);
    pub fn LAPACK_cpbsv(uplo: *mut c_char, n: *mut c_int, kd: *mut c_int, nrhs: *mut c_int,
                        ab: *mut c_float_complex, ldab: *mut c_int, b: *mut c_float_complex,
                        ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zpbsv(uplo: *mut c_char, n: *mut c_int, kd: *mut c_int, nrhs: *mut c_int,
                        ab: *mut c_double_complex, ldab: *mut c_int, b: *mut c_double_complex,
                        ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_spbsvx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, kd: *mut c_int,
                         nrhs: *mut c_int, ab: *mut c_float, ldab: *mut c_int, afb: *mut c_float,
                         ldafb: *mut c_int, equed: *mut c_char, s: *mut c_float, b: *mut c_float,
                         ldb: *mut c_int, x: *mut c_float, ldx: *mut c_int, rcond: *mut c_float,
                         ferr: *mut c_float, berr: *mut c_float, work: *mut c_float,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dpbsvx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, kd: *mut c_int,
                         nrhs: *mut c_int, ab: *mut c_double, ldab: *mut c_int, afb: *mut c_double,
                         ldafb: *mut c_int, equed: *mut c_char, s: *mut c_double, b: *mut c_double,
                         ldb: *mut c_int, x: *mut c_double, ldx: *mut c_int, rcond: *mut c_double,
                         ferr: *mut c_double, berr: *mut c_double, work: *mut c_double,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cpbsvx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, kd: *mut c_int,
                         nrhs: *mut c_int, ab: *mut c_float_complex, ldab: *mut c_int,
                         afb: *mut c_float_complex, ldafb: *mut c_int, equed: *mut c_char,
                         s: *mut c_float, b: *mut c_float_complex, ldb: *mut c_int,
                         x: *mut c_float_complex, ldx: *mut c_int, rcond: *mut c_float,
                         ferr: *mut c_float, berr: *mut c_float, work: *mut c_float_complex,
                         rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zpbsvx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, kd: *mut c_int,
                         nrhs: *mut c_int, ab: *mut c_double_complex, ldab: *mut c_int,
                         afb: *mut c_double_complex, ldafb: *mut c_int, equed: *mut c_char,
                         s: *mut c_double, b: *mut c_double_complex, ldb: *mut c_int,
                         x: *mut c_double_complex, ldx: *mut c_int, rcond: *mut c_double,
                         ferr: *mut c_double, berr: *mut c_double, work: *mut c_double_complex,
                         rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_sptsv(n: *mut c_int, nrhs: *mut c_int, d: *mut c_float, e: *mut c_float,
                        b: *mut c_float, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dptsv(n: *mut c_int, nrhs: *mut c_int, d: *mut c_double, e: *mut c_double,
                        b: *mut c_double, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cptsv(n: *mut c_int, nrhs: *mut c_int, d: *mut c_float, e: *mut c_float_complex,
                        b: *mut c_float_complex, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zptsv(n: *mut c_int, nrhs: *mut c_int, d: *mut c_double,
                        e: *mut c_double_complex, b: *mut c_double_complex, ldb: *mut c_int,
                        info: *mut c_int);
    pub fn LAPACK_sptsvx(fact: *mut c_char, n: *mut c_int, nrhs: *mut c_int, d: *const c_float,
                         e: *const c_float, df: *mut c_float, ef: *mut c_float, b: *const c_float,
                         ldb: *mut c_int, x: *mut c_float, ldx: *mut c_int, rcond: *mut c_float,
                         ferr: *mut c_float, berr: *mut c_float, work: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_dptsvx(fact: *mut c_char, n: *mut c_int, nrhs: *mut c_int, d: *const c_double,
                         e: *const c_double, df: *mut c_double, ef: *mut c_double,
                         b: *const c_double, ldb: *mut c_int, x: *mut c_double, ldx: *mut c_int,
                         rcond: *mut c_double, ferr: *mut c_double, berr: *mut c_double,
                         work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_cptsvx(fact: *mut c_char, n: *mut c_int, nrhs: *mut c_int, d: *const c_float,
                         e: *const c_float_complex, df: *mut c_float, ef: *mut c_float_complex,
                         b: *const c_float_complex, ldb: *mut c_int, x: *mut c_float_complex,
                         ldx: *mut c_int, rcond: *mut c_float, ferr: *mut c_float,
                         berr: *mut c_float, work: *mut c_float_complex, rwork: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_zptsvx(fact: *mut c_char, n: *mut c_int, nrhs: *mut c_int, d: *const c_double,
                         e: *const c_double_complex, df: *mut c_double, ef: *mut c_double_complex,
                         b: *const c_double_complex, ldb: *mut c_int, x: *mut c_double_complex,
                         ldx: *mut c_int, rcond: *mut c_double, ferr: *mut c_double,
                         berr: *mut c_double, work: *mut c_double_complex, rwork: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_ssysv(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, a: *mut c_float,
                        lda: *mut c_int, ipiv: *mut c_int, b: *mut c_float, ldb: *mut c_int,
                        work: *mut c_float, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dsysv(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, a: *mut c_double,
                        lda: *mut c_int, ipiv: *mut c_int, b: *mut c_double, ldb: *mut c_int,
                        work: *mut c_double, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_csysv(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                        a: *mut c_float_complex, lda: *mut c_int, ipiv: *mut c_int,
                        b: *mut c_float_complex, ldb: *mut c_int, work: *mut c_float_complex,
                        lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zsysv(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                        a: *mut c_double_complex, lda: *mut c_int, ipiv: *mut c_int,
                        b: *mut c_double_complex, ldb: *mut c_int, work: *mut c_double_complex,
                        lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ssysvx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *const c_float, lda: *mut c_int, af: *mut c_float, ldaf: *mut c_int,
                         ipiv: *mut c_int, b: *const c_float, ldb: *mut c_int, x: *mut c_float,
                         ldx: *mut c_int, rcond: *mut c_float, ferr: *mut c_float,
                         berr: *mut c_float, work: *mut c_float, lwork: *mut c_int,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dsysvx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *const c_double, lda: *mut c_int, af: *mut c_double, ldaf: *mut c_int,
                         ipiv: *mut c_int, b: *const c_double, ldb: *mut c_int, x: *mut c_double,
                         ldx: *mut c_int, rcond: *mut c_double, ferr: *mut c_double,
                         berr: *mut c_double, work: *mut c_double, lwork: *mut c_int,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_csysvx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *const c_float_complex, lda: *mut c_int, af: *mut c_float_complex,
                         ldaf: *mut c_int, ipiv: *mut c_int, b: *const c_float_complex,
                         ldb: *mut c_int, x: *mut c_float_complex, ldx: *mut c_int,
                         rcond: *mut c_float, ferr: *mut c_float, berr: *mut c_float,
                         work: *mut c_float_complex, lwork: *mut c_int, rwork: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_zsysvx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *const c_double_complex, lda: *mut c_int, af: *mut c_double_complex,
                         ldaf: *mut c_int, ipiv: *mut c_int, b: *const c_double_complex,
                         ldb: *mut c_int, x: *mut c_double_complex, ldx: *mut c_int,
                         rcond: *mut c_double, ferr: *mut c_double, berr: *mut c_double,
                         work: *mut c_double_complex, lwork: *mut c_int, rwork: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_dsysvxx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *mut c_double, lda: *mut c_int, af: *mut c_double, ldaf: *mut c_int,
                          ipiv: *mut c_int, equed: *mut c_char, s: *mut c_double, b: *mut c_double,
                          ldb: *mut c_int, x: *mut c_double, ldx: *mut c_int, rcond: *mut c_double,
                          rpvgrw: *mut c_double, berr: *mut c_double, n_err_bnds: *mut c_int,
                          err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                          nparams: *mut c_int, params: *mut c_double, work: *mut c_double,
                          iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ssysvxx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *mut c_float, lda: *mut c_int, af: *mut c_float, ldaf: *mut c_int,
                          ipiv: *mut c_int, equed: *mut c_char, s: *mut c_float, b: *mut c_float,
                          ldb: *mut c_int, x: *mut c_float, ldx: *mut c_int, rcond: *mut c_float,
                          rpvgrw: *mut c_float, berr: *mut c_float, n_err_bnds: *mut c_int,
                          err_bnds_norm: *mut c_float, err_bnds_comp: *mut c_float,
                          nparams: *mut c_int, params: *mut c_float, work: *mut c_float,
                          iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zsysvxx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *mut c_double_complex, lda: *mut c_int, af: *mut c_double_complex,
                          ldaf: *mut c_int, ipiv: *mut c_int, equed: *mut c_char, s: *mut c_double,
                          b: *mut c_double_complex, ldb: *mut c_int, x: *mut c_double_complex,
                          ldx: *mut c_int, rcond: *mut c_double, rpvgrw: *mut c_double,
                          berr: *mut c_double, n_err_bnds: *mut c_int,
                          err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                          nparams: *mut c_int, params: *mut c_double, work: *mut c_double_complex,
                          rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_csysvxx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *mut c_float_complex, lda: *mut c_int, af: *mut c_float_complex,
                          ldaf: *mut c_int, ipiv: *mut c_int, equed: *mut c_char, s: *mut c_float,
                          b: *mut c_float_complex, ldb: *mut c_int, x: *mut c_float_complex,
                          ldx: *mut c_int, rcond: *mut c_float, rpvgrw: *mut c_float,
                          berr: *mut c_float, n_err_bnds: *mut c_int, err_bnds_norm: *mut c_float,
                          err_bnds_comp: *mut c_float, nparams: *mut c_int, params: *mut c_float,
                          work: *mut c_float_complex, rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_chesv(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                        a: *mut c_float_complex, lda: *mut c_int, ipiv: *mut c_int,
                        b: *mut c_float_complex, ldb: *mut c_int, work: *mut c_float_complex,
                        lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zhesv(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                        a: *mut c_double_complex, lda: *mut c_int, ipiv: *mut c_int,
                        b: *mut c_double_complex, ldb: *mut c_int, work: *mut c_double_complex,
                        lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_chesvx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *const c_float_complex, lda: *mut c_int, af: *mut c_float_complex,
                         ldaf: *mut c_int, ipiv: *mut c_int, b: *const c_float_complex,
                         ldb: *mut c_int, x: *mut c_float_complex, ldx: *mut c_int,
                         rcond: *mut c_float, ferr: *mut c_float, berr: *mut c_float,
                         work: *mut c_float_complex, lwork: *mut c_int, rwork: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_zhesvx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         a: *const c_double_complex, lda: *mut c_int, af: *mut c_double_complex,
                         ldaf: *mut c_int, ipiv: *mut c_int, b: *const c_double_complex,
                         ldb: *mut c_int, x: *mut c_double_complex, ldx: *mut c_int,
                         rcond: *mut c_double, ferr: *mut c_double, berr: *mut c_double,
                         work: *mut c_double_complex, lwork: *mut c_int, rwork: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_zhesvxx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *mut c_double_complex, lda: *mut c_int, af: *mut c_double_complex,
                          ldaf: *mut c_int, ipiv: *mut c_int, equed: *mut c_char, s: *mut c_double,
                          b: *mut c_double_complex, ldb: *mut c_int, x: *mut c_double_complex,
                          ldx: *mut c_int, rcond: *mut c_double, rpvgrw: *mut c_double,
                          berr: *mut c_double, n_err_bnds: *mut c_int,
                          err_bnds_norm: *mut c_double, err_bnds_comp: *mut c_double,
                          nparams: *mut c_int, params: *mut c_double, work: *mut c_double_complex,
                          rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_chesvxx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *mut c_float_complex, lda: *mut c_int, af: *mut c_float_complex,
                          ldaf: *mut c_int, ipiv: *mut c_int, equed: *mut c_char, s: *mut c_float,
                          b: *mut c_float_complex, ldb: *mut c_int, x: *mut c_float_complex,
                          ldx: *mut c_int, rcond: *mut c_float, rpvgrw: *mut c_float,
                          berr: *mut c_float, n_err_bnds: *mut c_int, err_bnds_norm: *mut c_float,
                          err_bnds_comp: *mut c_float, nparams: *mut c_int, params: *mut c_float,
                          work: *mut c_float_complex, rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_sspsv(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, ap: *mut c_float,
                        ipiv: *mut c_int, b: *mut c_float, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dspsv(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, ap: *mut c_double,
                        ipiv: *mut c_int, b: *mut c_double, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cspsv(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                        ap: *mut c_float_complex, ipiv: *mut c_int, b: *mut c_float_complex,
                        ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zspsv(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                        ap: *mut c_double_complex, ipiv: *mut c_int, b: *mut c_double_complex,
                        ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sspsvx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         ap: *const c_float, afp: *mut c_float, ipiv: *mut c_int,
                         b: *const c_float, ldb: *mut c_int, x: *mut c_float, ldx: *mut c_int,
                         rcond: *mut c_float, ferr: *mut c_float, berr: *mut c_float,
                         work: *mut c_float, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dspsvx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         ap: *const c_double, afp: *mut c_double, ipiv: *mut c_int,
                         b: *const c_double, ldb: *mut c_int, x: *mut c_double, ldx: *mut c_int,
                         rcond: *mut c_double, ferr: *mut c_double, berr: *mut c_double,
                         work: *mut c_double, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cspsvx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         ap: *const c_float_complex, afp: *mut c_float_complex, ipiv: *mut c_int,
                         b: *const c_float_complex, ldb: *mut c_int, x: *mut c_float_complex,
                         ldx: *mut c_int, rcond: *mut c_float, ferr: *mut c_float,
                         berr: *mut c_float, work: *mut c_float_complex, rwork: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_zspsvx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         ap: *const c_double_complex, afp: *mut c_double_complex, ipiv: *mut c_int,
                         b: *const c_double_complex, ldb: *mut c_int, x: *mut c_double_complex,
                         ldx: *mut c_int, rcond: *mut c_double, ferr: *mut c_double,
                         berr: *mut c_double, work: *mut c_double_complex, rwork: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_chpsv(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                        ap: *mut c_float_complex, ipiv: *mut c_int, b: *mut c_float_complex,
                        ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zhpsv(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                        ap: *mut c_double_complex, ipiv: *mut c_int, b: *mut c_double_complex,
                        ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_chpsvx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         ap: *const c_float_complex, afp: *mut c_float_complex, ipiv: *mut c_int,
                         b: *const c_float_complex, ldb: *mut c_int, x: *mut c_float_complex,
                         ldx: *mut c_int, rcond: *mut c_float, ferr: *mut c_float,
                         berr: *mut c_float, work: *mut c_float_complex, rwork: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_zhpsvx(fact: *mut c_char, uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                         ap: *const c_double_complex, afp: *mut c_double_complex, ipiv: *mut c_int,
                         b: *const c_double_complex, ldb: *mut c_int, x: *mut c_double_complex,
                         ldx: *mut c_int, rcond: *mut c_double, ferr: *mut c_double,
                         berr: *mut c_double, work: *mut c_double_complex, rwork: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_sgeqrf(m: *mut c_int, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         tau: *mut c_float, work: *mut c_float, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dgeqrf(m: *mut c_int, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         tau: *mut c_double, work: *mut c_double, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_cgeqrf(m: *mut c_int, n: *mut c_int, a: *mut c_float_complex, lda: *mut c_int,
                         tau: *mut c_float_complex, work: *mut c_float_complex, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_zgeqrf(m: *mut c_int, n: *mut c_int, a: *mut c_double_complex, lda: *mut c_int,
                         tau: *mut c_double_complex, work: *mut c_double_complex,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sgeqpf(m: *mut c_int, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         jpvt: *mut c_int, tau: *mut c_float, work: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_dgeqpf(m: *mut c_int, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         jpvt: *mut c_int, tau: *mut c_double, work: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_cgeqpf(m: *mut c_int, n: *mut c_int, a: *mut c_float_complex, lda: *mut c_int,
                         jpvt: *mut c_int, tau: *mut c_float_complex, work: *mut c_float_complex,
                         rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zgeqpf(m: *mut c_int, n: *mut c_int, a: *mut c_double_complex, lda: *mut c_int,
                         jpvt: *mut c_int, tau: *mut c_double_complex, work: *mut c_double_complex,
                         rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_sgeqp3(m: *mut c_int, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         jpvt: *mut c_int, tau: *mut c_float, work: *mut c_float,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgeqp3(m: *mut c_int, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         jpvt: *mut c_int, tau: *mut c_double, work: *mut c_double,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgeqp3(m: *mut c_int, n: *mut c_int, a: *mut c_float_complex, lda: *mut c_int,
                         jpvt: *mut c_int, tau: *mut c_float_complex, work: *mut c_float_complex,
                         lwork: *mut c_int, rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zgeqp3(m: *mut c_int, n: *mut c_int, a: *mut c_double_complex, lda: *mut c_int,
                         jpvt: *mut c_int, tau: *mut c_double_complex, work: *mut c_double_complex,
                         lwork: *mut c_int, rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_sorgqr(m: *mut c_int, n: *mut c_int, k: *mut c_int, a: *mut c_float,
                         lda: *mut c_int, tau: *const c_float, work: *mut c_float,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dorgqr(m: *mut c_int, n: *mut c_int, k: *mut c_int, a: *mut c_double,
                         lda: *mut c_int, tau: *const c_double, work: *mut c_double,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sormqr(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                         k: *mut c_int, a: *const c_float, lda: *mut c_int, tau: *const c_float,
                         c: *mut c_float, ldc: *mut c_int, work: *mut c_float, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dormqr(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                         k: *mut c_int, a: *const c_double, lda: *mut c_int, tau: *const c_double,
                         c: *mut c_double, ldc: *mut c_int, work: *mut c_double, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_cungqr(m: *mut c_int, n: *mut c_int, k: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, tau: *const c_float_complex, work: *mut c_float_complex,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zungqr(m: *mut c_int, n: *mut c_int, k: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, tau: *const c_double_complex,
                         work: *mut c_double_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cunmqr(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                         k: *mut c_int, a: *const c_float_complex, lda: *mut c_int,
                         tau: *const c_float_complex, c: *mut c_float_complex, ldc: *mut c_int,
                         work: *mut c_float_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zunmqr(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                         k: *mut c_int, a: *const c_double_complex, lda: *mut c_int,
                         tau: *const c_double_complex, c: *mut c_double_complex, ldc: *mut c_int,
                         work: *mut c_double_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sgelqf(m: *mut c_int, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         tau: *mut c_float, work: *mut c_float, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dgelqf(m: *mut c_int, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         tau: *mut c_double, work: *mut c_double, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_cgelqf(m: *mut c_int, n: *mut c_int, a: *mut c_float_complex, lda: *mut c_int,
                         tau: *mut c_float_complex, work: *mut c_float_complex, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_zgelqf(m: *mut c_int, n: *mut c_int, a: *mut c_double_complex, lda: *mut c_int,
                         tau: *mut c_double_complex, work: *mut c_double_complex,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sorglq(m: *mut c_int, n: *mut c_int, k: *mut c_int, a: *mut c_float,
                         lda: *mut c_int, tau: *const c_float, work: *mut c_float,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dorglq(m: *mut c_int, n: *mut c_int, k: *mut c_int, a: *mut c_double,
                         lda: *mut c_int, tau: *const c_double, work: *mut c_double,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sormlq(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                         k: *mut c_int, a: *const c_float, lda: *mut c_int, tau: *const c_float,
                         c: *mut c_float, ldc: *mut c_int, work: *mut c_float, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dormlq(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                         k: *mut c_int, a: *const c_double, lda: *mut c_int, tau: *const c_double,
                         c: *mut c_double, ldc: *mut c_int, work: *mut c_double, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_cunglq(m: *mut c_int, n: *mut c_int, k: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, tau: *const c_float_complex, work: *mut c_float_complex,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zunglq(m: *mut c_int, n: *mut c_int, k: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, tau: *const c_double_complex,
                         work: *mut c_double_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cunmlq(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                         k: *mut c_int, a: *const c_float_complex, lda: *mut c_int,
                         tau: *const c_float_complex, c: *mut c_float_complex, ldc: *mut c_int,
                         work: *mut c_float_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zunmlq(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                         k: *mut c_int, a: *const c_double_complex, lda: *mut c_int,
                         tau: *const c_double_complex, c: *mut c_double_complex, ldc: *mut c_int,
                         work: *mut c_double_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sgeqlf(m: *mut c_int, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         tau: *mut c_float, work: *mut c_float, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dgeqlf(m: *mut c_int, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         tau: *mut c_double, work: *mut c_double, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_cgeqlf(m: *mut c_int, n: *mut c_int, a: *mut c_float_complex, lda: *mut c_int,
                         tau: *mut c_float_complex, work: *mut c_float_complex, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_zgeqlf(m: *mut c_int, n: *mut c_int, a: *mut c_double_complex, lda: *mut c_int,
                         tau: *mut c_double_complex, work: *mut c_double_complex,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sorgql(m: *mut c_int, n: *mut c_int, k: *mut c_int, a: *mut c_float,
                         lda: *mut c_int, tau: *const c_float, work: *mut c_float,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dorgql(m: *mut c_int, n: *mut c_int, k: *mut c_int, a: *mut c_double,
                         lda: *mut c_int, tau: *const c_double, work: *mut c_double,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cungql(m: *mut c_int, n: *mut c_int, k: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, tau: *const c_float_complex, work: *mut c_float_complex,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zungql(m: *mut c_int, n: *mut c_int, k: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, tau: *const c_double_complex,
                         work: *mut c_double_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sormql(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                         k: *mut c_int, a: *const c_float, lda: *mut c_int, tau: *const c_float,
                         c: *mut c_float, ldc: *mut c_int, work: *mut c_float, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dormql(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                         k: *mut c_int, a: *const c_double, lda: *mut c_int, tau: *const c_double,
                         c: *mut c_double, ldc: *mut c_int, work: *mut c_double, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_cunmql(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                         k: *mut c_int, a: *const c_float_complex, lda: *mut c_int,
                         tau: *const c_float_complex, c: *mut c_float_complex, ldc: *mut c_int,
                         work: *mut c_float_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zunmql(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                         k: *mut c_int, a: *const c_double_complex, lda: *mut c_int,
                         tau: *const c_double_complex, c: *mut c_double_complex, ldc: *mut c_int,
                         work: *mut c_double_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sgerqf(m: *mut c_int, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         tau: *mut c_float, work: *mut c_float, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dgerqf(m: *mut c_int, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         tau: *mut c_double, work: *mut c_double, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_cgerqf(m: *mut c_int, n: *mut c_int, a: *mut c_float_complex, lda: *mut c_int,
                         tau: *mut c_float_complex, work: *mut c_float_complex, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_zgerqf(m: *mut c_int, n: *mut c_int, a: *mut c_double_complex, lda: *mut c_int,
                         tau: *mut c_double_complex, work: *mut c_double_complex,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sorgrq(m: *mut c_int, n: *mut c_int, k: *mut c_int, a: *mut c_float,
                         lda: *mut c_int, tau: *const c_float, work: *mut c_float,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dorgrq(m: *mut c_int, n: *mut c_int, k: *mut c_int, a: *mut c_double,
                         lda: *mut c_int, tau: *const c_double, work: *mut c_double,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cungrq(m: *mut c_int, n: *mut c_int, k: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, tau: *const c_float_complex, work: *mut c_float_complex,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zungrq(m: *mut c_int, n: *mut c_int, k: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, tau: *const c_double_complex,
                         work: *mut c_double_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sormrq(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                         k: *mut c_int, a: *const c_float, lda: *mut c_int, tau: *const c_float,
                         c: *mut c_float, ldc: *mut c_int, work: *mut c_float, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dormrq(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                         k: *mut c_int, a: *const c_double, lda: *mut c_int, tau: *const c_double,
                         c: *mut c_double, ldc: *mut c_int, work: *mut c_double, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_cunmrq(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                         k: *mut c_int, a: *const c_float_complex, lda: *mut c_int,
                         tau: *const c_float_complex, c: *mut c_float_complex, ldc: *mut c_int,
                         work: *mut c_float_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zunmrq(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                         k: *mut c_int, a: *const c_double_complex, lda: *mut c_int,
                         tau: *const c_double_complex, c: *mut c_double_complex, ldc: *mut c_int,
                         work: *mut c_double_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_stzrzf(m: *mut c_int, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         tau: *mut c_float, work: *mut c_float, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dtzrzf(m: *mut c_int, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         tau: *mut c_double, work: *mut c_double, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_ctzrzf(m: *mut c_int, n: *mut c_int, a: *mut c_float_complex, lda: *mut c_int,
                         tau: *mut c_float_complex, work: *mut c_float_complex, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_ztzrzf(m: *mut c_int, n: *mut c_int, a: *mut c_double_complex, lda: *mut c_int,
                         tau: *mut c_double_complex, work: *mut c_double_complex,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sormrz(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                         k: *mut c_int, l: *mut c_int, a: *const c_float, lda: *mut c_int,
                         tau: *const c_float, c: *mut c_float, ldc: *mut c_int, work: *mut c_float,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dormrz(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                         k: *mut c_int, l: *mut c_int, a: *const c_double, lda: *mut c_int,
                         tau: *const c_double, c: *mut c_double, ldc: *mut c_int,
                         work: *mut c_double, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cunmrz(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                         k: *mut c_int, l: *mut c_int, a: *const c_float_complex, lda: *mut c_int,
                         tau: *const c_float_complex, c: *mut c_float_complex, ldc: *mut c_int,
                         work: *mut c_float_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zunmrz(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                         k: *mut c_int, l: *mut c_int, a: *const c_double_complex, lda: *mut c_int,
                         tau: *const c_double_complex, c: *mut c_double_complex, ldc: *mut c_int,
                         work: *mut c_double_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sggqrf(n: *mut c_int, m: *mut c_int, p: *mut c_int, a: *mut c_float,
                         lda: *mut c_int, taua: *mut c_float, b: *mut c_float, ldb: *mut c_int,
                         taub: *mut c_float, work: *mut c_float, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dggqrf(n: *mut c_int, m: *mut c_int, p: *mut c_int, a: *mut c_double,
                         lda: *mut c_int, taua: *mut c_double, b: *mut c_double, ldb: *mut c_int,
                         taub: *mut c_double, work: *mut c_double, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_cggqrf(n: *mut c_int, m: *mut c_int, p: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, taua: *mut c_float_complex, b: *mut c_float_complex,
                         ldb: *mut c_int, taub: *mut c_float_complex, work: *mut c_float_complex,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zggqrf(n: *mut c_int, m: *mut c_int, p: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, taua: *mut c_double_complex, b: *mut c_double_complex,
                         ldb: *mut c_int, taub: *mut c_double_complex, work: *mut c_double_complex,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sggrqf(m: *mut c_int, p: *mut c_int, n: *mut c_int, a: *mut c_float,
                         lda: *mut c_int, taua: *mut c_float, b: *mut c_float, ldb: *mut c_int,
                         taub: *mut c_float, work: *mut c_float, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dggrqf(m: *mut c_int, p: *mut c_int, n: *mut c_int, a: *mut c_double,
                         lda: *mut c_int, taua: *mut c_double, b: *mut c_double, ldb: *mut c_int,
                         taub: *mut c_double, work: *mut c_double, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_cggrqf(m: *mut c_int, p: *mut c_int, n: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, taua: *mut c_float_complex, b: *mut c_float_complex,
                         ldb: *mut c_int, taub: *mut c_float_complex, work: *mut c_float_complex,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zggrqf(m: *mut c_int, p: *mut c_int, n: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, taua: *mut c_double_complex, b: *mut c_double_complex,
                         ldb: *mut c_int, taub: *mut c_double_complex, work: *mut c_double_complex,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sgebrd(m: *mut c_int, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         d: *mut c_float, e: *mut c_float, tauq: *mut c_float, taup: *mut c_float,
                         work: *mut c_float, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgebrd(m: *mut c_int, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         d: *mut c_double, e: *mut c_double, tauq: *mut c_double,
                         taup: *mut c_double, work: *mut c_double, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_cgebrd(m: *mut c_int, n: *mut c_int, a: *mut c_float_complex, lda: *mut c_int,
                         d: *mut c_float, e: *mut c_float, tauq: *mut c_float_complex,
                         taup: *mut c_float_complex, work: *mut c_float_complex, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_zgebrd(m: *mut c_int, n: *mut c_int, a: *mut c_double_complex, lda: *mut c_int,
                         d: *mut c_double, e: *mut c_double, tauq: *mut c_double_complex,
                         taup: *mut c_double_complex, work: *mut c_double_complex,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sgbbrd(vect: *mut c_char, m: *mut c_int, n: *mut c_int, ncc: *mut c_int,
                         kl: *mut c_int, ku: *mut c_int, ab: *mut c_float, ldab: *mut c_int,
                         d: *mut c_float, e: *mut c_float, q: *mut c_float, ldq: *mut c_int,
                         pt: *mut c_float, ldpt: *mut c_int, c: *mut c_float, ldc: *mut c_int,
                         work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dgbbrd(vect: *mut c_char, m: *mut c_int, n: *mut c_int, ncc: *mut c_int,
                         kl: *mut c_int, ku: *mut c_int, ab: *mut c_double, ldab: *mut c_int,
                         d: *mut c_double, e: *mut c_double, q: *mut c_double, ldq: *mut c_int,
                         pt: *mut c_double, ldpt: *mut c_int, c: *mut c_double, ldc: *mut c_int,
                         work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_cgbbrd(vect: *mut c_char, m: *mut c_int, n: *mut c_int, ncc: *mut c_int,
                         kl: *mut c_int, ku: *mut c_int, ab: *mut c_float_complex,
                         ldab: *mut c_int, d: *mut c_float, e: *mut c_float,
                         q: *mut c_float_complex, ldq: *mut c_int, pt: *mut c_float_complex,
                         ldpt: *mut c_int, c: *mut c_float_complex, ldc: *mut c_int,
                         work: *mut c_float_complex, rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zgbbrd(vect: *mut c_char, m: *mut c_int, n: *mut c_int, ncc: *mut c_int,
                         kl: *mut c_int, ku: *mut c_int, ab: *mut c_double_complex,
                         ldab: *mut c_int, d: *mut c_double, e: *mut c_double,
                         q: *mut c_double_complex, ldq: *mut c_int, pt: *mut c_double_complex,
                         ldpt: *mut c_int, c: *mut c_double_complex, ldc: *mut c_int,
                         work: *mut c_double_complex, rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_sorgbr(vect: *mut c_char, m: *mut c_int, n: *mut c_int, k: *mut c_int,
                         a: *mut c_float, lda: *mut c_int, tau: *const c_float, work: *mut c_float,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dorgbr(vect: *mut c_char, m: *mut c_int, n: *mut c_int, k: *mut c_int,
                         a: *mut c_double, lda: *mut c_int, tau: *const c_double,
                         work: *mut c_double, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sormbr(vect: *mut c_char, side: *mut c_char, trans: *mut c_char, m: *mut c_int,
                         n: *mut c_int, k: *mut c_int, a: *const c_float, lda: *mut c_int,
                         tau: *const c_float, c: *mut c_float, ldc: *mut c_int, work: *mut c_float,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dormbr(vect: *mut c_char, side: *mut c_char, trans: *mut c_char, m: *mut c_int,
                         n: *mut c_int, k: *mut c_int, a: *const c_double, lda: *mut c_int,
                         tau: *const c_double, c: *mut c_double, ldc: *mut c_int,
                         work: *mut c_double, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cungbr(vect: *mut c_char, m: *mut c_int, n: *mut c_int, k: *mut c_int,
                         a: *mut c_float_complex, lda: *mut c_int, tau: *const c_float_complex,
                         work: *mut c_float_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zungbr(vect: *mut c_char, m: *mut c_int, n: *mut c_int, k: *mut c_int,
                         a: *mut c_double_complex, lda: *mut c_int, tau: *const c_double_complex,
                         work: *mut c_double_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cunmbr(vect: *mut c_char, side: *mut c_char, trans: *mut c_char, m: *mut c_int,
                         n: *mut c_int, k: *mut c_int, a: *const c_float_complex, lda: *mut c_int,
                         tau: *const c_float_complex, c: *mut c_float_complex, ldc: *mut c_int,
                         work: *mut c_float_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zunmbr(vect: *mut c_char, side: *mut c_char, trans: *mut c_char, m: *mut c_int,
                         n: *mut c_int, k: *mut c_int, a: *const c_double_complex, lda: *mut c_int,
                         tau: *const c_double_complex, c: *mut c_double_complex, ldc: *mut c_int,
                         work: *mut c_double_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sbdsqr(uplo: *mut c_char, n: *mut c_int, ncvt: *mut c_int, nru: *mut c_int,
                         ncc: *mut c_int, d: *mut c_float, e: *mut c_float, vt: *mut c_float,
                         ldvt: *mut c_int, u: *mut c_float, ldu: *mut c_int, c: *mut c_float,
                         ldc: *mut c_int, work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dbdsqr(uplo: *mut c_char, n: *mut c_int, ncvt: *mut c_int, nru: *mut c_int,
                         ncc: *mut c_int, d: *mut c_double, e: *mut c_double, vt: *mut c_double,
                         ldvt: *mut c_int, u: *mut c_double, ldu: *mut c_int, c: *mut c_double,
                         ldc: *mut c_int, work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_cbdsqr(uplo: *mut c_char, n: *mut c_int, ncvt: *mut c_int, nru: *mut c_int,
                         ncc: *mut c_int, d: *mut c_float, e: *mut c_float,
                         vt: *mut c_float_complex, ldvt: *mut c_int, u: *mut c_float_complex,
                         ldu: *mut c_int, c: *mut c_float_complex, ldc: *mut c_int,
                         work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zbdsqr(uplo: *mut c_char, n: *mut c_int, ncvt: *mut c_int, nru: *mut c_int,
                         ncc: *mut c_int, d: *mut c_double, e: *mut c_double,
                         vt: *mut c_double_complex, ldvt: *mut c_int, u: *mut c_double_complex,
                         ldu: *mut c_int, c: *mut c_double_complex, ldc: *mut c_int,
                         work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_sbdsdc(uplo: *mut c_char, compq: *mut c_char, n: *mut c_int, d: *mut c_float,
                         e: *mut c_float, u: *mut c_float, ldu: *mut c_int, vt: *mut c_float,
                         ldvt: *mut c_int, q: *mut c_float, iq: *mut c_int, work: *mut c_float,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dbdsdc(uplo: *mut c_char, compq: *mut c_char, n: *mut c_int, d: *mut c_double,
                         e: *mut c_double, u: *mut c_double, ldu: *mut c_int, vt: *mut c_double,
                         ldvt: *mut c_int, q: *mut c_double, iq: *mut c_int, work: *mut c_double,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sbdsvdx(uplo: *mut c_char, jobz: *mut c_char, range: *mut c_char, n: *mut c_int,
                          d: *mut c_float, e: *mut c_float, vl: *mut c_int, vu: *mut c_int,
                          il: *mut c_int, iu: *mut c_int, ns: *mut c_int, s: *mut c_float,
                          z: *mut c_float, ldz: *mut c_int, work: *mut c_float, iwork: *mut c_int,
                          info: *mut c_int);
    pub fn LAPACK_dbdsvdx(uplo: *mut c_char, jobz: *mut c_char, range: *mut c_char, n: *mut c_int,
                          d: *mut c_double, e: *mut c_double, vl: *mut c_int, vu: *mut c_int,
                          il: *mut c_int, iu: *mut c_int, ns: *mut c_int, s: *mut c_double,
                          z: *mut c_double, ldz: *mut c_int, work: *mut c_double,
                          iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ssytrd(uplo: *mut c_char, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         d: *mut c_float, e: *mut c_float, tau: *mut c_float, work: *mut c_float,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dsytrd(uplo: *mut c_char, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         d: *mut c_double, e: *mut c_double, tau: *mut c_double,
                         work: *mut c_double, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sorgtr(uplo: *mut c_char, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         tau: *const c_float, work: *mut c_float, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dorgtr(uplo: *mut c_char, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         tau: *const c_double, work: *mut c_double, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_sormtr(side: *mut c_char, uplo: *mut c_char, trans: *mut c_char, m: *mut c_int,
                         n: *mut c_int, a: *const c_float, lda: *mut c_int, tau: *const c_float,
                         c: *mut c_float, ldc: *mut c_int, work: *mut c_float, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dormtr(side: *mut c_char, uplo: *mut c_char, trans: *mut c_char, m: *mut c_int,
                         n: *mut c_int, a: *const c_double, lda: *mut c_int, tau: *const c_double,
                         c: *mut c_double, ldc: *mut c_int, work: *mut c_double, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_chetrd(uplo: *mut c_char, n: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, d: *mut c_float, e: *mut c_float,
                         tau: *mut c_float_complex, work: *mut c_float_complex, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_zhetrd(uplo: *mut c_char, n: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, d: *mut c_double, e: *mut c_double,
                         tau: *mut c_double_complex, work: *mut c_double_complex,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cungtr(uplo: *mut c_char, n: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, tau: *const c_float_complex, work: *mut c_float_complex,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zungtr(uplo: *mut c_char, n: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, tau: *const c_double_complex,
                         work: *mut c_double_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cunmtr(side: *mut c_char, uplo: *mut c_char, trans: *mut c_char, m: *mut c_int,
                         n: *mut c_int, a: *const c_float_complex, lda: *mut c_int,
                         tau: *const c_float_complex, c: *mut c_float_complex, ldc: *mut c_int,
                         work: *mut c_float_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zunmtr(side: *mut c_char, uplo: *mut c_char, trans: *mut c_char, m: *mut c_int,
                         n: *mut c_int, a: *const c_double_complex, lda: *mut c_int,
                         tau: *const c_double_complex, c: *mut c_double_complex, ldc: *mut c_int,
                         work: *mut c_double_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ssptrd(uplo: *mut c_char, n: *mut c_int, ap: *mut c_float, d: *mut c_float,
                         e: *mut c_float, tau: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dsptrd(uplo: *mut c_char, n: *mut c_int, ap: *mut c_double, d: *mut c_double,
                         e: *mut c_double, tau: *mut c_double, info: *mut c_int);
    pub fn LAPACK_sopgtr(uplo: *mut c_char, n: *mut c_int, ap: *const c_float, tau: *const c_float,
                         q: *mut c_float, ldq: *mut c_int, work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dopgtr(uplo: *mut c_char, n: *mut c_int, ap: *const c_double,
                         tau: *const c_double, q: *mut c_double, ldq: *mut c_int,
                         work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_sopmtr(side: *mut c_char, uplo: *mut c_char, trans: *mut c_char, m: *mut c_int,
                         n: *mut c_int, ap: *const c_float, tau: *const c_float, c: *mut c_float,
                         ldc: *mut c_int, work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dopmtr(side: *mut c_char, uplo: *mut c_char, trans: *mut c_char, m: *mut c_int,
                         n: *mut c_int, ap: *const c_double, tau: *const c_double,
                         c: *mut c_double, ldc: *mut c_int, work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_chptrd(uplo: *mut c_char, n: *mut c_int, ap: *mut c_float_complex,
                         d: *mut c_float, e: *mut c_float, tau: *mut c_float_complex,
                         info: *mut c_int);
    pub fn LAPACK_zhptrd(uplo: *mut c_char, n: *mut c_int, ap: *mut c_double_complex,
                         d: *mut c_double, e: *mut c_double, tau: *mut c_double_complex,
                         info: *mut c_int);
    pub fn LAPACK_cupgtr(uplo: *mut c_char, n: *mut c_int, ap: *const c_float_complex,
                         tau: *const c_float_complex, q: *mut c_float_complex, ldq: *mut c_int,
                         work: *mut c_float_complex, info: *mut c_int);
    pub fn LAPACK_zupgtr(uplo: *mut c_char, n: *mut c_int, ap: *const c_double_complex,
                         tau: *const c_double_complex, q: *mut c_double_complex, ldq: *mut c_int,
                         work: *mut c_double_complex, info: *mut c_int);
    pub fn LAPACK_cupmtr(side: *mut c_char, uplo: *mut c_char, trans: *mut c_char, m: *mut c_int,
                         n: *mut c_int, ap: *const c_float_complex, tau: *const c_float_complex,
                         c: *mut c_float_complex, ldc: *mut c_int, work: *mut c_float_complex,
                         info: *mut c_int);
    pub fn LAPACK_zupmtr(side: *mut c_char, uplo: *mut c_char, trans: *mut c_char, m: *mut c_int,
                         n: *mut c_int, ap: *const c_double_complex, tau: *const c_double_complex,
                         c: *mut c_double_complex, ldc: *mut c_int, work: *mut c_double_complex,
                         info: *mut c_int);
    pub fn LAPACK_ssbtrd(vect: *mut c_char, uplo: *mut c_char, n: *mut c_int, kd: *mut c_int,
                         ab: *mut c_float, ldab: *mut c_int, d: *mut c_float, e: *mut c_float,
                         q: *mut c_float, ldq: *mut c_int, work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dsbtrd(vect: *mut c_char, uplo: *mut c_char, n: *mut c_int, kd: *mut c_int,
                         ab: *mut c_double, ldab: *mut c_int, d: *mut c_double, e: *mut c_double,
                         q: *mut c_double, ldq: *mut c_int, work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_chbtrd(vect: *mut c_char, uplo: *mut c_char, n: *mut c_int, kd: *mut c_int,
                         ab: *mut c_float_complex, ldab: *mut c_int, d: *mut c_float,
                         e: *mut c_float, q: *mut c_float_complex, ldq: *mut c_int,
                         work: *mut c_float_complex, info: *mut c_int);
    pub fn LAPACK_zhbtrd(vect: *mut c_char, uplo: *mut c_char, n: *mut c_int, kd: *mut c_int,
                         ab: *mut c_double_complex, ldab: *mut c_int, d: *mut c_double,
                         e: *mut c_double, q: *mut c_double_complex, ldq: *mut c_int,
                         work: *mut c_double_complex, info: *mut c_int);
    pub fn LAPACK_ssterf(n: *mut c_int, d: *mut c_float, e: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dsterf(n: *mut c_int, d: *mut c_double, e: *mut c_double, info: *mut c_int);
    pub fn LAPACK_ssteqr(compz: *mut c_char, n: *mut c_int, d: *mut c_float, e: *mut c_float,
                         z: *mut c_float, ldz: *mut c_int, work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dsteqr(compz: *mut c_char, n: *mut c_int, d: *mut c_double, e: *mut c_double,
                         z: *mut c_double, ldz: *mut c_int, work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_csteqr(compz: *mut c_char, n: *mut c_int, d: *mut c_float, e: *mut c_float,
                         z: *mut c_float_complex, ldz: *mut c_int, work: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_zsteqr(compz: *mut c_char, n: *mut c_int, d: *mut c_double, e: *mut c_double,
                         z: *mut c_double_complex, ldz: *mut c_int, work: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_sstemr(jobz: *mut c_char, range: *mut c_char, n: *mut c_int, d: *mut c_float,
                         e: *mut c_float, vl: *mut c_float, vu: *mut c_float, il: *mut c_int,
                         iu: *mut c_int, m: *mut c_int, w: *mut c_float, z: *mut c_float,
                         ldz: *mut c_int, nzc: *mut c_int, isuppz: *mut c_int, tryrac: *mut c_int,
                         work: *mut c_float, lwork: *mut c_int, iwork: *mut c_int,
                         liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dstemr(jobz: *mut c_char, range: *mut c_char, n: *mut c_int, d: *mut c_double,
                         e: *mut c_double, vl: *mut c_double, vu: *mut c_double, il: *mut c_int,
                         iu: *mut c_int, m: *mut c_int, w: *mut c_double, z: *mut c_double,
                         ldz: *mut c_int, nzc: *mut c_int, isuppz: *mut c_int, tryrac: *mut c_int,
                         work: *mut c_double, lwork: *mut c_int, iwork: *mut c_int,
                         liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cstemr(jobz: *mut c_char, range: *mut c_char, n: *mut c_int, d: *mut c_float,
                         e: *mut c_float, vl: *mut c_float, vu: *mut c_float, il: *mut c_int,
                         iu: *mut c_int, m: *mut c_int, w: *mut c_float, z: *mut c_float_complex,
                         ldz: *mut c_int, nzc: *mut c_int, isuppz: *mut c_int, tryrac: *mut c_int,
                         work: *mut c_float, lwork: *mut c_int, iwork: *mut c_int,
                         liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zstemr(jobz: *mut c_char, range: *mut c_char, n: *mut c_int, d: *mut c_double,
                         e: *mut c_double, vl: *mut c_double, vu: *mut c_double, il: *mut c_int,
                         iu: *mut c_int, m: *mut c_int, w: *mut c_double, z: *mut c_double_complex,
                         ldz: *mut c_int, nzc: *mut c_int, isuppz: *mut c_int, tryrac: *mut c_int,
                         work: *mut c_double, lwork: *mut c_int, iwork: *mut c_int,
                         liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sstedc(compz: *mut c_char, n: *mut c_int, d: *mut c_float, e: *mut c_float,
                         z: *mut c_float, ldz: *mut c_int, work: *mut c_float, lwork: *mut c_int,
                         iwork: *mut c_int, liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dstedc(compz: *mut c_char, n: *mut c_int, d: *mut c_double, e: *mut c_double,
                         z: *mut c_double, ldz: *mut c_int, work: *mut c_double, lwork: *mut c_int,
                         iwork: *mut c_int, liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cstedc(compz: *mut c_char, n: *mut c_int, d: *mut c_float, e: *mut c_float,
                         z: *mut c_float_complex, ldz: *mut c_int, work: *mut c_float_complex,
                         lwork: *mut c_int, rwork: *mut c_float, lrwork: *mut c_int,
                         iwork: *mut c_int, liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zstedc(compz: *mut c_char, n: *mut c_int, d: *mut c_double, e: *mut c_double,
                         z: *mut c_double_complex, ldz: *mut c_int, work: *mut c_double_complex,
                         lwork: *mut c_int, rwork: *mut c_double, lrwork: *mut c_int,
                         iwork: *mut c_int, liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sstegr(jobz: *mut c_char, range: *mut c_char, n: *mut c_int, d: *mut c_float,
                         e: *mut c_float, vl: *mut c_float, vu: *mut c_float, il: *mut c_int,
                         iu: *mut c_int, abstol: *mut c_float, m: *mut c_int, w: *mut c_float,
                         z: *mut c_float, ldz: *mut c_int, isuppz: *mut c_int, work: *mut c_float,
                         lwork: *mut c_int, iwork: *mut c_int, liwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dstegr(jobz: *mut c_char, range: *mut c_char, n: *mut c_int, d: *mut c_double,
                         e: *mut c_double, vl: *mut c_double, vu: *mut c_double, il: *mut c_int,
                         iu: *mut c_int, abstol: *mut c_double, m: *mut c_int, w: *mut c_double,
                         z: *mut c_double, ldz: *mut c_int, isuppz: *mut c_int,
                         work: *mut c_double, lwork: *mut c_int, iwork: *mut c_int,
                         liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cstegr(jobz: *mut c_char, range: *mut c_char, n: *mut c_int, d: *mut c_float,
                         e: *mut c_float, vl: *mut c_float, vu: *mut c_float, il: *mut c_int,
                         iu: *mut c_int, abstol: *mut c_float, m: *mut c_int, w: *mut c_float,
                         z: *mut c_float_complex, ldz: *mut c_int, isuppz: *mut c_int,
                         work: *mut c_float, lwork: *mut c_int, iwork: *mut c_int,
                         liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zstegr(jobz: *mut c_char, range: *mut c_char, n: *mut c_int, d: *mut c_double,
                         e: *mut c_double, vl: *mut c_double, vu: *mut c_double, il: *mut c_int,
                         iu: *mut c_int, abstol: *mut c_double, m: *mut c_int, w: *mut c_double,
                         z: *mut c_double_complex, ldz: *mut c_int, isuppz: *mut c_int,
                         work: *mut c_double, lwork: *mut c_int, iwork: *mut c_int,
                         liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_spteqr(compz: *mut c_char, n: *mut c_int, d: *mut c_float, e: *mut c_float,
                         z: *mut c_float, ldz: *mut c_int, work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dpteqr(compz: *mut c_char, n: *mut c_int, d: *mut c_double, e: *mut c_double,
                         z: *mut c_double, ldz: *mut c_int, work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_cpteqr(compz: *mut c_char, n: *mut c_int, d: *mut c_float, e: *mut c_float,
                         z: *mut c_float_complex, ldz: *mut c_int, work: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_zpteqr(compz: *mut c_char, n: *mut c_int, d: *mut c_double, e: *mut c_double,
                         z: *mut c_double_complex, ldz: *mut c_int, work: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_sstebz(range: *mut c_char, order: *mut c_char, n: *mut c_int, vl: *mut c_float,
                         vu: *mut c_float, il: *mut c_int, iu: *mut c_int, abstol: *mut c_float,
                         d: *const c_float, e: *const c_float, m: *mut c_int, nsplit: *mut c_int,
                         w: *mut c_float, iblock: *mut c_int, isplit: *mut c_int,
                         work: *mut c_float, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dstebz(range: *mut c_char, order: *mut c_char, n: *mut c_int, vl: *mut c_double,
                         vu: *mut c_double, il: *mut c_int, iu: *mut c_int, abstol: *mut c_double,
                         d: *const c_double, e: *const c_double, m: *mut c_int, nsplit: *mut c_int,
                         w: *mut c_double, iblock: *mut c_int, isplit: *mut c_int,
                         work: *mut c_double, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sstein(n: *mut c_int, d: *const c_float, e: *const c_float, m: *mut c_int,
                         w: *const c_float, iblock: *const c_int, isplit: *const c_int,
                         z: *mut c_float, ldz: *mut c_int, work: *mut c_float, iwork: *mut c_int,
                         ifailv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dstein(n: *mut c_int, d: *const c_double, e: *const c_double, m: *mut c_int,
                         w: *const c_double, iblock: *const c_int, isplit: *const c_int,
                         z: *mut c_double, ldz: *mut c_int, work: *mut c_double, iwork: *mut c_int,
                         ifailv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cstein(n: *mut c_int, d: *const c_float, e: *const c_float, m: *mut c_int,
                         w: *const c_float, iblock: *const c_int, isplit: *const c_int,
                         z: *mut c_float_complex, ldz: *mut c_int, work: *mut c_float,
                         iwork: *mut c_int, ifailv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zstein(n: *mut c_int, d: *const c_double, e: *const c_double, m: *mut c_int,
                         w: *const c_double, iblock: *const c_int, isplit: *const c_int,
                         z: *mut c_double_complex, ldz: *mut c_int, work: *mut c_double,
                         iwork: *mut c_int, ifailv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sdisna(job: *mut c_char, m: *mut c_int, n: *mut c_int, d: *const c_float,
                         sep: *mut c_float, info: *mut c_int);
    pub fn LAPACK_ddisna(job: *mut c_char, m: *mut c_int, n: *mut c_int, d: *const c_double,
                         sep: *mut c_double, info: *mut c_int);
    pub fn LAPACK_ssygst(itype: *mut c_int, uplo: *mut c_char, n: *mut c_int, a: *mut c_float,
                         lda: *mut c_int, b: *const c_float, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dsygst(itype: *mut c_int, uplo: *mut c_char, n: *mut c_int, a: *mut c_double,
                         lda: *mut c_int, b: *const c_double, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_chegst(itype: *mut c_int, uplo: *mut c_char, n: *mut c_int,
                         a: *mut c_float_complex, lda: *mut c_int, b: *const c_float_complex,
                         ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zhegst(itype: *mut c_int, uplo: *mut c_char, n: *mut c_int,
                         a: *mut c_double_complex, lda: *mut c_int, b: *const c_double_complex,
                         ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sspgst(itype: *mut c_int, uplo: *mut c_char, n: *mut c_int, ap: *mut c_float,
                         bp: *const c_float, info: *mut c_int);
    pub fn LAPACK_dspgst(itype: *mut c_int, uplo: *mut c_char, n: *mut c_int, ap: *mut c_double,
                         bp: *const c_double, info: *mut c_int);
    pub fn LAPACK_chpgst(itype: *mut c_int, uplo: *mut c_char, n: *mut c_int,
                         ap: *mut c_float_complex, bp: *const c_float_complex, info: *mut c_int);
    pub fn LAPACK_zhpgst(itype: *mut c_int, uplo: *mut c_char, n: *mut c_int,
                         ap: *mut c_double_complex, bp: *const c_double_complex, info: *mut c_int);
    pub fn LAPACK_ssbgst(vect: *mut c_char, uplo: *mut c_char, n: *mut c_int, ka: *mut c_int,
                         kb: *mut c_int, ab: *mut c_float, ldab: *mut c_int, bb: *const c_float,
                         ldbb: *mut c_int, x: *mut c_float, ldx: *mut c_int, work: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_dsbgst(vect: *mut c_char, uplo: *mut c_char, n: *mut c_int, ka: *mut c_int,
                         kb: *mut c_int, ab: *mut c_double, ldab: *mut c_int, bb: *const c_double,
                         ldbb: *mut c_int, x: *mut c_double, ldx: *mut c_int, work: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_chbgst(vect: *mut c_char, uplo: *mut c_char, n: *mut c_int, ka: *mut c_int,
                         kb: *mut c_int, ab: *mut c_float_complex, ldab: *mut c_int,
                         bb: *const c_float_complex, ldbb: *mut c_int, x: *mut c_float_complex,
                         ldx: *mut c_int, work: *mut c_float_complex, rwork: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_zhbgst(vect: *mut c_char, uplo: *mut c_char, n: *mut c_int, ka: *mut c_int,
                         kb: *mut c_int, ab: *mut c_double_complex, ldab: *mut c_int,
                         bb: *const c_double_complex, ldbb: *mut c_int, x: *mut c_double_complex,
                         ldx: *mut c_int, work: *mut c_double_complex, rwork: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_spbstf(uplo: *mut c_char, n: *mut c_int, kb: *mut c_int, bb: *mut c_float,
                         ldbb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dpbstf(uplo: *mut c_char, n: *mut c_int, kb: *mut c_int, bb: *mut c_double,
                         ldbb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cpbstf(uplo: *mut c_char, n: *mut c_int, kb: *mut c_int,
                         bb: *mut c_float_complex, ldbb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zpbstf(uplo: *mut c_char, n: *mut c_int, kb: *mut c_int,
                         bb: *mut c_double_complex, ldbb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sgehrd(n: *mut c_int, ilo: *mut c_int, ihi: *mut c_int, a: *mut c_float,
                         lda: *mut c_int, tau: *mut c_float, work: *mut c_float, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dgehrd(n: *mut c_int, ilo: *mut c_int, ihi: *mut c_int, a: *mut c_double,
                         lda: *mut c_int, tau: *mut c_double, work: *mut c_double,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgehrd(n: *mut c_int, ilo: *mut c_int, ihi: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, tau: *mut c_float_complex, work: *mut c_float_complex,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zgehrd(n: *mut c_int, ilo: *mut c_int, ihi: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, tau: *mut c_double_complex, work: *mut c_double_complex,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sorghr(n: *mut c_int, ilo: *mut c_int, ihi: *mut c_int, a: *mut c_float,
                         lda: *mut c_int, tau: *const c_float, work: *mut c_float,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dorghr(n: *mut c_int, ilo: *mut c_int, ihi: *mut c_int, a: *mut c_double,
                         lda: *mut c_int, tau: *const c_double, work: *mut c_double,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sormhr(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                         ilo: *mut c_int, ihi: *mut c_int, a: *const c_float, lda: *mut c_int,
                         tau: *const c_float, c: *mut c_float, ldc: *mut c_int, work: *mut c_float,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dormhr(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                         ilo: *mut c_int, ihi: *mut c_int, a: *const c_double, lda: *mut c_int,
                         tau: *const c_double, c: *mut c_double, ldc: *mut c_int,
                         work: *mut c_double, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cunghr(n: *mut c_int, ilo: *mut c_int, ihi: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, tau: *const c_float_complex, work: *mut c_float_complex,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zunghr(n: *mut c_int, ilo: *mut c_int, ihi: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, tau: *const c_double_complex,
                         work: *mut c_double_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cunmhr(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                         ilo: *mut c_int, ihi: *mut c_int, a: *const c_float_complex,
                         lda: *mut c_int, tau: *const c_float_complex, c: *mut c_float_complex,
                         ldc: *mut c_int, work: *mut c_float_complex, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_zunmhr(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                         ilo: *mut c_int, ihi: *mut c_int, a: *const c_double_complex,
                         lda: *mut c_int, tau: *const c_double_complex, c: *mut c_double_complex,
                         ldc: *mut c_int, work: *mut c_double_complex, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_sgebal(job: *mut c_char, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         ilo: *mut c_int, ihi: *mut c_int, scale: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dgebal(job: *mut c_char, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         ilo: *mut c_int, ihi: *mut c_int, scale: *mut c_double, info: *mut c_int);
    pub fn LAPACK_cgebal(job: *mut c_char, n: *mut c_int, a: *mut c_float_complex, lda: *mut c_int,
                         ilo: *mut c_int, ihi: *mut c_int, scale: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zgebal(job: *mut c_char, n: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, ilo: *mut c_int, ihi: *mut c_int, scale: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_sgebak(job: *mut c_char, side: *mut c_char, n: *mut c_int, ilo: *mut c_int,
                         ihi: *mut c_int, scale: *const c_float, m: *mut c_int, v: *mut c_float,
                         ldv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgebak(job: *mut c_char, side: *mut c_char, n: *mut c_int, ilo: *mut c_int,
                         ihi: *mut c_int, scale: *const c_double, m: *mut c_int, v: *mut c_double,
                         ldv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgebak(job: *mut c_char, side: *mut c_char, n: *mut c_int, ilo: *mut c_int,
                         ihi: *mut c_int, scale: *const c_float, m: *mut c_int,
                         v: *mut c_float_complex, ldv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zgebak(job: *mut c_char, side: *mut c_char, n: *mut c_int, ilo: *mut c_int,
                         ihi: *mut c_int, scale: *const c_double, m: *mut c_int,
                         v: *mut c_double_complex, ldv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_shseqr(job: *mut c_char, compz: *mut c_char, n: *mut c_int, ilo: *mut c_int,
                         ihi: *mut c_int, h: *mut c_float, ldh: *mut c_int, wr: *mut c_float,
                         wi: *mut c_float, z: *mut c_float, ldz: *mut c_int, work: *mut c_float,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dhseqr(job: *mut c_char, compz: *mut c_char, n: *mut c_int, ilo: *mut c_int,
                         ihi: *mut c_int, h: *mut c_double, ldh: *mut c_int, wr: *mut c_double,
                         wi: *mut c_double, z: *mut c_double, ldz: *mut c_int, work: *mut c_double,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_chseqr(job: *mut c_char, compz: *mut c_char, n: *mut c_int, ilo: *mut c_int,
                         ihi: *mut c_int, h: *mut c_float_complex, ldh: *mut c_int,
                         w: *mut c_float_complex, z: *mut c_float_complex, ldz: *mut c_int,
                         work: *mut c_float_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zhseqr(job: *mut c_char, compz: *mut c_char, n: *mut c_int, ilo: *mut c_int,
                         ihi: *mut c_int, h: *mut c_double_complex, ldh: *mut c_int,
                         w: *mut c_double_complex, z: *mut c_double_complex, ldz: *mut c_int,
                         work: *mut c_double_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_shsein(job: *mut c_char, eigsrc: *mut c_char, initv: *mut c_char,
                         select: *mut c_int, n: *mut c_int, h: *const c_float, ldh: *mut c_int,
                         wr: *mut c_float, wi: *const c_float, vl: *mut c_float, ldvl: *mut c_int,
                         vr: *mut c_float, ldvr: *mut c_int, mm: *mut c_int, m: *mut c_int,
                         work: *mut c_float, ifaill: *mut c_int, ifailr: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dhsein(job: *mut c_char, eigsrc: *mut c_char, initv: *mut c_char,
                         select: *mut c_int, n: *mut c_int, h: *const c_double, ldh: *mut c_int,
                         wr: *mut c_double, wi: *const c_double, vl: *mut c_double,
                         ldvl: *mut c_int, vr: *mut c_double, ldvr: *mut c_int, mm: *mut c_int,
                         m: *mut c_int, work: *mut c_double, ifaill: *mut c_int,
                         ifailr: *mut c_int, info: *mut c_int);
    pub fn LAPACK_chsein(job: *mut c_char, eigsrc: *mut c_char, initv: *mut c_char,
                         select: *const c_int, n: *mut c_int, h: *const c_float_complex,
                         ldh: *mut c_int, w: *mut c_float_complex, vl: *mut c_float_complex,
                         ldvl: *mut c_int, vr: *mut c_float_complex, ldvr: *mut c_int,
                         mm: *mut c_int, m: *mut c_int, work: *mut c_float_complex,
                         rwork: *mut c_float, ifaill: *mut c_int, ifailr: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_zhsein(job: *mut c_char, eigsrc: *mut c_char, initv: *mut c_char,
                         select: *const c_int, n: *mut c_int, h: *const c_double_complex,
                         ldh: *mut c_int, w: *mut c_double_complex, vl: *mut c_double_complex,
                         ldvl: *mut c_int, vr: *mut c_double_complex, ldvr: *mut c_int,
                         mm: *mut c_int, m: *mut c_int, work: *mut c_double_complex,
                         rwork: *mut c_double, ifaill: *mut c_int, ifailr: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_strevc(side: *mut c_char, howmny: *mut c_char, select: *mut c_int, n: *mut c_int,
                         t: *const c_float, ldt: *mut c_int, vl: *mut c_float, ldvl: *mut c_int,
                         vr: *mut c_float, ldvr: *mut c_int, mm: *mut c_int, m: *mut c_int,
                         work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dtrevc(side: *mut c_char, howmny: *mut c_char, select: *mut c_int, n: *mut c_int,
                         t: *const c_double, ldt: *mut c_int, vl: *mut c_double, ldvl: *mut c_int,
                         vr: *mut c_double, ldvr: *mut c_int, mm: *mut c_int, m: *mut c_int,
                         work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_ctrevc(side: *mut c_char, howmny: *mut c_char, select: *const c_int,
                         n: *mut c_int, t: *mut c_float_complex, ldt: *mut c_int,
                         vl: *mut c_float_complex, ldvl: *mut c_int, vr: *mut c_float_complex,
                         ldvr: *mut c_int, mm: *mut c_int, m: *mut c_int,
                         work: *mut c_float_complex, rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_ztrevc(side: *mut c_char, howmny: *mut c_char, select: *const c_int,
                         n: *mut c_int, t: *mut c_double_complex, ldt: *mut c_int,
                         vl: *mut c_double_complex, ldvl: *mut c_int, vr: *mut c_double_complex,
                         ldvr: *mut c_int, mm: *mut c_int, m: *mut c_int,
                         work: *mut c_double_complex, rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_strsna(job: *mut c_char, howmny: *mut c_char, select: *const c_int,
                         n: *mut c_int, t: *const c_float, ldt: *mut c_int, vl: *const c_float,
                         ldvl: *mut c_int, vr: *const c_float, ldvr: *mut c_int, s: *mut c_float,
                         sep: *mut c_float, mm: *mut c_int, m: *mut c_int, work: *mut c_float,
                         ldwork: *mut c_int, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dtrsna(job: *mut c_char, howmny: *mut c_char, select: *const c_int,
                         n: *mut c_int, t: *const c_double, ldt: *mut c_int, vl: *const c_double,
                         ldvl: *mut c_int, vr: *const c_double, ldvr: *mut c_int, s: *mut c_double,
                         sep: *mut c_double, mm: *mut c_int, m: *mut c_int, work: *mut c_double,
                         ldwork: *mut c_int, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ctrsna(job: *mut c_char, howmny: *mut c_char, select: *const c_int,
                         n: *mut c_int, t: *const c_float_complex, ldt: *mut c_int,
                         vl: *const c_float_complex, ldvl: *mut c_int, vr: *const c_float_complex,
                         ldvr: *mut c_int, s: *mut c_float, sep: *mut c_float, mm: *mut c_int,
                         m: *mut c_int, work: *mut c_float_complex, ldwork: *mut c_int,
                         rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_ztrsna(job: *mut c_char, howmny: *mut c_char, select: *const c_int,
                         n: *mut c_int, t: *const c_double_complex, ldt: *mut c_int,
                         vl: *const c_double_complex, ldvl: *mut c_int,
                         vr: *const c_double_complex, ldvr: *mut c_int, s: *mut c_double,
                         sep: *mut c_double, mm: *mut c_int, m: *mut c_int,
                         work: *mut c_double_complex, ldwork: *mut c_int, rwork: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_strexc(compq: *mut c_char, n: *mut c_int, t: *mut c_float, ldt: *mut c_int,
                         q: *mut c_float, ldq: *mut c_int, ifst: *mut c_int, ilst: *mut c_int,
                         work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dtrexc(compq: *mut c_char, n: *mut c_int, t: *mut c_double, ldt: *mut c_int,
                         q: *mut c_double, ldq: *mut c_int, ifst: *mut c_int, ilst: *mut c_int,
                         work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_ctrexc(compq: *mut c_char, n: *mut c_int, t: *mut c_float_complex,
                         ldt: *mut c_int, q: *mut c_float_complex, ldq: *mut c_int,
                         ifst: *mut c_int, ilst: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ztrexc(compq: *mut c_char, n: *mut c_int, t: *mut c_double_complex,
                         ldt: *mut c_int, q: *mut c_double_complex, ldq: *mut c_int,
                         ifst: *mut c_int, ilst: *mut c_int, info: *mut c_int);
    pub fn LAPACK_strsen(job: *mut c_char, compq: *mut c_char, select: *const c_int, n: *mut c_int,
                         t: *mut c_float, ldt: *mut c_int, q: *mut c_float, ldq: *mut c_int,
                         wr: *mut c_float, wi: *mut c_float, m: *mut c_int, s: *mut c_float,
                         sep: *mut c_float, work: *mut c_float, lwork: *mut c_int,
                         iwork: *mut c_int, liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dtrsen(job: *mut c_char, compq: *mut c_char, select: *const c_int, n: *mut c_int,
                         t: *mut c_double, ldt: *mut c_int, q: *mut c_double, ldq: *mut c_int,
                         wr: *mut c_double, wi: *mut c_double, m: *mut c_int, s: *mut c_double,
                         sep: *mut c_double, work: *mut c_double, lwork: *mut c_int,
                         iwork: *mut c_int, liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ctrsen(job: *mut c_char, compq: *mut c_char, select: *const c_int, n: *mut c_int,
                         t: *mut c_float_complex, ldt: *mut c_int, q: *mut c_float_complex,
                         ldq: *mut c_int, w: *mut c_float_complex, m: *mut c_int, s: *mut c_float,
                         sep: *mut c_float, work: *mut c_float_complex, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_ztrsen(job: *mut c_char, compq: *mut c_char, select: *const c_int, n: *mut c_int,
                         t: *mut c_double_complex, ldt: *mut c_int, q: *mut c_double_complex,
                         ldq: *mut c_int, w: *mut c_double_complex, m: *mut c_int,
                         s: *mut c_double, sep: *mut c_double, work: *mut c_double_complex,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_strsyl(trana: *mut c_char, tranb: *mut c_char, isgn: *mut c_int, m: *mut c_int,
                         n: *mut c_int, a: *const c_float, lda: *mut c_int, b: *const c_float,
                         ldb: *mut c_int, c: *mut c_float, ldc: *mut c_int, scale: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_dtrsyl(trana: *mut c_char, tranb: *mut c_char, isgn: *mut c_int, m: *mut c_int,
                         n: *mut c_int, a: *const c_double, lda: *mut c_int, b: *const c_double,
                         ldb: *mut c_int, c: *mut c_double, ldc: *mut c_int, scale: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_ctrsyl(trana: *mut c_char, tranb: *mut c_char, isgn: *mut c_int, m: *mut c_int,
                         n: *mut c_int, a: *const c_float_complex, lda: *mut c_int,
                         b: *const c_float_complex, ldb: *mut c_int, c: *mut c_float_complex,
                         ldc: *mut c_int, scale: *mut c_float, info: *mut c_int);
    pub fn LAPACK_ztrsyl(trana: *mut c_char, tranb: *mut c_char, isgn: *mut c_int, m: *mut c_int,
                         n: *mut c_int, a: *const c_double_complex, lda: *mut c_int,
                         b: *const c_double_complex, ldb: *mut c_int, c: *mut c_double_complex,
                         ldc: *mut c_int, scale: *mut c_double, info: *mut c_int);
    pub fn LAPACK_sgghrd(compq: *mut c_char, compz: *mut c_char, n: *mut c_int, ilo: *mut c_int,
                         ihi: *mut c_int, a: *mut c_float, lda: *mut c_int, b: *mut c_float,
                         ldb: *mut c_int, q: *mut c_float, ldq: *mut c_int, z: *mut c_float,
                         ldz: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgghrd(compq: *mut c_char, compz: *mut c_char, n: *mut c_int, ilo: *mut c_int,
                         ihi: *mut c_int, a: *mut c_double, lda: *mut c_int, b: *mut c_double,
                         ldb: *mut c_int, q: *mut c_double, ldq: *mut c_int, z: *mut c_double,
                         ldz: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgghrd(compq: *mut c_char, compz: *mut c_char, n: *mut c_int, ilo: *mut c_int,
                         ihi: *mut c_int, a: *mut c_float_complex, lda: *mut c_int,
                         b: *mut c_float_complex, ldb: *mut c_int, q: *mut c_float_complex,
                         ldq: *mut c_int, z: *mut c_float_complex, ldz: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_zgghrd(compq: *mut c_char, compz: *mut c_char, n: *mut c_int, ilo: *mut c_int,
                         ihi: *mut c_int, a: *mut c_double_complex, lda: *mut c_int,
                         b: *mut c_double_complex, ldb: *mut c_int, q: *mut c_double_complex,
                         ldq: *mut c_int, z: *mut c_double_complex, ldz: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_sgghd3(compq: *mut c_char, compz: *mut c_char, n: *mut c_int, ilo: *mut c_int,
                         ihi: *mut c_int, a: *mut c_float, lda: *mut c_int, b: *mut c_float,
                         ldb: *mut c_int, q: *mut c_float, ldq: *mut c_int, z: *mut c_float,
                         ldz: *mut c_int, work: *mut c_float, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgghd3(compq: *mut c_char, compz: *mut c_char, n: *mut c_int, ilo: *mut c_int,
                         ihi: *mut c_int, a: *mut c_double, lda: *mut c_int, b: *mut c_double,
                         ldb: *mut c_int, q: *mut c_double, ldq: *mut c_int, z: *mut c_double,
                         ldz: *mut c_int, work: *mut c_double, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_cgghd3(compq: *mut c_char, compz: *mut c_char, n: *mut c_int, ilo: *mut c_int,
                         ihi: *mut c_int, a: *mut c_float_complex, lda: *mut c_int,
                         b: *mut c_float_complex, ldb: *mut c_int, q: *mut c_float_complex,
                         ldq: *mut c_int, z: *mut c_float_complex, ldz: *mut c_int,
                         work: *mut c_float_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zgghd3(compq: *mut c_char, compz: *mut c_char, n: *mut c_int, ilo: *mut c_int,
                         ihi: *mut c_int, a: *mut c_double_complex, lda: *mut c_int,
                         b: *mut c_double_complex, ldb: *mut c_int, q: *mut c_double_complex,
                         ldq: *mut c_int, z: *mut c_double_complex, ldz: *mut c_int,
                         work: *mut c_double_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sggbal(job: *mut c_char, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         b: *mut c_float, ldb: *mut c_int, ilo: *mut c_int, ihi: *mut c_int,
                         lscale: *mut c_float, rscale: *mut c_float, work: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_dggbal(job: *mut c_char, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         b: *mut c_double, ldb: *mut c_int, ilo: *mut c_int, ihi: *mut c_int,
                         lscale: *mut c_double, rscale: *mut c_double, work: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_cggbal(job: *mut c_char, n: *mut c_int, a: *mut c_float_complex, lda: *mut c_int,
                         b: *mut c_float_complex, ldb: *mut c_int, ilo: *mut c_int,
                         ihi: *mut c_int, lscale: *mut c_float, rscale: *mut c_float,
                         work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zggbal(job: *mut c_char, n: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, b: *mut c_double_complex, ldb: *mut c_int,
                         ilo: *mut c_int, ihi: *mut c_int, lscale: *mut c_double,
                         rscale: *mut c_double, work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_sggbak(job: *mut c_char, side: *mut c_char, n: *mut c_int, ilo: *mut c_int,
                         ihi: *mut c_int, lscale: *const c_float, rscale: *const c_float,
                         m: *mut c_int, v: *mut c_float, ldv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dggbak(job: *mut c_char, side: *mut c_char, n: *mut c_int, ilo: *mut c_int,
                         ihi: *mut c_int, lscale: *const c_double, rscale: *const c_double,
                         m: *mut c_int, v: *mut c_double, ldv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cggbak(job: *mut c_char, side: *mut c_char, n: *mut c_int, ilo: *mut c_int,
                         ihi: *mut c_int, lscale: *const c_float, rscale: *const c_float,
                         m: *mut c_int, v: *mut c_float_complex, ldv: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_zggbak(job: *mut c_char, side: *mut c_char, n: *mut c_int, ilo: *mut c_int,
                         ihi: *mut c_int, lscale: *const c_double, rscale: *const c_double,
                         m: *mut c_int, v: *mut c_double_complex, ldv: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_shgeqz(job: *mut c_char, compq: *mut c_char, compz: *mut c_char, n: *mut c_int,
                         ilo: *mut c_int, ihi: *mut c_int, h: *mut c_float, ldh: *mut c_int,
                         t: *mut c_float, ldt: *mut c_int, alphar: *mut c_float,
                         alphai: *mut c_float, beta: *mut c_float, q: *mut c_float,
                         ldq: *mut c_int, z: *mut c_float, ldz: *mut c_int, work: *mut c_float,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dhgeqz(job: *mut c_char, compq: *mut c_char, compz: *mut c_char, n: *mut c_int,
                         ilo: *mut c_int, ihi: *mut c_int, h: *mut c_double, ldh: *mut c_int,
                         t: *mut c_double, ldt: *mut c_int, alphar: *mut c_double,
                         alphai: *mut c_double, beta: *mut c_double, q: *mut c_double,
                         ldq: *mut c_int, z: *mut c_double, ldz: *mut c_int, work: *mut c_double,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_chgeqz(job: *mut c_char, compq: *mut c_char, compz: *mut c_char, n: *mut c_int,
                         ilo: *mut c_int, ihi: *mut c_int, h: *mut c_float_complex,
                         ldh: *mut c_int, t: *mut c_float_complex, ldt: *mut c_int,
                         alpha: *mut c_float_complex, beta: *mut c_float_complex,
                         q: *mut c_float_complex, ldq: *mut c_int, z: *mut c_float_complex,
                         ldz: *mut c_int, work: *mut c_float_complex, lwork: *mut c_int,
                         rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zhgeqz(job: *mut c_char, compq: *mut c_char, compz: *mut c_char, n: *mut c_int,
                         ilo: *mut c_int, ihi: *mut c_int, h: *mut c_double_complex,
                         ldh: *mut c_int, t: *mut c_double_complex, ldt: *mut c_int,
                         alpha: *mut c_double_complex, beta: *mut c_double_complex,
                         q: *mut c_double_complex, ldq: *mut c_int, z: *mut c_double_complex,
                         ldz: *mut c_int, work: *mut c_double_complex, lwork: *mut c_int,
                         rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_stgevc(side: *mut c_char, howmny: *mut c_char, select: *const c_int,
                         n: *mut c_int, s: *const c_float, lds: *mut c_int, p: *const c_float,
                         ldp: *mut c_int, vl: *mut c_float, ldvl: *mut c_int, vr: *mut c_float,
                         ldvr: *mut c_int, mm: *mut c_int, m: *mut c_int, work: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_dtgevc(side: *mut c_char, howmny: *mut c_char, select: *const c_int,
                         n: *mut c_int, s: *const c_double, lds: *mut c_int, p: *const c_double,
                         ldp: *mut c_int, vl: *mut c_double, ldvl: *mut c_int, vr: *mut c_double,
                         ldvr: *mut c_int, mm: *mut c_int, m: *mut c_int, work: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_ctgevc(side: *mut c_char, howmny: *mut c_char, select: *const c_int,
                         n: *mut c_int, s: *const c_float_complex, lds: *mut c_int,
                         p: *const c_float_complex, ldp: *mut c_int, vl: *mut c_float_complex,
                         ldvl: *mut c_int, vr: *mut c_float_complex, ldvr: *mut c_int,
                         mm: *mut c_int, m: *mut c_int, work: *mut c_float_complex,
                         rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_ztgevc(side: *mut c_char, howmny: *mut c_char, select: *const c_int,
                         n: *mut c_int, s: *const c_double_complex, lds: *mut c_int,
                         p: *const c_double_complex, ldp: *mut c_int, vl: *mut c_double_complex,
                         ldvl: *mut c_int, vr: *mut c_double_complex, ldvr: *mut c_int,
                         mm: *mut c_int, m: *mut c_int, work: *mut c_double_complex,
                         rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_stgexc(wantq: *mut c_int, wantz: *mut c_int, n: *mut c_int, a: *mut c_float,
                         lda: *mut c_int, b: *mut c_float, ldb: *mut c_int, q: *mut c_float,
                         ldq: *mut c_int, z: *mut c_float, ldz: *mut c_int, ifst: *mut c_int,
                         ilst: *mut c_int, work: *mut c_float, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dtgexc(wantq: *mut c_int, wantz: *mut c_int, n: *mut c_int, a: *mut c_double,
                         lda: *mut c_int, b: *mut c_double, ldb: *mut c_int, q: *mut c_double,
                         ldq: *mut c_int, z: *mut c_double, ldz: *mut c_int, ifst: *mut c_int,
                         ilst: *mut c_int, work: *mut c_double, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_ctgexc(wantq: *mut c_int, wantz: *mut c_int, n: *mut c_int,
                         a: *mut c_float_complex, lda: *mut c_int, b: *mut c_float_complex,
                         ldb: *mut c_int, q: *mut c_float_complex, ldq: *mut c_int,
                         z: *mut c_float_complex, ldz: *mut c_int, ifst: *mut c_int,
                         ilst: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ztgexc(wantq: *mut c_int, wantz: *mut c_int, n: *mut c_int,
                         a: *mut c_double_complex, lda: *mut c_int, b: *mut c_double_complex,
                         ldb: *mut c_int, q: *mut c_double_complex, ldq: *mut c_int,
                         z: *mut c_double_complex, ldz: *mut c_int, ifst: *mut c_int,
                         ilst: *mut c_int, info: *mut c_int);
    pub fn LAPACK_stgsen(ijob: *mut c_int, wantq: *mut c_int, wantz: *mut c_int,
                         select: *const c_int, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         b: *mut c_float, ldb: *mut c_int, alphar: *mut c_float,
                         alphai: *mut c_float, beta: *mut c_float, q: *mut c_float,
                         ldq: *mut c_int, z: *mut c_float, ldz: *mut c_int, m: *mut c_int,
                         pl: *mut c_float, pr: *mut c_float, dif: *mut c_float, work: *mut c_float,
                         lwork: *mut c_int, iwork: *mut c_int, liwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dtgsen(ijob: *mut c_int, wantq: *mut c_int, wantz: *mut c_int,
                         select: *const c_int, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         b: *mut c_double, ldb: *mut c_int, alphar: *mut c_double,
                         alphai: *mut c_double, beta: *mut c_double, q: *mut c_double,
                         ldq: *mut c_int, z: *mut c_double, ldz: *mut c_int, m: *mut c_int,
                         pl: *mut c_double, pr: *mut c_double, dif: *mut c_double,
                         work: *mut c_double, lwork: *mut c_int, iwork: *mut c_int,
                         liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ctgsen(ijob: *mut c_int, wantq: *mut c_int, wantz: *mut c_int,
                         select: *const c_int, n: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, b: *mut c_float_complex, ldb: *mut c_int,
                         alpha: *mut c_float_complex, beta: *mut c_float_complex,
                         q: *mut c_float_complex, ldq: *mut c_int, z: *mut c_float_complex,
                         ldz: *mut c_int, m: *mut c_int, pl: *mut c_float, pr: *mut c_float,
                         dif: *mut c_float, work: *mut c_float_complex, lwork: *mut c_int,
                         iwork: *mut c_int, liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ztgsen(ijob: *mut c_int, wantq: *mut c_int, wantz: *mut c_int,
                         select: *const c_int, n: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, b: *mut c_double_complex, ldb: *mut c_int,
                         alpha: *mut c_double_complex, beta: *mut c_double_complex,
                         q: *mut c_double_complex, ldq: *mut c_int, z: *mut c_double_complex,
                         ldz: *mut c_int, m: *mut c_int, pl: *mut c_double, pr: *mut c_double,
                         dif: *mut c_double, work: *mut c_double_complex, lwork: *mut c_int,
                         iwork: *mut c_int, liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_stgsyl(trans: *mut c_char, ijob: *mut c_int, m: *mut c_int, n: *mut c_int,
                         a: *const c_float, lda: *mut c_int, b: *const c_float, ldb: *mut c_int,
                         c: *mut c_float, ldc: *mut c_int, d: *const c_float, ldd: *mut c_int,
                         e: *const c_float, lde: *mut c_int, f: *mut c_float, ldf: *mut c_int,
                         scale: *mut c_float, dif: *mut c_float, work: *mut c_float,
                         lwork: *mut c_int, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dtgsyl(trans: *mut c_char, ijob: *mut c_int, m: *mut c_int, n: *mut c_int,
                         a: *const c_double, lda: *mut c_int, b: *const c_double, ldb: *mut c_int,
                         c: *mut c_double, ldc: *mut c_int, d: *const c_double, ldd: *mut c_int,
                         e: *const c_double, lde: *mut c_int, f: *mut c_double, ldf: *mut c_int,
                         scale: *mut c_double, dif: *mut c_double, work: *mut c_double,
                         lwork: *mut c_int, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ctgsyl(trans: *mut c_char, ijob: *mut c_int, m: *mut c_int, n: *mut c_int,
                         a: *const c_float_complex, lda: *mut c_int, b: *const c_float_complex,
                         ldb: *mut c_int, c: *mut c_float_complex, ldc: *mut c_int,
                         d: *const c_float_complex, ldd: *mut c_int, e: *const c_float_complex,
                         lde: *mut c_int, f: *mut c_float_complex, ldf: *mut c_int,
                         scale: *mut c_float, dif: *mut c_float, work: *mut c_float_complex,
                         lwork: *mut c_int, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ztgsyl(trans: *mut c_char, ijob: *mut c_int, m: *mut c_int, n: *mut c_int,
                         a: *const c_double_complex, lda: *mut c_int, b: *const c_double_complex,
                         ldb: *mut c_int, c: *mut c_double_complex, ldc: *mut c_int,
                         d: *const c_double_complex, ldd: *mut c_int, e: *const c_double_complex,
                         lde: *mut c_int, f: *mut c_double_complex, ldf: *mut c_int,
                         scale: *mut c_double, dif: *mut c_double, work: *mut c_double_complex,
                         lwork: *mut c_int, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_stgsna(job: *mut c_char, howmny: *mut c_char, select: *const c_int,
                         n: *mut c_int, a: *const c_float, lda: *mut c_int, b: *const c_float,
                         ldb: *mut c_int, vl: *const c_float, ldvl: *mut c_int, vr: *const c_float,
                         ldvr: *mut c_int, s: *mut c_float, dif: *mut c_float, mm: *mut c_int,
                         m: *mut c_int, work: *mut c_float, lwork: *mut c_int, iwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dtgsna(job: *mut c_char, howmny: *mut c_char, select: *const c_int,
                         n: *mut c_int, a: *const c_double, lda: *mut c_int, b: *const c_double,
                         ldb: *mut c_int, vl: *const c_double, ldvl: *mut c_int,
                         vr: *const c_double, ldvr: *mut c_int, s: *mut c_double,
                         dif: *mut c_double, mm: *mut c_int, m: *mut c_int, work: *mut c_double,
                         lwork: *mut c_int, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ctgsna(job: *mut c_char, howmny: *mut c_char, select: *const c_int,
                         n: *mut c_int, a: *const c_float_complex, lda: *mut c_int,
                         b: *const c_float_complex, ldb: *mut c_int, vl: *const c_float_complex,
                         ldvl: *mut c_int, vr: *const c_float_complex, ldvr: *mut c_int,
                         s: *mut c_float, dif: *mut c_float, mm: *mut c_int, m: *mut c_int,
                         work: *mut c_float_complex, lwork: *mut c_int, iwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_ztgsna(job: *mut c_char, howmny: *mut c_char, select: *const c_int,
                         n: *mut c_int, a: *const c_double_complex, lda: *mut c_int,
                         b: *const c_double_complex, ldb: *mut c_int, vl: *const c_double_complex,
                         ldvl: *mut c_int, vr: *const c_double_complex, ldvr: *mut c_int,
                         s: *mut c_double, dif: *mut c_double, mm: *mut c_int, m: *mut c_int,
                         work: *mut c_double_complex, lwork: *mut c_int, iwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_sggsvp(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut c_int,
                         p: *mut c_int, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         b: *mut c_float, ldb: *mut c_int, tola: *mut c_float, tolb: *mut c_float,
                         k: *mut c_int, l: *mut c_int, u: *mut c_float, ldu: *mut c_int,
                         v: *mut c_float, ldv: *mut c_int, q: *mut c_float, ldq: *mut c_int,
                         iwork: *mut c_int, tau: *mut c_float, work: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_dggsvp(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut c_int,
                         p: *mut c_int, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         b: *mut c_double, ldb: *mut c_int, tola: *mut c_double,
                         tolb: *mut c_double, k: *mut c_int, l: *mut c_int, u: *mut c_double,
                         ldu: *mut c_int, v: *mut c_double, ldv: *mut c_int, q: *mut c_double,
                         ldq: *mut c_int, iwork: *mut c_int, tau: *mut c_double,
                         work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_cggsvp(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut c_int,
                         p: *mut c_int, n: *mut c_int, a: *mut c_float_complex, lda: *mut c_int,
                         b: *mut c_float_complex, ldb: *mut c_int, tola: *mut c_float,
                         tolb: *mut c_float, k: *mut c_int, l: *mut c_int, u: *mut c_float_complex,
                         ldu: *mut c_int, v: *mut c_float_complex, ldv: *mut c_int,
                         q: *mut c_float_complex, ldq: *mut c_int, iwork: *mut c_int,
                         rwork: *mut c_float, tau: *mut c_float_complex,
                         work: *mut c_float_complex, info: *mut c_int);
    pub fn LAPACK_zggsvp(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut c_int,
                         p: *mut c_int, n: *mut c_int, a: *mut c_double_complex, lda: *mut c_int,
                         b: *mut c_double_complex, ldb: *mut c_int, tola: *mut c_double,
                         tolb: *mut c_double, k: *mut c_int, l: *mut c_int,
                         u: *mut c_double_complex, ldu: *mut c_int, v: *mut c_double_complex,
                         ldv: *mut c_int, q: *mut c_double_complex, ldq: *mut c_int,
                         iwork: *mut c_int, rwork: *mut c_double, tau: *mut c_double_complex,
                         work: *mut c_double_complex, info: *mut c_int);
    pub fn LAPACK_sggsvp3(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut c_int,
                          p: *mut c_int, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                          b: *mut c_float, ldb: *mut c_int, tola: *mut c_float, tolb: *mut c_float,
                          k: *mut c_int, l: *mut c_int, u: *mut c_float, ldu: *mut c_int,
                          v: *mut c_float, ldv: *mut c_int, q: *mut c_float, ldq: *mut c_int,
                          iwork: *mut c_int, tau: *mut c_float, work: *mut c_float,
                          lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dggsvp3(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut c_int,
                          p: *mut c_int, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                          b: *mut c_double, ldb: *mut c_int, tola: *mut c_double,
                          tolb: *mut c_double, k: *mut c_int, l: *mut c_int, u: *mut c_double,
                          ldu: *mut c_int, v: *mut c_double, ldv: *mut c_int, q: *mut c_double,
                          ldq: *mut c_int, iwork: *mut c_int, tau: *mut c_double,
                          work: *mut c_double, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cggsvp3(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut c_int,
                          p: *mut c_int, n: *mut c_int, a: *mut c_float_complex, lda: *mut c_int,
                          b: *mut c_float_complex, ldb: *mut c_int, tola: *mut c_float,
                          tolb: *mut c_float, k: *mut c_int, l: *mut c_int,
                          u: *mut c_float_complex, ldu: *mut c_int, v: *mut c_float_complex,
                          ldv: *mut c_int, q: *mut c_float_complex, ldq: *mut c_int,
                          iwork: *mut c_int, rwork: *mut c_float, tau: *mut c_float_complex,
                          work: *mut c_float_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zggsvp3(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut c_int,
                          p: *mut c_int, n: *mut c_int, a: *mut c_double_complex, lda: *mut c_int,
                          b: *mut c_double_complex, ldb: *mut c_int, tola: *mut c_double,
                          tolb: *mut c_double, k: *mut c_int, l: *mut c_int,
                          u: *mut c_double_complex, ldu: *mut c_int, v: *mut c_double_complex,
                          ldv: *mut c_int, q: *mut c_double_complex, ldq: *mut c_int,
                          iwork: *mut c_int, rwork: *mut c_double, tau: *mut c_double_complex,
                          work: *mut c_double_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_stgsja(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut c_int,
                         p: *mut c_int, n: *mut c_int, k: *mut c_int, l: *mut c_int,
                         a: *mut c_float, lda: *mut c_int, b: *mut c_float, ldb: *mut c_int,
                         tola: *mut c_float, tolb: *mut c_float, alpha: *mut c_float,
                         beta: *mut c_float, u: *mut c_float, ldu: *mut c_int, v: *mut c_float,
                         ldv: *mut c_int, q: *mut c_float, ldq: *mut c_int, work: *mut c_float,
                         ncycle: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dtgsja(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut c_int,
                         p: *mut c_int, n: *mut c_int, k: *mut c_int, l: *mut c_int,
                         a: *mut c_double, lda: *mut c_int, b: *mut c_double, ldb: *mut c_int,
                         tola: *mut c_double, tolb: *mut c_double, alpha: *mut c_double,
                         beta: *mut c_double, u: *mut c_double, ldu: *mut c_int, v: *mut c_double,
                         ldv: *mut c_int, q: *mut c_double, ldq: *mut c_int, work: *mut c_double,
                         ncycle: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ctgsja(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut c_int,
                         p: *mut c_int, n: *mut c_int, k: *mut c_int, l: *mut c_int,
                         a: *mut c_float_complex, lda: *mut c_int, b: *mut c_float_complex,
                         ldb: *mut c_int, tola: *mut c_float, tolb: *mut c_float,
                         alpha: *mut c_float, beta: *mut c_float, u: *mut c_float_complex,
                         ldu: *mut c_int, v: *mut c_float_complex, ldv: *mut c_int,
                         q: *mut c_float_complex, ldq: *mut c_int, work: *mut c_float_complex,
                         ncycle: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ztgsja(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut c_int,
                         p: *mut c_int, n: *mut c_int, k: *mut c_int, l: *mut c_int,
                         a: *mut c_double_complex, lda: *mut c_int, b: *mut c_double_complex,
                         ldb: *mut c_int, tola: *mut c_double, tolb: *mut c_double,
                         alpha: *mut c_double, beta: *mut c_double, u: *mut c_double_complex,
                         ldu: *mut c_int, v: *mut c_double_complex, ldv: *mut c_int,
                         q: *mut c_double_complex, ldq: *mut c_int, work: *mut c_double_complex,
                         ncycle: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sgels(trans: *mut c_char, m: *mut c_int, n: *mut c_int, nrhs: *mut c_int,
                        a: *mut c_float, lda: *mut c_int, b: *mut c_float, ldb: *mut c_int,
                        work: *mut c_float, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgels(trans: *mut c_char, m: *mut c_int, n: *mut c_int, nrhs: *mut c_int,
                        a: *mut c_double, lda: *mut c_int, b: *mut c_double, ldb: *mut c_int,
                        work: *mut c_double, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgels(trans: *mut c_char, m: *mut c_int, n: *mut c_int, nrhs: *mut c_int,
                        a: *mut c_float_complex, lda: *mut c_int, b: *mut c_float_complex,
                        ldb: *mut c_int, work: *mut c_float_complex, lwork: *mut c_int,
                        info: *mut c_int);
    pub fn LAPACK_zgels(trans: *mut c_char, m: *mut c_int, n: *mut c_int, nrhs: *mut c_int,
                        a: *mut c_double_complex, lda: *mut c_int, b: *mut c_double_complex,
                        ldb: *mut c_int, work: *mut c_double_complex, lwork: *mut c_int,
                        info: *mut c_int);
    pub fn LAPACK_sgelsy(m: *mut c_int, n: *mut c_int, nrhs: *mut c_int, a: *mut c_float,
                         lda: *mut c_int, b: *mut c_float, ldb: *mut c_int, jpvt: *mut c_int,
                         rcond: *mut c_float, rank: *mut c_int, work: *mut c_float,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgelsy(m: *mut c_int, n: *mut c_int, nrhs: *mut c_int, a: *mut c_double,
                         lda: *mut c_int, b: *mut c_double, ldb: *mut c_int, jpvt: *mut c_int,
                         rcond: *mut c_double, rank: *mut c_int, work: *mut c_double,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgelsy(m: *mut c_int, n: *mut c_int, nrhs: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, b: *mut c_float_complex, ldb: *mut c_int,
                         jpvt: *mut c_int, rcond: *mut c_float, rank: *mut c_int,
                         work: *mut c_float_complex, lwork: *mut c_int, rwork: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_zgelsy(m: *mut c_int, n: *mut c_int, nrhs: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, b: *mut c_double_complex, ldb: *mut c_int,
                         jpvt: *mut c_int, rcond: *mut c_double, rank: *mut c_int,
                         work: *mut c_double_complex, lwork: *mut c_int, rwork: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_sgelss(m: *mut c_int, n: *mut c_int, nrhs: *mut c_int, a: *mut c_float,
                         lda: *mut c_int, b: *mut c_float, ldb: *mut c_int, s: *mut c_float,
                         rcond: *mut c_float, rank: *mut c_int, work: *mut c_float,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgelss(m: *mut c_int, n: *mut c_int, nrhs: *mut c_int, a: *mut c_double,
                         lda: *mut c_int, b: *mut c_double, ldb: *mut c_int, s: *mut c_double,
                         rcond: *mut c_double, rank: *mut c_int, work: *mut c_double,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgelss(m: *mut c_int, n: *mut c_int, nrhs: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, b: *mut c_float_complex, ldb: *mut c_int,
                         s: *mut c_float, rcond: *mut c_float, rank: *mut c_int,
                         work: *mut c_float_complex, lwork: *mut c_int, rwork: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_zgelss(m: *mut c_int, n: *mut c_int, nrhs: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, b: *mut c_double_complex, ldb: *mut c_int,
                         s: *mut c_double, rcond: *mut c_double, rank: *mut c_int,
                         work: *mut c_double_complex, lwork: *mut c_int, rwork: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_sgelsd(m: *mut c_int, n: *mut c_int, nrhs: *mut c_int, a: *mut c_float,
                         lda: *mut c_int, b: *mut c_float, ldb: *mut c_int, s: *mut c_float,
                         rcond: *mut c_float, rank: *mut c_int, work: *mut c_float,
                         lwork: *mut c_int, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgelsd(m: *mut c_int, n: *mut c_int, nrhs: *mut c_int, a: *mut c_double,
                         lda: *mut c_int, b: *mut c_double, ldb: *mut c_int, s: *mut c_double,
                         rcond: *mut c_double, rank: *mut c_int, work: *mut c_double,
                         lwork: *mut c_int, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgelsd(m: *mut c_int, n: *mut c_int, nrhs: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, b: *mut c_float_complex, ldb: *mut c_int,
                         s: *mut c_float, rcond: *mut c_float, rank: *mut c_int,
                         work: *mut c_float_complex, lwork: *mut c_int, rwork: *mut c_float,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zgelsd(m: *mut c_int, n: *mut c_int, nrhs: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, b: *mut c_double_complex, ldb: *mut c_int,
                         s: *mut c_double, rcond: *mut c_double, rank: *mut c_int,
                         work: *mut c_double_complex, lwork: *mut c_int, rwork: *mut c_double,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sgglse(m: *mut c_int, n: *mut c_int, p: *mut c_int, a: *mut c_float,
                         lda: *mut c_int, b: *mut c_float, ldb: *mut c_int, c: *mut c_float,
                         d: *mut c_float, x: *mut c_float, work: *mut c_float, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dgglse(m: *mut c_int, n: *mut c_int, p: *mut c_int, a: *mut c_double,
                         lda: *mut c_int, b: *mut c_double, ldb: *mut c_int, c: *mut c_double,
                         d: *mut c_double, x: *mut c_double, work: *mut c_double,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgglse(m: *mut c_int, n: *mut c_int, p: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, b: *mut c_float_complex, ldb: *mut c_int,
                         c: *mut c_float_complex, d: *mut c_float_complex, x: *mut c_float_complex,
                         work: *mut c_float_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zgglse(m: *mut c_int, n: *mut c_int, p: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, b: *mut c_double_complex, ldb: *mut c_int,
                         c: *mut c_double_complex, d: *mut c_double_complex,
                         x: *mut c_double_complex, work: *mut c_double_complex, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_sggglm(n: *mut c_int, m: *mut c_int, p: *mut c_int, a: *mut c_float,
                         lda: *mut c_int, b: *mut c_float, ldb: *mut c_int, d: *mut c_float,
                         x: *mut c_float, y: *mut c_float, work: *mut c_float, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dggglm(n: *mut c_int, m: *mut c_int, p: *mut c_int, a: *mut c_double,
                         lda: *mut c_int, b: *mut c_double, ldb: *mut c_int, d: *mut c_double,
                         x: *mut c_double, y: *mut c_double, work: *mut c_double,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cggglm(n: *mut c_int, m: *mut c_int, p: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, b: *mut c_float_complex, ldb: *mut c_int,
                         d: *mut c_float_complex, x: *mut c_float_complex, y: *mut c_float_complex,
                         work: *mut c_float_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zggglm(n: *mut c_int, m: *mut c_int, p: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, b: *mut c_double_complex, ldb: *mut c_int,
                         d: *mut c_double_complex, x: *mut c_double_complex,
                         y: *mut c_double_complex, work: *mut c_double_complex, lwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_ssyev(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int, a: *mut c_float,
                        lda: *mut c_int, w: *mut c_float, work: *mut c_float, lwork: *mut c_int,
                        info: *mut c_int);
    pub fn LAPACK_dsyev(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int, a: *mut c_double,
                        lda: *mut c_int, w: *mut c_double, work: *mut c_double, lwork: *mut c_int,
                        info: *mut c_int);
    pub fn LAPACK_cheev(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                        a: *mut c_float_complex, lda: *mut c_int, w: *mut c_float,
                        work: *mut c_float_complex, lwork: *mut c_int, rwork: *mut c_float,
                        info: *mut c_int);
    pub fn LAPACK_zheev(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                        a: *mut c_double_complex, lda: *mut c_int, w: *mut c_double,
                        work: *mut c_double_complex, lwork: *mut c_int, rwork: *mut c_double,
                        info: *mut c_int);
    pub fn LAPACK_ssyevd(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int, a: *mut c_float,
                         lda: *mut c_int, w: *mut c_float, work: *mut c_float, lwork: *mut c_int,
                         iwork: *mut c_int, liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dsyevd(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int, a: *mut c_double,
                         lda: *mut c_int, w: *mut c_double, work: *mut c_double, lwork: *mut c_int,
                         iwork: *mut c_int, liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cheevd(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         a: *mut c_float_complex, lda: *mut c_int, w: *mut c_float,
                         work: *mut c_float_complex, lwork: *mut c_int, rwork: *mut c_float,
                         lrwork: *mut c_int, iwork: *mut c_int, liwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_zheevd(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         a: *mut c_double_complex, lda: *mut c_int, w: *mut c_double,
                         work: *mut c_double_complex, lwork: *mut c_int, rwork: *mut c_double,
                         lrwork: *mut c_int, iwork: *mut c_int, liwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_ssyevx(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         a: *mut c_float, lda: *mut c_int, vl: *mut c_float, vu: *mut c_float,
                         il: *mut c_int, iu: *mut c_int, abstol: *mut c_float, m: *mut c_int,
                         w: *mut c_float, z: *mut c_float, ldz: *mut c_int, work: *mut c_float,
                         lwork: *mut c_int, iwork: *mut c_int, ifail: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dsyevx(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         a: *mut c_double, lda: *mut c_int, vl: *mut c_double, vu: *mut c_double,
                         il: *mut c_int, iu: *mut c_int, abstol: *mut c_double, m: *mut c_int,
                         w: *mut c_double, z: *mut c_double, ldz: *mut c_int, work: *mut c_double,
                         lwork: *mut c_int, iwork: *mut c_int, ifail: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_cheevx(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         a: *mut c_float_complex, lda: *mut c_int, vl: *mut c_float,
                         vu: *mut c_float, il: *mut c_int, iu: *mut c_int, abstol: *mut c_float,
                         m: *mut c_int, w: *mut c_float, z: *mut c_float_complex, ldz: *mut c_int,
                         work: *mut c_float_complex, lwork: *mut c_int, rwork: *mut c_float,
                         iwork: *mut c_int, ifail: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zheevx(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         a: *mut c_double_complex, lda: *mut c_int, vl: *mut c_double,
                         vu: *mut c_double, il: *mut c_int, iu: *mut c_int, abstol: *mut c_double,
                         m: *mut c_int, w: *mut c_double, z: *mut c_double_complex,
                         ldz: *mut c_int, work: *mut c_double_complex, lwork: *mut c_int,
                         rwork: *mut c_double, iwork: *mut c_int, ifail: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_ssyevr(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         a: *mut c_float, lda: *mut c_int, vl: *mut c_float, vu: *mut c_float,
                         il: *mut c_int, iu: *mut c_int, abstol: *mut c_float, m: *mut c_int,
                         w: *mut c_float, z: *mut c_float, ldz: *mut c_int, isuppz: *mut c_int,
                         work: *mut c_float, lwork: *mut c_int, iwork: *mut c_int,
                         liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dsyevr(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         a: *mut c_double, lda: *mut c_int, vl: *mut c_double, vu: *mut c_double,
                         il: *mut c_int, iu: *mut c_int, abstol: *mut c_double, m: *mut c_int,
                         w: *mut c_double, z: *mut c_double, ldz: *mut c_int, isuppz: *mut c_int,
                         work: *mut c_double, lwork: *mut c_int, iwork: *mut c_int,
                         liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cheevr(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         a: *mut c_float_complex, lda: *mut c_int, vl: *mut c_float,
                         vu: *mut c_float, il: *mut c_int, iu: *mut c_int, abstol: *mut c_float,
                         m: *mut c_int, w: *mut c_float, z: *mut c_float_complex, ldz: *mut c_int,
                         isuppz: *mut c_int, work: *mut c_float_complex, lwork: *mut c_int,
                         rwork: *mut c_float, lrwork: *mut c_int, iwork: *mut c_int,
                         liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zheevr(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         a: *mut c_double_complex, lda: *mut c_int, vl: *mut c_double,
                         vu: *mut c_double, il: *mut c_int, iu: *mut c_int, abstol: *mut c_double,
                         m: *mut c_int, w: *mut c_double, z: *mut c_double_complex,
                         ldz: *mut c_int, isuppz: *mut c_int, work: *mut c_double_complex,
                         lwork: *mut c_int, rwork: *mut c_double, lrwork: *mut c_int,
                         iwork: *mut c_int, liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sspev(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int, ap: *mut c_float,
                        w: *mut c_float, z: *mut c_float, ldz: *mut c_int, work: *mut c_float,
                        info: *mut c_int);
    pub fn LAPACK_dspev(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int, ap: *mut c_double,
                        w: *mut c_double, z: *mut c_double, ldz: *mut c_int, work: *mut c_double,
                        info: *mut c_int);
    pub fn LAPACK_chpev(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                        ap: *mut c_float_complex, w: *mut c_float, z: *mut c_float_complex,
                        ldz: *mut c_int, work: *mut c_float_complex, rwork: *mut c_float,
                        info: *mut c_int);
    pub fn LAPACK_zhpev(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                        ap: *mut c_double_complex, w: *mut c_double, z: *mut c_double_complex,
                        ldz: *mut c_int, work: *mut c_double_complex, rwork: *mut c_double,
                        info: *mut c_int);
    pub fn LAPACK_sspevd(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int, ap: *mut c_float,
                         w: *mut c_float, z: *mut c_float, ldz: *mut c_int, work: *mut c_float,
                         lwork: *mut c_int, iwork: *mut c_int, liwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dspevd(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int, ap: *mut c_double,
                         w: *mut c_double, z: *mut c_double, ldz: *mut c_int, work: *mut c_double,
                         lwork: *mut c_int, iwork: *mut c_int, liwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_chpevd(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         ap: *mut c_float_complex, w: *mut c_float, z: *mut c_float_complex,
                         ldz: *mut c_int, work: *mut c_float_complex, lwork: *mut c_int,
                         rwork: *mut c_float, lrwork: *mut c_int, iwork: *mut c_int,
                         liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zhpevd(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         ap: *mut c_double_complex, w: *mut c_double, z: *mut c_double_complex,
                         ldz: *mut c_int, work: *mut c_double_complex, lwork: *mut c_int,
                         rwork: *mut c_double, lrwork: *mut c_int, iwork: *mut c_int,
                         liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sspevx(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         ap: *mut c_float, vl: *mut c_float, vu: *mut c_float, il: *mut c_int,
                         iu: *mut c_int, abstol: *mut c_float, m: *mut c_int, w: *mut c_float,
                         z: *mut c_float, ldz: *mut c_int, work: *mut c_float, iwork: *mut c_int,
                         ifail: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dspevx(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         ap: *mut c_double, vl: *mut c_double, vu: *mut c_double, il: *mut c_int,
                         iu: *mut c_int, abstol: *mut c_double, m: *mut c_int, w: *mut c_double,
                         z: *mut c_double, ldz: *mut c_int, work: *mut c_double, iwork: *mut c_int,
                         ifail: *mut c_int, info: *mut c_int);
    pub fn LAPACK_chpevx(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         ap: *mut c_float_complex, vl: *mut c_float, vu: *mut c_float,
                         il: *mut c_int, iu: *mut c_int, abstol: *mut c_float, m: *mut c_int,
                         w: *mut c_float, z: *mut c_float_complex, ldz: *mut c_int,
                         work: *mut c_float_complex, rwork: *mut c_float, iwork: *mut c_int,
                         ifail: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zhpevx(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         ap: *mut c_double_complex, vl: *mut c_double, vu: *mut c_double,
                         il: *mut c_int, iu: *mut c_int, abstol: *mut c_double, m: *mut c_int,
                         w: *mut c_double, z: *mut c_double_complex, ldz: *mut c_int,
                         work: *mut c_double_complex, rwork: *mut c_double, iwork: *mut c_int,
                         ifail: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ssbev(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int, kd: *mut c_int,
                        ab: *mut c_float, ldab: *mut c_int, w: *mut c_float, z: *mut c_float,
                        ldz: *mut c_int, work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dsbev(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int, kd: *mut c_int,
                        ab: *mut c_double, ldab: *mut c_int, w: *mut c_double, z: *mut c_double,
                        ldz: *mut c_int, work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_chbev(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int, kd: *mut c_int,
                        ab: *mut c_float_complex, ldab: *mut c_int, w: *mut c_float,
                        z: *mut c_float_complex, ldz: *mut c_int, work: *mut c_float_complex,
                        rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zhbev(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int, kd: *mut c_int,
                        ab: *mut c_double_complex, ldab: *mut c_int, w: *mut c_double,
                        z: *mut c_double_complex, ldz: *mut c_int, work: *mut c_double_complex,
                        rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_ssbevd(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int, kd: *mut c_int,
                         ab: *mut c_float, ldab: *mut c_int, w: *mut c_float, z: *mut c_float,
                         ldz: *mut c_int, work: *mut c_float, lwork: *mut c_int, iwork: *mut c_int,
                         liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dsbevd(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int, kd: *mut c_int,
                         ab: *mut c_double, ldab: *mut c_int, w: *mut c_double, z: *mut c_double,
                         ldz: *mut c_int, work: *mut c_double, lwork: *mut c_int,
                         iwork: *mut c_int, liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_chbevd(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int, kd: *mut c_int,
                         ab: *mut c_float_complex, ldab: *mut c_int, w: *mut c_float,
                         z: *mut c_float_complex, ldz: *mut c_int, work: *mut c_float_complex,
                         lwork: *mut c_int, rwork: *mut c_float, lrwork: *mut c_int,
                         iwork: *mut c_int, liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zhbevd(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int, kd: *mut c_int,
                         ab: *mut c_double_complex, ldab: *mut c_int, w: *mut c_double,
                         z: *mut c_double_complex, ldz: *mut c_int, work: *mut c_double_complex,
                         lwork: *mut c_int, rwork: *mut c_double, lrwork: *mut c_int,
                         iwork: *mut c_int, liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ssbevx(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         kd: *mut c_int, ab: *mut c_float, ldab: *mut c_int, q: *mut c_float,
                         ldq: *mut c_int, vl: *mut c_float, vu: *mut c_float, il: *mut c_int,
                         iu: *mut c_int, abstol: *mut c_float, m: *mut c_int, w: *mut c_float,
                         z: *mut c_float, ldz: *mut c_int, work: *mut c_float, iwork: *mut c_int,
                         ifail: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dsbevx(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         kd: *mut c_int, ab: *mut c_double, ldab: *mut c_int, q: *mut c_double,
                         ldq: *mut c_int, vl: *mut c_double, vu: *mut c_double, il: *mut c_int,
                         iu: *mut c_int, abstol: *mut c_double, m: *mut c_int, w: *mut c_double,
                         z: *mut c_double, ldz: *mut c_int, work: *mut c_double, iwork: *mut c_int,
                         ifail: *mut c_int, info: *mut c_int);
    pub fn LAPACK_chbevx(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         kd: *mut c_int, ab: *mut c_float_complex, ldab: *mut c_int,
                         q: *mut c_float_complex, ldq: *mut c_int, vl: *mut c_float,
                         vu: *mut c_float, il: *mut c_int, iu: *mut c_int, abstol: *mut c_float,
                         m: *mut c_int, w: *mut c_float, z: *mut c_float_complex, ldz: *mut c_int,
                         work: *mut c_float_complex, rwork: *mut c_float, iwork: *mut c_int,
                         ifail: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zhbevx(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         kd: *mut c_int, ab: *mut c_double_complex, ldab: *mut c_int,
                         q: *mut c_double_complex, ldq: *mut c_int, vl: *mut c_double,
                         vu: *mut c_double, il: *mut c_int, iu: *mut c_int, abstol: *mut c_double,
                         m: *mut c_int, w: *mut c_double, z: *mut c_double_complex,
                         ldz: *mut c_int, work: *mut c_double_complex, rwork: *mut c_double,
                         iwork: *mut c_int, ifail: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sstev(jobz: *mut c_char, n: *mut c_int, d: *mut c_float, e: *mut c_float,
                        z: *mut c_float, ldz: *mut c_int, work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dstev(jobz: *mut c_char, n: *mut c_int, d: *mut c_double, e: *mut c_double,
                        z: *mut c_double, ldz: *mut c_int, work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_sstevd(jobz: *mut c_char, n: *mut c_int, d: *mut c_float, e: *mut c_float,
                         z: *mut c_float, ldz: *mut c_int, work: *mut c_float, lwork: *mut c_int,
                         iwork: *mut c_int, liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dstevd(jobz: *mut c_char, n: *mut c_int, d: *mut c_double, e: *mut c_double,
                         z: *mut c_double, ldz: *mut c_int, work: *mut c_double, lwork: *mut c_int,
                         iwork: *mut c_int, liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sstevx(jobz: *mut c_char, range: *mut c_char, n: *mut c_int, d: *mut c_float,
                         e: *mut c_float, vl: *mut c_float, vu: *mut c_float, il: *mut c_int,
                         iu: *mut c_int, abstol: *mut c_float, m: *mut c_int, w: *mut c_float,
                         z: *mut c_float, ldz: *mut c_int, work: *mut c_float, iwork: *mut c_int,
                         ifail: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dstevx(jobz: *mut c_char, range: *mut c_char, n: *mut c_int, d: *mut c_double,
                         e: *mut c_double, vl: *mut c_double, vu: *mut c_double, il: *mut c_int,
                         iu: *mut c_int, abstol: *mut c_double, m: *mut c_int, w: *mut c_double,
                         z: *mut c_double, ldz: *mut c_int, work: *mut c_double, iwork: *mut c_int,
                         ifail: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sstevr(jobz: *mut c_char, range: *mut c_char, n: *mut c_int, d: *mut c_float,
                         e: *mut c_float, vl: *mut c_float, vu: *mut c_float, il: *mut c_int,
                         iu: *mut c_int, abstol: *mut c_float, m: *mut c_int, w: *mut c_float,
                         z: *mut c_float, ldz: *mut c_int, isuppz: *mut c_int, work: *mut c_float,
                         lwork: *mut c_int, iwork: *mut c_int, liwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dstevr(jobz: *mut c_char, range: *mut c_char, n: *mut c_int, d: *mut c_double,
                         e: *mut c_double, vl: *mut c_double, vu: *mut c_double, il: *mut c_int,
                         iu: *mut c_int, abstol: *mut c_double, m: *mut c_int, w: *mut c_double,
                         z: *mut c_double, ldz: *mut c_int, isuppz: *mut c_int,
                         work: *mut c_double, lwork: *mut c_int, iwork: *mut c_int,
                         liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sgees(jobvs: *mut c_char, sort: *mut c_char, select: LAPACK_S_SELECT2,
                        n: *mut c_int, a: *mut c_float, lda: *mut c_int, sdim: *mut c_int,
                        wr: *mut c_float, wi: *mut c_float, vs: *mut c_float, ldvs: *mut c_int,
                        work: *mut c_float, lwork: *mut c_int, bwork: *mut c_int,
                        info: *mut c_int);
    pub fn LAPACK_dgees(jobvs: *mut c_char, sort: *mut c_char, select: LAPACK_D_SELECT2,
                        n: *mut c_int, a: *mut c_double, lda: *mut c_int, sdim: *mut c_int,
                        wr: *mut c_double, wi: *mut c_double, vs: *mut c_double, ldvs: *mut c_int,
                        work: *mut c_double, lwork: *mut c_int, bwork: *mut c_int,
                        info: *mut c_int);
    pub fn LAPACK_cgees(jobvs: *mut c_char, sort: *mut c_char, select: LAPACK_C_SELECT1,
                        n: *mut c_int, a: *mut c_float_complex, lda: *mut c_int, sdim: *mut c_int,
                        w: *mut c_float_complex, vs: *mut c_float_complex, ldvs: *mut c_int,
                        work: *mut c_float_complex, lwork: *mut c_int, rwork: *mut c_float,
                        bwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zgees(jobvs: *mut c_char, sort: *mut c_char, select: LAPACK_Z_SELECT1,
                        n: *mut c_int, a: *mut c_double_complex, lda: *mut c_int, sdim: *mut c_int,
                        w: *mut c_double_complex, vs: *mut c_double_complex, ldvs: *mut c_int,
                        work: *mut c_double_complex, lwork: *mut c_int, rwork: *mut c_double,
                        bwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sgeesx(jobvs: *mut c_char, sort: *mut c_char, select: LAPACK_S_SELECT2,
                         sense: *mut c_char, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         sdim: *mut c_int, wr: *mut c_float, wi: *mut c_float, vs: *mut c_float,
                         ldvs: *mut c_int, rconde: *mut c_float, rcondv: *mut c_float,
                         work: *mut c_float, lwork: *mut c_int, iwork: *mut c_int,
                         liwork: *mut c_int, bwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgeesx(jobvs: *mut c_char, sort: *mut c_char, select: LAPACK_D_SELECT2,
                         sense: *mut c_char, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         sdim: *mut c_int, wr: *mut c_double, wi: *mut c_double, vs: *mut c_double,
                         ldvs: *mut c_int, rconde: *mut c_double, rcondv: *mut c_double,
                         work: *mut c_double, lwork: *mut c_int, iwork: *mut c_int,
                         liwork: *mut c_int, bwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgeesx(jobvs: *mut c_char, sort: *mut c_char, select: LAPACK_C_SELECT1,
                         sense: *mut c_char, n: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, sdim: *mut c_int, w: *mut c_float_complex,
                         vs: *mut c_float_complex, ldvs: *mut c_int, rconde: *mut c_float,
                         rcondv: *mut c_float, work: *mut c_float_complex, lwork: *mut c_int,
                         rwork: *mut c_float, bwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zgeesx(jobvs: *mut c_char, sort: *mut c_char, select: LAPACK_Z_SELECT1,
                         sense: *mut c_char, n: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, sdim: *mut c_int, w: *mut c_double_complex,
                         vs: *mut c_double_complex, ldvs: *mut c_int, rconde: *mut c_double,
                         rcondv: *mut c_double, work: *mut c_double_complex, lwork: *mut c_int,
                         rwork: *mut c_double, bwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sgeev(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut c_int, a: *mut c_float,
                        lda: *mut c_int, wr: *mut c_float, wi: *mut c_float, vl: *mut c_float,
                        ldvl: *mut c_int, vr: *mut c_float, ldvr: *mut c_int, work: *mut c_float,
                        lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgeev(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut c_int, a: *mut c_double,
                        lda: *mut c_int, wr: *mut c_double, wi: *mut c_double, vl: *mut c_double,
                        ldvl: *mut c_int, vr: *mut c_double, ldvr: *mut c_int, work: *mut c_double,
                        lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgeev(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut c_int,
                        a: *mut c_float_complex, lda: *mut c_int, w: *mut c_float_complex,
                        vl: *mut c_float_complex, ldvl: *mut c_int, vr: *mut c_float_complex,
                        ldvr: *mut c_int, work: *mut c_float_complex, lwork: *mut c_int,
                        rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zgeev(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut c_int,
                        a: *mut c_double_complex, lda: *mut c_int, w: *mut c_double_complex,
                        vl: *mut c_double_complex, ldvl: *mut c_int, vr: *mut c_double_complex,
                        ldvr: *mut c_int, work: *mut c_double_complex, lwork: *mut c_int,
                        rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_sgeevx(balanc: *mut c_char, jobvl: *mut c_char, jobvr: *mut c_char,
                         sense: *mut c_char, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         wr: *mut c_float, wi: *mut c_float, vl: *mut c_float, ldvl: *mut c_int,
                         vr: *mut c_float, ldvr: *mut c_int, ilo: *mut c_int, ihi: *mut c_int,
                         scale: *mut c_float, abnrm: *mut c_float, rconde: *mut c_float,
                         rcondv: *mut c_float, work: *mut c_float, lwork: *mut c_int,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgeevx(balanc: *mut c_char, jobvl: *mut c_char, jobvr: *mut c_char,
                         sense: *mut c_char, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         wr: *mut c_double, wi: *mut c_double, vl: *mut c_double, ldvl: *mut c_int,
                         vr: *mut c_double, ldvr: *mut c_int, ilo: *mut c_int, ihi: *mut c_int,
                         scale: *mut c_double, abnrm: *mut c_double, rconde: *mut c_double,
                         rcondv: *mut c_double, work: *mut c_double, lwork: *mut c_int,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgeevx(balanc: *mut c_char, jobvl: *mut c_char, jobvr: *mut c_char,
                         sense: *mut c_char, n: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, w: *mut c_float_complex, vl: *mut c_float_complex,
                         ldvl: *mut c_int, vr: *mut c_float_complex, ldvr: *mut c_int,
                         ilo: *mut c_int, ihi: *mut c_int, scale: *mut c_float,
                         abnrm: *mut c_float, rconde: *mut c_float, rcondv: *mut c_float,
                         work: *mut c_float_complex, lwork: *mut c_int, rwork: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_zgeevx(balanc: *mut c_char, jobvl: *mut c_char, jobvr: *mut c_char,
                         sense: *mut c_char, n: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, w: *mut c_double_complex, vl: *mut c_double_complex,
                         ldvl: *mut c_int, vr: *mut c_double_complex, ldvr: *mut c_int,
                         ilo: *mut c_int, ihi: *mut c_int, scale: *mut c_double,
                         abnrm: *mut c_double, rconde: *mut c_double, rcondv: *mut c_double,
                         work: *mut c_double_complex, lwork: *mut c_int, rwork: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_sgesvd(jobu: *mut c_char, jobvt: *mut c_char, m: *mut c_int, n: *mut c_int,
                         a: *mut c_float, lda: *mut c_int, s: *mut c_float, u: *mut c_float,
                         ldu: *mut c_int, vt: *mut c_float, ldvt: *mut c_int, work: *mut c_float,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgesvd(jobu: *mut c_char, jobvt: *mut c_char, m: *mut c_int, n: *mut c_int,
                         a: *mut c_double, lda: *mut c_int, s: *mut c_double, u: *mut c_double,
                         ldu: *mut c_int, vt: *mut c_double, ldvt: *mut c_int, work: *mut c_double,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgesvd(jobu: *mut c_char, jobvt: *mut c_char, m: *mut c_int, n: *mut c_int,
                         a: *mut c_float_complex, lda: *mut c_int, s: *mut c_float,
                         u: *mut c_float_complex, ldu: *mut c_int, vt: *mut c_float_complex,
                         ldvt: *mut c_int, work: *mut c_float_complex, lwork: *mut c_int,
                         rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zgesvd(jobu: *mut c_char, jobvt: *mut c_char, m: *mut c_int, n: *mut c_int,
                         a: *mut c_double_complex, lda: *mut c_int, s: *mut c_double,
                         u: *mut c_double_complex, ldu: *mut c_int, vt: *mut c_double_complex,
                         ldvt: *mut c_int, work: *mut c_double_complex, lwork: *mut c_int,
                         rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_sgesvdx(jobu: *mut c_char, jobvt: *mut c_char, range: *mut c_char, m: *mut c_int,
                          n: *mut c_int, a: *mut c_float, lda: *mut c_int, vl: *mut c_int,
                          vu: *mut c_int, il: *mut c_int, iu: *mut c_int, ns: *mut c_int,
                          s: *mut c_float, u: *mut c_float, ldu: *mut c_int, vt: *mut c_float,
                          ldvt: *mut c_int, work: *mut c_float, lwork: *mut c_int,
                          iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgesvdx(jobu: *mut c_char, jobvt: *mut c_char, range: *mut c_char, m: *mut c_int,
                          n: *mut c_int, a: *mut c_double, lda: *mut c_int, vl: *mut c_int,
                          vu: *mut c_int, il: *mut c_int, iu: *mut c_int, ns: *mut c_int,
                          s: *mut c_double, u: *mut c_double, ldu: *mut c_int, vt: *mut c_double,
                          ldvt: *mut c_int, work: *mut c_double, lwork: *mut c_int,
                          iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgesvdx(jobu: *mut c_char, jobvt: *mut c_char, range: *mut c_char, m: *mut c_int,
                          n: *mut c_int, a: *mut c_float_complex, lda: *mut c_int, vl: *mut c_int,
                          vu: *mut c_int, il: *mut c_int, iu: *mut c_int, ns: *mut c_int,
                          s: *mut c_float, u: *mut c_float_complex, ldu: *mut c_int,
                          vt: *mut c_float_complex, ldvt: *mut c_int, work: *mut c_float_complex,
                          lwork: *mut c_int, rwork: *mut c_float, iwork: *mut c_int,
                          info: *mut c_int);
    pub fn LAPACK_zgesvdx(jobu: *mut c_char, jobvt: *mut c_char, range: *mut c_char, m: *mut c_int,
                          n: *mut c_int, a: *mut c_double_complex, lda: *mut c_int, vl: *mut c_int,
                          vu: *mut c_int, il: *mut c_int, iu: *mut c_int, ns: *mut c_int,
                          s: *mut c_double, u: *mut c_double_complex, ldu: *mut c_int,
                          vt: *mut c_double_complex, ldvt: *mut c_int, work: *mut c_double_complex,
                          lwork: *mut c_int, rwork: *mut c_double, iwork: *mut c_int,
                          info: *mut c_int);
    pub fn LAPACK_sgesdd(jobz: *mut c_char, m: *mut c_int, n: *mut c_int, a: *mut c_float,
                         lda: *mut c_int, s: *mut c_float, u: *mut c_float, ldu: *mut c_int,
                         vt: *mut c_float, ldvt: *mut c_int, work: *mut c_float, lwork: *mut c_int,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgesdd(jobz: *mut c_char, m: *mut c_int, n: *mut c_int, a: *mut c_double,
                         lda: *mut c_int, s: *mut c_double, u: *mut c_double, ldu: *mut c_int,
                         vt: *mut c_double, ldvt: *mut c_int, work: *mut c_double,
                         lwork: *mut c_int, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgesdd(jobz: *mut c_char, m: *mut c_int, n: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, s: *mut c_float, u: *mut c_float_complex,
                         ldu: *mut c_int, vt: *mut c_float_complex, ldvt: *mut c_int,
                         work: *mut c_float_complex, lwork: *mut c_int, rwork: *mut c_float,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zgesdd(jobz: *mut c_char, m: *mut c_int, n: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, s: *mut c_double, u: *mut c_double_complex,
                         ldu: *mut c_int, vt: *mut c_double_complex, ldvt: *mut c_int,
                         work: *mut c_double_complex, lwork: *mut c_int, rwork: *mut c_double,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgejsv(joba: *mut c_char, jobu: *mut c_char, jobv: *mut c_char,
                         jobr: *mut c_char, jobt: *mut c_char, jobp: *mut c_char, m: *mut c_int,
                         n: *mut c_int, a: *mut c_double, lda: *mut c_int, sva: *mut c_double,
                         u: *mut c_double, ldu: *mut c_int, v: *mut c_double, ldv: *mut c_int,
                         work: *mut c_double, lwork: *mut c_int, iwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_sgejsv(joba: *mut c_char, jobu: *mut c_char, jobv: *mut c_char,
                         jobr: *mut c_char, jobt: *mut c_char, jobp: *mut c_char, m: *mut c_int,
                         n: *mut c_int, a: *mut c_float, lda: *mut c_int, sva: *mut c_float,
                         u: *mut c_float, ldu: *mut c_int, v: *mut c_float, ldv: *mut c_int,
                         work: *mut c_float, lwork: *mut c_int, iwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_cgejsv(joba: *mut c_char, jobu: *mut c_char, jobv: *mut c_char,
                         jobr: *mut c_char, jobt: *mut c_char, jobp: *mut c_char, m: *mut c_int,
                         n: *mut c_int, a: *mut c_float_complex, lda: *mut c_int,
                         sva: *mut c_float, u: *mut c_float_complex, ldu: *mut c_int,
                         v: *mut c_float_complex, ldv: *mut c_int, cwork: *mut c_float_complex,
                         lwork: *mut c_int, work: *mut c_float, lrwork: *mut c_int,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zgejsv(joba: *mut c_char, jobu: *mut c_char, jobv: *mut c_char,
                         jobr: *mut c_char, jobt: *mut c_char, jobp: *mut c_char, m: *mut c_int,
                         n: *mut c_int, a: *mut c_double_complex, lda: *mut c_int,
                         sva: *mut c_double, u: *mut c_double_complex, ldu: *mut c_int,
                         v: *mut c_double_complex, ldv: *mut c_int, cwork: *mut c_double_complex,
                         lwork: *mut c_int, work: *mut c_double, lrwork: *mut c_int,
                         iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgesvj(joba: *mut c_char, jobu: *mut c_char, jobv: *mut c_char, m: *mut c_int,
                         n: *mut c_int, a: *mut c_double, lda: *mut c_int, sva: *mut c_double,
                         mv: *mut c_int, v: *mut c_double, ldv: *mut c_int, work: *mut c_double,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sgesvj(joba: *mut c_char, jobu: *mut c_char, jobv: *mut c_char, m: *mut c_int,
                         n: *mut c_int, a: *mut c_float, lda: *mut c_int, sva: *mut c_float,
                         mv: *mut c_int, v: *mut c_float, ldv: *mut c_int, work: *mut c_float,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgesvj(joba: *mut c_char, jobu: *mut c_char, jobv: *mut c_char, m: *mut c_int,
                         n: *mut c_int, a: *mut c_float_complex, lda: *mut c_int,
                         sva: *mut c_float, mv: *mut c_int, v: *mut c_float_complex,
                         ldv: *mut c_int, cwork: *mut c_float_complex, lwork: *mut c_int,
                         rwork: *mut c_float, lrwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zgesvj(joba: *mut c_char, jobu: *mut c_char, jobv: *mut c_char, m: *mut c_int,
                         n: *mut c_int, a: *mut c_double_complex, lda: *mut c_int,
                         sva: *mut c_double, mv: *mut c_int, v: *mut c_double_complex,
                         ldv: *mut c_int, cwork: *mut c_double_complex, lwork: *mut c_int,
                         rwork: *mut c_double, lrwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sggsvd(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut c_int,
                         n: *mut c_int, p: *mut c_int, k: *mut c_int, l: *mut c_int,
                         a: *mut c_float, lda: *mut c_int, b: *mut c_float, ldb: *mut c_int,
                         alpha: *mut c_float, beta: *mut c_float, u: *mut c_float, ldu: *mut c_int,
                         v: *mut c_float, ldv: *mut c_int, q: *mut c_float, ldq: *mut c_int,
                         work: *mut c_float, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dggsvd(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut c_int,
                         n: *mut c_int, p: *mut c_int, k: *mut c_int, l: *mut c_int,
                         a: *mut c_double, lda: *mut c_int, b: *mut c_double, ldb: *mut c_int,
                         alpha: *mut c_double, beta: *mut c_double, u: *mut c_double,
                         ldu: *mut c_int, v: *mut c_double, ldv: *mut c_int, q: *mut c_double,
                         ldq: *mut c_int, work: *mut c_double, iwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_cggsvd(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut c_int,
                         n: *mut c_int, p: *mut c_int, k: *mut c_int, l: *mut c_int,
                         a: *mut c_float_complex, lda: *mut c_int, b: *mut c_float_complex,
                         ldb: *mut c_int, alpha: *mut c_float, beta: *mut c_float,
                         u: *mut c_float_complex, ldu: *mut c_int, v: *mut c_float_complex,
                         ldv: *mut c_int, q: *mut c_float_complex, ldq: *mut c_int,
                         work: *mut c_float_complex, rwork: *mut c_float, iwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_zggsvd(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut c_int,
                         n: *mut c_int, p: *mut c_int, k: *mut c_int, l: *mut c_int,
                         a: *mut c_double_complex, lda: *mut c_int, b: *mut c_double_complex,
                         ldb: *mut c_int, alpha: *mut c_double, beta: *mut c_double,
                         u: *mut c_double_complex, ldu: *mut c_int, v: *mut c_double_complex,
                         ldv: *mut c_int, q: *mut c_double_complex, ldq: *mut c_int,
                         work: *mut c_double_complex, rwork: *mut c_double, iwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_sggsvd3(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut c_int,
                          n: *mut c_int, p: *mut c_int, k: *mut c_int, l: *mut c_int,
                          a: *mut c_float, lda: *mut c_int, b: *mut c_float, ldb: *mut c_int,
                          alpha: *mut c_float, beta: *mut c_float, u: *mut c_float,
                          ldu: *mut c_int, v: *mut c_float, ldv: *mut c_int, q: *mut c_float,
                          ldq: *mut c_int, work: *mut c_float, lwork: *mut c_int,
                          iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dggsvd3(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut c_int,
                          n: *mut c_int, p: *mut c_int, k: *mut c_int, l: *mut c_int,
                          a: *mut c_double, lda: *mut c_int, b: *mut c_double, ldb: *mut c_int,
                          alpha: *mut c_double, beta: *mut c_double, u: *mut c_double,
                          ldu: *mut c_int, v: *mut c_double, ldv: *mut c_int, q: *mut c_double,
                          ldq: *mut c_int, work: *mut c_double, lwork: *mut c_int,
                          iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cggsvd3(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut c_int,
                          n: *mut c_int, p: *mut c_int, k: *mut c_int, l: *mut c_int,
                          a: *mut c_float_complex, lda: *mut c_int, b: *mut c_float_complex,
                          ldb: *mut c_int, alpha: *mut c_float, beta: *mut c_float,
                          u: *mut c_float_complex, ldu: *mut c_int, v: *mut c_float_complex,
                          ldv: *mut c_int, q: *mut c_float_complex, ldq: *mut c_int,
                          work: *mut c_float_complex, lwork: *mut c_int, rwork: *mut c_float,
                          iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zggsvd3(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut c_int,
                          n: *mut c_int, p: *mut c_int, k: *mut c_int, l: *mut c_int,
                          a: *mut c_double_complex, lda: *mut c_int, b: *mut c_double_complex,
                          ldb: *mut c_int, alpha: *mut c_double, beta: *mut c_double,
                          u: *mut c_double_complex, ldu: *mut c_int, v: *mut c_double_complex,
                          ldv: *mut c_int, q: *mut c_double_complex, ldq: *mut c_int,
                          work: *mut c_double_complex, lwork: *mut c_int, rwork: *mut c_double,
                          iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ssygv(itype: *mut c_int, jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                        a: *mut c_float, lda: *mut c_int, b: *mut c_float, ldb: *mut c_int,
                        w: *mut c_float, work: *mut c_float, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dsygv(itype: *mut c_int, jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                        a: *mut c_double, lda: *mut c_int, b: *mut c_double, ldb: *mut c_int,
                        w: *mut c_double, work: *mut c_double, lwork: *mut c_int,
                        info: *mut c_int);
    pub fn LAPACK_chegv(itype: *mut c_int, jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                        a: *mut c_float_complex, lda: *mut c_int, b: *mut c_float_complex,
                        ldb: *mut c_int, w: *mut c_float, work: *mut c_float_complex,
                        lwork: *mut c_int, rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zhegv(itype: *mut c_int, jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                        a: *mut c_double_complex, lda: *mut c_int, b: *mut c_double_complex,
                        ldb: *mut c_int, w: *mut c_double, work: *mut c_double_complex,
                        lwork: *mut c_int, rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_ssygvd(itype: *mut c_int, jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         a: *mut c_float, lda: *mut c_int, b: *mut c_float, ldb: *mut c_int,
                         w: *mut c_float, work: *mut c_float, lwork: *mut c_int, iwork: *mut c_int,
                         liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dsygvd(itype: *mut c_int, jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         a: *mut c_double, lda: *mut c_int, b: *mut c_double, ldb: *mut c_int,
                         w: *mut c_double, work: *mut c_double, lwork: *mut c_int,
                         iwork: *mut c_int, liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_chegvd(itype: *mut c_int, jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         a: *mut c_float_complex, lda: *mut c_int, b: *mut c_float_complex,
                         ldb: *mut c_int, w: *mut c_float, work: *mut c_float_complex,
                         lwork: *mut c_int, rwork: *mut c_float, lrwork: *mut c_int,
                         iwork: *mut c_int, liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zhegvd(itype: *mut c_int, jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         a: *mut c_double_complex, lda: *mut c_int, b: *mut c_double_complex,
                         ldb: *mut c_int, w: *mut c_double, work: *mut c_double_complex,
                         lwork: *mut c_int, rwork: *mut c_double, lrwork: *mut c_int,
                         iwork: *mut c_int, liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ssygvx(itype: *mut c_int, jobz: *mut c_char, range: *mut c_char,
                         uplo: *mut c_char, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         b: *mut c_float, ldb: *mut c_int, vl: *mut c_float, vu: *mut c_float,
                         il: *mut c_int, iu: *mut c_int, abstol: *mut c_float, m: *mut c_int,
                         w: *mut c_float, z: *mut c_float, ldz: *mut c_int, work: *mut c_float,
                         lwork: *mut c_int, iwork: *mut c_int, ifail: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dsygvx(itype: *mut c_int, jobz: *mut c_char, range: *mut c_char,
                         uplo: *mut c_char, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         b: *mut c_double, ldb: *mut c_int, vl: *mut c_double, vu: *mut c_double,
                         il: *mut c_int, iu: *mut c_int, abstol: *mut c_double, m: *mut c_int,
                         w: *mut c_double, z: *mut c_double, ldz: *mut c_int, work: *mut c_double,
                         lwork: *mut c_int, iwork: *mut c_int, ifail: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_chegvx(itype: *mut c_int, jobz: *mut c_char, range: *mut c_char,
                         uplo: *mut c_char, n: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, b: *mut c_float_complex, ldb: *mut c_int,
                         vl: *mut c_float, vu: *mut c_float, il: *mut c_int, iu: *mut c_int,
                         abstol: *mut c_float, m: *mut c_int, w: *mut c_float,
                         z: *mut c_float_complex, ldz: *mut c_int, work: *mut c_float_complex,
                         lwork: *mut c_int, rwork: *mut c_float, iwork: *mut c_int,
                         ifail: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zhegvx(itype: *mut c_int, jobz: *mut c_char, range: *mut c_char,
                         uplo: *mut c_char, n: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, b: *mut c_double_complex, ldb: *mut c_int,
                         vl: *mut c_double, vu: *mut c_double, il: *mut c_int, iu: *mut c_int,
                         abstol: *mut c_double, m: *mut c_int, w: *mut c_double,
                         z: *mut c_double_complex, ldz: *mut c_int, work: *mut c_double_complex,
                         lwork: *mut c_int, rwork: *mut c_double, iwork: *mut c_int,
                         ifail: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sspgv(itype: *mut c_int, jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                        ap: *mut c_float, bp: *mut c_float, w: *mut c_float, z: *mut c_float,
                        ldz: *mut c_int, work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dspgv(itype: *mut c_int, jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                        ap: *mut c_double, bp: *mut c_double, w: *mut c_double, z: *mut c_double,
                        ldz: *mut c_int, work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_chpgv(itype: *mut c_int, jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                        ap: *mut c_float_complex, bp: *mut c_float_complex, w: *mut c_float,
                        z: *mut c_float_complex, ldz: *mut c_int, work: *mut c_float_complex,
                        rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zhpgv(itype: *mut c_int, jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                        ap: *mut c_double_complex, bp: *mut c_double_complex, w: *mut c_double,
                        z: *mut c_double_complex, ldz: *mut c_int, work: *mut c_double_complex,
                        rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_sspgvd(itype: *mut c_int, jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         ap: *mut c_float, bp: *mut c_float, w: *mut c_float, z: *mut c_float,
                         ldz: *mut c_int, work: *mut c_float, lwork: *mut c_int, iwork: *mut c_int,
                         liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dspgvd(itype: *mut c_int, jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         ap: *mut c_double, bp: *mut c_double, w: *mut c_double, z: *mut c_double,
                         ldz: *mut c_int, work: *mut c_double, lwork: *mut c_int,
                         iwork: *mut c_int, liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_chpgvd(itype: *mut c_int, jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         ap: *mut c_float_complex, bp: *mut c_float_complex, w: *mut c_float,
                         z: *mut c_float_complex, ldz: *mut c_int, work: *mut c_float_complex,
                         lwork: *mut c_int, rwork: *mut c_float, lrwork: *mut c_int,
                         iwork: *mut c_int, liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zhpgvd(itype: *mut c_int, jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         ap: *mut c_double_complex, bp: *mut c_double_complex, w: *mut c_double,
                         z: *mut c_double_complex, ldz: *mut c_int, work: *mut c_double_complex,
                         lwork: *mut c_int, rwork: *mut c_double, lrwork: *mut c_int,
                         iwork: *mut c_int, liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sspgvx(itype: *mut c_int, jobz: *mut c_char, range: *mut c_char,
                         uplo: *mut c_char, n: *mut c_int, ap: *mut c_float, bp: *mut c_float,
                         vl: *mut c_float, vu: *mut c_float, il: *mut c_int, iu: *mut c_int,
                         abstol: *mut c_float, m: *mut c_int, w: *mut c_float, z: *mut c_float,
                         ldz: *mut c_int, work: *mut c_float, iwork: *mut c_int, ifail: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dspgvx(itype: *mut c_int, jobz: *mut c_char, range: *mut c_char,
                         uplo: *mut c_char, n: *mut c_int, ap: *mut c_double, bp: *mut c_double,
                         vl: *mut c_double, vu: *mut c_double, il: *mut c_int, iu: *mut c_int,
                         abstol: *mut c_double, m: *mut c_int, w: *mut c_double, z: *mut c_double,
                         ldz: *mut c_int, work: *mut c_double, iwork: *mut c_int,
                         ifail: *mut c_int, info: *mut c_int);
    pub fn LAPACK_chpgvx(itype: *mut c_int, jobz: *mut c_char, range: *mut c_char,
                         uplo: *mut c_char, n: *mut c_int, ap: *mut c_float_complex,
                         bp: *mut c_float_complex, vl: *mut c_float, vu: *mut c_float,
                         il: *mut c_int, iu: *mut c_int, abstol: *mut c_float, m: *mut c_int,
                         w: *mut c_float, z: *mut c_float_complex, ldz: *mut c_int,
                         work: *mut c_float_complex, rwork: *mut c_float, iwork: *mut c_int,
                         ifail: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zhpgvx(itype: *mut c_int, jobz: *mut c_char, range: *mut c_char,
                         uplo: *mut c_char, n: *mut c_int, ap: *mut c_double_complex,
                         bp: *mut c_double_complex, vl: *mut c_double, vu: *mut c_double,
                         il: *mut c_int, iu: *mut c_int, abstol: *mut c_double, m: *mut c_int,
                         w: *mut c_double, z: *mut c_double_complex, ldz: *mut c_int,
                         work: *mut c_double_complex, rwork: *mut c_double, iwork: *mut c_int,
                         ifail: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ssbgv(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int, ka: *mut c_int,
                        kb: *mut c_int, ab: *mut c_float, ldab: *mut c_int, bb: *mut c_float,
                        ldbb: *mut c_int, w: *mut c_float, z: *mut c_float, ldz: *mut c_int,
                        work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dsbgv(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int, ka: *mut c_int,
                        kb: *mut c_int, ab: *mut c_double, ldab: *mut c_int, bb: *mut c_double,
                        ldbb: *mut c_int, w: *mut c_double, z: *mut c_double, ldz: *mut c_int,
                        work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_chbgv(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int, ka: *mut c_int,
                        kb: *mut c_int, ab: *mut c_float_complex, ldab: *mut c_int,
                        bb: *mut c_float_complex, ldbb: *mut c_int, w: *mut c_float,
                        z: *mut c_float_complex, ldz: *mut c_int, work: *mut c_float_complex,
                        rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zhbgv(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int, ka: *mut c_int,
                        kb: *mut c_int, ab: *mut c_double_complex, ldab: *mut c_int,
                        bb: *mut c_double_complex, ldbb: *mut c_int, w: *mut c_double,
                        z: *mut c_double_complex, ldz: *mut c_int, work: *mut c_double_complex,
                        rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_ssbgvd(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int, ka: *mut c_int,
                         kb: *mut c_int, ab: *mut c_float, ldab: *mut c_int, bb: *mut c_float,
                         ldbb: *mut c_int, w: *mut c_float, z: *mut c_float, ldz: *mut c_int,
                         work: *mut c_float, lwork: *mut c_int, iwork: *mut c_int,
                         liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dsbgvd(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int, ka: *mut c_int,
                         kb: *mut c_int, ab: *mut c_double, ldab: *mut c_int, bb: *mut c_double,
                         ldbb: *mut c_int, w: *mut c_double, z: *mut c_double, ldz: *mut c_int,
                         work: *mut c_double, lwork: *mut c_int, iwork: *mut c_int,
                         liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_chbgvd(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int, ka: *mut c_int,
                         kb: *mut c_int, ab: *mut c_float_complex, ldab: *mut c_int,
                         bb: *mut c_float_complex, ldbb: *mut c_int, w: *mut c_float,
                         z: *mut c_float_complex, ldz: *mut c_int, work: *mut c_float_complex,
                         lwork: *mut c_int, rwork: *mut c_float, lrwork: *mut c_int,
                         iwork: *mut c_int, liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zhbgvd(jobz: *mut c_char, uplo: *mut c_char, n: *mut c_int, ka: *mut c_int,
                         kb: *mut c_int, ab: *mut c_double_complex, ldab: *mut c_int,
                         bb: *mut c_double_complex, ldbb: *mut c_int, w: *mut c_double,
                         z: *mut c_double_complex, ldz: *mut c_int, work: *mut c_double_complex,
                         lwork: *mut c_int, rwork: *mut c_double, lrwork: *mut c_int,
                         iwork: *mut c_int, liwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ssbgvx(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         ka: *mut c_int, kb: *mut c_int, ab: *mut c_float, ldab: *mut c_int,
                         bb: *mut c_float, ldbb: *mut c_int, q: *mut c_float, ldq: *mut c_int,
                         vl: *mut c_float, vu: *mut c_float, il: *mut c_int, iu: *mut c_int,
                         abstol: *mut c_float, m: *mut c_int, w: *mut c_float, z: *mut c_float,
                         ldz: *mut c_int, work: *mut c_float, iwork: *mut c_int, ifail: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dsbgvx(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         ka: *mut c_int, kb: *mut c_int, ab: *mut c_double, ldab: *mut c_int,
                         bb: *mut c_double, ldbb: *mut c_int, q: *mut c_double, ldq: *mut c_int,
                         vl: *mut c_double, vu: *mut c_double, il: *mut c_int, iu: *mut c_int,
                         abstol: *mut c_double, m: *mut c_int, w: *mut c_double, z: *mut c_double,
                         ldz: *mut c_int, work: *mut c_double, iwork: *mut c_int,
                         ifail: *mut c_int, info: *mut c_int);
    pub fn LAPACK_chbgvx(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         ka: *mut c_int, kb: *mut c_int, ab: *mut c_float_complex,
                         ldab: *mut c_int, bb: *mut c_float_complex, ldbb: *mut c_int,
                         q: *mut c_float_complex, ldq: *mut c_int, vl: *mut c_float,
                         vu: *mut c_float, il: *mut c_int, iu: *mut c_int, abstol: *mut c_float,
                         m: *mut c_int, w: *mut c_float, z: *mut c_float_complex, ldz: *mut c_int,
                         work: *mut c_float_complex, rwork: *mut c_float, iwork: *mut c_int,
                         ifail: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zhbgvx(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         ka: *mut c_int, kb: *mut c_int, ab: *mut c_double_complex,
                         ldab: *mut c_int, bb: *mut c_double_complex, ldbb: *mut c_int,
                         q: *mut c_double_complex, ldq: *mut c_int, vl: *mut c_double,
                         vu: *mut c_double, il: *mut c_int, iu: *mut c_int, abstol: *mut c_double,
                         m: *mut c_int, w: *mut c_double, z: *mut c_double_complex,
                         ldz: *mut c_int, work: *mut c_double_complex, rwork: *mut c_double,
                         iwork: *mut c_int, ifail: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sgges(jobvsl: *mut c_char, jobvsr: *mut c_char, sort: *mut c_char,
                        selctg: LAPACK_S_SELECT3, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                        b: *mut c_float, ldb: *mut c_int, sdim: *mut c_int, alphar: *mut c_float,
                        alphai: *mut c_float, beta: *mut c_float, vsl: *mut c_float,
                        ldvsl: *mut c_int, vsr: *mut c_float, ldvsr: *mut c_int,
                        work: *mut c_float, lwork: *mut c_int, bwork: *mut c_int,
                        info: *mut c_int);
    pub fn LAPACK_dgges(jobvsl: *mut c_char, jobvsr: *mut c_char, sort: *mut c_char,
                        selctg: LAPACK_D_SELECT3, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                        b: *mut c_double, ldb: *mut c_int, sdim: *mut c_int, alphar: *mut c_double,
                        alphai: *mut c_double, beta: *mut c_double, vsl: *mut c_double,
                        ldvsl: *mut c_int, vsr: *mut c_double, ldvsr: *mut c_int,
                        work: *mut c_double, lwork: *mut c_int, bwork: *mut c_int,
                        info: *mut c_int);
    pub fn LAPACK_cgges(jobvsl: *mut c_char, jobvsr: *mut c_char, sort: *mut c_char,
                        selctg: LAPACK_C_SELECT2, n: *mut c_int, a: *mut c_float_complex,
                        lda: *mut c_int, b: *mut c_float_complex, ldb: *mut c_int,
                        sdim: *mut c_int, alpha: *mut c_float_complex, beta: *mut c_float_complex,
                        vsl: *mut c_float_complex, ldvsl: *mut c_int, vsr: *mut c_float_complex,
                        ldvsr: *mut c_int, work: *mut c_float_complex, lwork: *mut c_int,
                        rwork: *mut c_float, bwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zgges(jobvsl: *mut c_char, jobvsr: *mut c_char, sort: *mut c_char,
                        selctg: LAPACK_Z_SELECT2, n: *mut c_int, a: *mut c_double_complex,
                        lda: *mut c_int, b: *mut c_double_complex, ldb: *mut c_int,
                        sdim: *mut c_int, alpha: *mut c_double_complex,
                        beta: *mut c_double_complex, vsl: *mut c_double_complex, ldvsl: *mut c_int,
                        vsr: *mut c_double_complex, ldvsr: *mut c_int, work: *mut c_double_complex,
                        lwork: *mut c_int, rwork: *mut c_double, bwork: *mut c_int,
                        info: *mut c_int);
    pub fn LAPACK_sgges3(jobvsl: *mut c_char, jobvsr: *mut c_char, sort: *mut c_char,
                         selctg: LAPACK_S_SELECT3, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         b: *mut c_float, ldb: *mut c_int, sdim: *mut c_int, alphar: *mut c_float,
                         alphai: *mut c_float, beta: *mut c_float, vsl: *mut c_float,
                         ldvsl: *mut c_int, vsr: *mut c_float, ldvsr: *mut c_int,
                         work: *mut c_float, lwork: *mut c_int, bwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dgges3(jobvsl: *mut c_char, jobvsr: *mut c_char, sort: *mut c_char,
                         selctg: LAPACK_D_SELECT3, n: *mut c_int, a: *mut c_double,
                         lda: *mut c_int, b: *mut c_double, ldb: *mut c_int, sdim: *mut c_int,
                         alphar: *mut c_double, alphai: *mut c_double, beta: *mut c_double,
                         vsl: *mut c_double, ldvsl: *mut c_int, vsr: *mut c_double,
                         ldvsr: *mut c_int, work: *mut c_double, lwork: *mut c_int,
                         bwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgges3(jobvsl: *mut c_char, jobvsr: *mut c_char, sort: *mut c_char,
                         selctg: LAPACK_C_SELECT2, n: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, b: *mut c_float_complex, ldb: *mut c_int,
                         sdim: *mut c_int, alpha: *mut c_float_complex, beta: *mut c_float_complex,
                         vsl: *mut c_float_complex, ldvsl: *mut c_int, vsr: *mut c_float_complex,
                         ldvsr: *mut c_int, work: *mut c_float_complex, lwork: *mut c_int,
                         rwork: *mut c_float, bwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zgges3(jobvsl: *mut c_char, jobvsr: *mut c_char, sort: *mut c_char,
                         selctg: LAPACK_Z_SELECT2, n: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, b: *mut c_double_complex, ldb: *mut c_int,
                         sdim: *mut c_int, alpha: *mut c_double_complex,
                         beta: *mut c_double_complex, vsl: *mut c_double_complex,
                         ldvsl: *mut c_int, vsr: *mut c_double_complex, ldvsr: *mut c_int,
                         work: *mut c_double_complex, lwork: *mut c_int, rwork: *mut c_double,
                         bwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sggesx(jobvsl: *mut c_char, jobvsr: *mut c_char, sort: *mut c_char,
                         selctg: LAPACK_S_SELECT3, sense: *mut c_char, n: *mut c_int,
                         a: *mut c_float, lda: *mut c_int, b: *mut c_float, ldb: *mut c_int,
                         sdim: *mut c_int, alphar: *mut c_float, alphai: *mut c_float,
                         beta: *mut c_float, vsl: *mut c_float, ldvsl: *mut c_int,
                         vsr: *mut c_float, ldvsr: *mut c_int, rconde: *mut c_float,
                         rcondv: *mut c_float, work: *mut c_float, lwork: *mut c_int,
                         iwork: *mut c_int, liwork: *mut c_int, bwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dggesx(jobvsl: *mut c_char, jobvsr: *mut c_char, sort: *mut c_char,
                         selctg: LAPACK_D_SELECT3, sense: *mut c_char, n: *mut c_int,
                         a: *mut c_double, lda: *mut c_int, b: *mut c_double, ldb: *mut c_int,
                         sdim: *mut c_int, alphar: *mut c_double, alphai: *mut c_double,
                         beta: *mut c_double, vsl: *mut c_double, ldvsl: *mut c_int,
                         vsr: *mut c_double, ldvsr: *mut c_int, rconde: *mut c_double,
                         rcondv: *mut c_double, work: *mut c_double, lwork: *mut c_int,
                         iwork: *mut c_int, liwork: *mut c_int, bwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_cggesx(jobvsl: *mut c_char, jobvsr: *mut c_char, sort: *mut c_char,
                         selctg: LAPACK_C_SELECT2, sense: *mut c_char, n: *mut c_int,
                         a: *mut c_float_complex, lda: *mut c_int, b: *mut c_float_complex,
                         ldb: *mut c_int, sdim: *mut c_int, alpha: *mut c_float_complex,
                         beta: *mut c_float_complex, vsl: *mut c_float_complex, ldvsl: *mut c_int,
                         vsr: *mut c_float_complex, ldvsr: *mut c_int, rconde: *mut c_float,
                         rcondv: *mut c_float, work: *mut c_float_complex, lwork: *mut c_int,
                         rwork: *mut c_float, iwork: *mut c_int, liwork: *mut c_int,
                         bwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zggesx(jobvsl: *mut c_char, jobvsr: *mut c_char, sort: *mut c_char,
                         selctg: LAPACK_Z_SELECT2, sense: *mut c_char, n: *mut c_int,
                         a: *mut c_double_complex, lda: *mut c_int, b: *mut c_double_complex,
                         ldb: *mut c_int, sdim: *mut c_int, alpha: *mut c_double_complex,
                         beta: *mut c_double_complex, vsl: *mut c_double_complex,
                         ldvsl: *mut c_int, vsr: *mut c_double_complex, ldvsr: *mut c_int,
                         rconde: *mut c_double, rcondv: *mut c_double, work: *mut c_double_complex,
                         lwork: *mut c_int, rwork: *mut c_double, iwork: *mut c_int,
                         liwork: *mut c_int, bwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sggev(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut c_int, a: *mut c_float,
                        lda: *mut c_int, b: *mut c_float, ldb: *mut c_int, alphar: *mut c_float,
                        alphai: *mut c_float, beta: *mut c_float, vl: *mut c_float,
                        ldvl: *mut c_int, vr: *mut c_float, ldvr: *mut c_int, work: *mut c_float,
                        lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dggev(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut c_int, a: *mut c_double,
                        lda: *mut c_int, b: *mut c_double, ldb: *mut c_int, alphar: *mut c_double,
                        alphai: *mut c_double, beta: *mut c_double, vl: *mut c_double,
                        ldvl: *mut c_int, vr: *mut c_double, ldvr: *mut c_int, work: *mut c_double,
                        lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cggev(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut c_int,
                        a: *mut c_float_complex, lda: *mut c_int, b: *mut c_float_complex,
                        ldb: *mut c_int, alpha: *mut c_float_complex, beta: *mut c_float_complex,
                        vl: *mut c_float_complex, ldvl: *mut c_int, vr: *mut c_float_complex,
                        ldvr: *mut c_int, work: *mut c_float_complex, lwork: *mut c_int,
                        rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zggev(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut c_int,
                        a: *mut c_double_complex, lda: *mut c_int, b: *mut c_double_complex,
                        ldb: *mut c_int, alpha: *mut c_double_complex, beta: *mut c_double_complex,
                        vl: *mut c_double_complex, ldvl: *mut c_int, vr: *mut c_double_complex,
                        ldvr: *mut c_int, work: *mut c_double_complex, lwork: *mut c_int,
                        rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_sggev3(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut c_int, a: *mut c_float,
                         lda: *mut c_int, b: *mut c_float, ldb: *mut c_int, alphar: *mut c_float,
                         alphai: *mut c_float, beta: *mut c_float, vl: *mut c_float,
                         ldvl: *mut c_int, vr: *mut c_float, ldvr: *mut c_int, work: *mut c_float,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dggev3(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut c_int, a: *mut c_double,
                         lda: *mut c_int, b: *mut c_double, ldb: *mut c_int, alphar: *mut c_double,
                         alphai: *mut c_double, beta: *mut c_double, vl: *mut c_double,
                         ldvl: *mut c_int, vr: *mut c_double, ldvr: *mut c_int,
                         work: *mut c_double, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cggev3(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut c_int,
                         a: *mut c_float_complex, lda: *mut c_int, b: *mut c_float_complex,
                         ldb: *mut c_int, alpha: *mut c_float_complex, beta: *mut c_float_complex,
                         vl: *mut c_float_complex, ldvl: *mut c_int, vr: *mut c_float_complex,
                         ldvr: *mut c_int, work: *mut c_float_complex, lwork: *mut c_int,
                         rwork: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zggev3(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut c_int,
                         a: *mut c_double_complex, lda: *mut c_int, b: *mut c_double_complex,
                         ldb: *mut c_int, alpha: *mut c_double_complex,
                         beta: *mut c_double_complex, vl: *mut c_double_complex, ldvl: *mut c_int,
                         vr: *mut c_double_complex, ldvr: *mut c_int, work: *mut c_double_complex,
                         lwork: *mut c_int, rwork: *mut c_double, info: *mut c_int);
    pub fn LAPACK_sggevx(balanc: *mut c_char, jobvl: *mut c_char, jobvr: *mut c_char,
                         sense: *mut c_char, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         b: *mut c_float, ldb: *mut c_int, alphar: *mut c_float,
                         alphai: *mut c_float, beta: *mut c_float, vl: *mut c_float,
                         ldvl: *mut c_int, vr: *mut c_float, ldvr: *mut c_int, ilo: *mut c_int,
                         ihi: *mut c_int, lscale: *mut c_float, rscale: *mut c_float,
                         abnrm: *mut c_float, bbnrm: *mut c_float, rconde: *mut c_float,
                         rcondv: *mut c_float, work: *mut c_float, lwork: *mut c_int,
                         iwork: *mut c_int, bwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dggevx(balanc: *mut c_char, jobvl: *mut c_char, jobvr: *mut c_char,
                         sense: *mut c_char, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         b: *mut c_double, ldb: *mut c_int, alphar: *mut c_double,
                         alphai: *mut c_double, beta: *mut c_double, vl: *mut c_double,
                         ldvl: *mut c_int, vr: *mut c_double, ldvr: *mut c_int, ilo: *mut c_int,
                         ihi: *mut c_int, lscale: *mut c_double, rscale: *mut c_double,
                         abnrm: *mut c_double, bbnrm: *mut c_double, rconde: *mut c_double,
                         rcondv: *mut c_double, work: *mut c_double, lwork: *mut c_int,
                         iwork: *mut c_int, bwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cggevx(balanc: *mut c_char, jobvl: *mut c_char, jobvr: *mut c_char,
                         sense: *mut c_char, n: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, b: *mut c_float_complex, ldb: *mut c_int,
                         alpha: *mut c_float_complex, beta: *mut c_float_complex,
                         vl: *mut c_float_complex, ldvl: *mut c_int, vr: *mut c_float_complex,
                         ldvr: *mut c_int, ilo: *mut c_int, ihi: *mut c_int, lscale: *mut c_float,
                         rscale: *mut c_float, abnrm: *mut c_float, bbnrm: *mut c_float,
                         rconde: *mut c_float, rcondv: *mut c_float, work: *mut c_float_complex,
                         lwork: *mut c_int, rwork: *mut c_float, iwork: *mut c_int,
                         bwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zggevx(balanc: *mut c_char, jobvl: *mut c_char, jobvr: *mut c_char,
                         sense: *mut c_char, n: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, b: *mut c_double_complex, ldb: *mut c_int,
                         alpha: *mut c_double_complex, beta: *mut c_double_complex,
                         vl: *mut c_double_complex, ldvl: *mut c_int, vr: *mut c_double_complex,
                         ldvr: *mut c_int, ilo: *mut c_int, ihi: *mut c_int, lscale: *mut c_double,
                         rscale: *mut c_double, abnrm: *mut c_double, bbnrm: *mut c_double,
                         rconde: *mut c_double, rcondv: *mut c_double, work: *mut c_double_complex,
                         lwork: *mut c_int, rwork: *mut c_double, iwork: *mut c_int,
                         bwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dsfrk(transr: *mut c_char, uplo: *mut c_char, trans: *mut c_char, n: *mut c_int,
                        k: *mut c_int, alpha: *mut c_double, a: *const c_double, lda: *mut c_int,
                        beta: *mut c_double, c: *mut c_double);
    pub fn LAPACK_ssfrk(transr: *mut c_char, uplo: *mut c_char, trans: *mut c_char, n: *mut c_int,
                        k: *mut c_int, alpha: *mut c_float, a: *const c_float, lda: *mut c_int,
                        beta: *mut c_float, c: *mut c_float);
    pub fn LAPACK_zhfrk(transr: *mut c_char, uplo: *mut c_char, trans: *mut c_char, n: *mut c_int,
                        k: *mut c_int, alpha: *mut c_double, a: *const c_double_complex,
                        lda: *mut c_int, beta: *mut c_double, c: *mut c_double_complex);
    pub fn LAPACK_chfrk(transr: *mut c_char, uplo: *mut c_char, trans: *mut c_char, n: *mut c_int,
                        k: *mut c_int, alpha: *mut c_float, a: *const c_float_complex,
                        lda: *mut c_int, beta: *mut c_float, c: *mut c_float_complex);
    pub fn LAPACK_dtfsm(transr: *mut c_char, side: *mut c_char, uplo: *mut c_char,
                        trans: *mut c_char, diag: *mut c_char, m: *mut c_int, n: *mut c_int,
                        alpha: *mut c_double, a: *const c_double, b: *mut c_double,
                        ldb: *mut c_int);
    pub fn LAPACK_stfsm(transr: *mut c_char, side: *mut c_char, uplo: *mut c_char,
                        trans: *mut c_char, diag: *mut c_char, m: *mut c_int, n: *mut c_int,
                        alpha: *mut c_float, a: *const c_float, b: *mut c_float, ldb: *mut c_int);
    pub fn LAPACK_ztfsm(transr: *mut c_char, side: *mut c_char, uplo: *mut c_char,
                        trans: *mut c_char, diag: *mut c_char, m: *mut c_int, n: *mut c_int,
                        alpha: *mut c_double_complex, a: *const c_double_complex,
                        b: *mut c_double_complex, ldb: *mut c_int);
    pub fn LAPACK_ctfsm(transr: *mut c_char, side: *mut c_char, uplo: *mut c_char,
                        trans: *mut c_char, diag: *mut c_char, m: *mut c_int, n: *mut c_int,
                        alpha: *mut c_float_complex, a: *const c_float_complex,
                        b: *mut c_float_complex, ldb: *mut c_int);
    pub fn LAPACK_dtfttp(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         arf: *const c_double, ap: *mut c_double, info: *mut c_int);
    pub fn LAPACK_stfttp(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         arf: *const c_float, ap: *mut c_float, info: *mut c_int);
    pub fn LAPACK_ztfttp(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         arf: *const c_double_complex, ap: *mut c_double_complex,
                         info: *mut c_int);
    pub fn LAPACK_ctfttp(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         arf: *const c_float_complex, ap: *mut c_float_complex, info: *mut c_int);
    pub fn LAPACK_dtfttr(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         arf: *const c_double, a: *mut c_double, lda: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_stfttr(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         arf: *const c_float, a: *mut c_float, lda: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ztfttr(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         arf: *const c_double_complex, a: *mut c_double_complex, lda: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_ctfttr(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         arf: *const c_float_complex, a: *mut c_float_complex, lda: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dtpttf(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         ap: *const c_double, arf: *mut c_double, info: *mut c_int);
    pub fn LAPACK_stpttf(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int, ap: *const c_float,
                         arf: *mut c_float, info: *mut c_int);
    pub fn LAPACK_ztpttf(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         ap: *const c_double_complex, arf: *mut c_double_complex,
                         info: *mut c_int);
    pub fn LAPACK_ctpttf(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         ap: *const c_float_complex, arf: *mut c_float_complex, info: *mut c_int);
    pub fn LAPACK_dtpttr(uplo: *mut c_char, n: *mut c_int, ap: *const c_double, a: *mut c_double,
                         lda: *mut c_int, info: *mut c_int);
    pub fn LAPACK_stpttr(uplo: *mut c_char, n: *mut c_int, ap: *const c_float, a: *mut c_float,
                         lda: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ztpttr(uplo: *mut c_char, n: *mut c_int, ap: *const c_double_complex,
                         a: *mut c_double_complex, lda: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ctpttr(uplo: *mut c_char, n: *mut c_int, ap: *const c_float_complex,
                         a: *mut c_float_complex, lda: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dtrttf(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int, a: *const c_double,
                         lda: *mut c_int, arf: *mut c_double, info: *mut c_int);
    pub fn LAPACK_strttf(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int, a: *const c_float,
                         lda: *mut c_int, arf: *mut c_float, info: *mut c_int);
    pub fn LAPACK_ztrttf(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         a: *const c_double_complex, lda: *mut c_int, arf: *mut c_double_complex,
                         info: *mut c_int);
    pub fn LAPACK_ctrttf(transr: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         a: *const c_float_complex, lda: *mut c_int, arf: *mut c_float_complex,
                         info: *mut c_int);
    pub fn LAPACK_dtrttp(uplo: *mut c_char, n: *mut c_int, a: *const c_double, lda: *mut c_int,
                         ap: *mut c_double, info: *mut c_int);
    pub fn LAPACK_strttp(uplo: *mut c_char, n: *mut c_int, a: *const c_float, lda: *mut c_int,
                         ap: *mut c_float, info: *mut c_int);
    pub fn LAPACK_ztrttp(uplo: *mut c_char, n: *mut c_int, a: *const c_double_complex,
                         lda: *mut c_int, ap: *mut c_double_complex, info: *mut c_int);
    pub fn LAPACK_ctrttp(uplo: *mut c_char, n: *mut c_int, a: *const c_float_complex,
                         lda: *mut c_int, ap: *mut c_float_complex, info: *mut c_int);
    pub fn LAPACK_sgeqrfp(m: *mut c_int, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                          tau: *mut c_float, work: *mut c_float, lwork: *mut c_int,
                          info: *mut c_int);
    pub fn LAPACK_dgeqrfp(m: *mut c_int, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                          tau: *mut c_double, work: *mut c_double, lwork: *mut c_int,
                          info: *mut c_int);
    pub fn LAPACK_cgeqrfp(m: *mut c_int, n: *mut c_int, a: *mut c_float_complex, lda: *mut c_int,
                          tau: *mut c_float_complex, work: *mut c_float_complex, lwork: *mut c_int,
                          info: *mut c_int);
    pub fn LAPACK_zgeqrfp(m: *mut c_int, n: *mut c_int, a: *mut c_double_complex, lda: *mut c_int,
                          tau: *mut c_double_complex, work: *mut c_double_complex,
                          lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_clacgv(n: *mut c_int, x: *mut c_float_complex, incx: *mut c_int);
    pub fn LAPACK_zlacgv(n: *mut c_int, x: *mut c_double_complex, incx: *mut c_int);
    pub fn LAPACK_slarnv(idist: *mut c_int, iseed: *mut c_int, n: *mut c_int, x: *mut c_float);
    pub fn LAPACK_dlarnv(idist: *mut c_int, iseed: *mut c_int, n: *mut c_int, x: *mut c_double);
    pub fn LAPACK_clarnv(idist: *mut c_int, iseed: *mut c_int, n: *mut c_int,
                         x: *mut c_float_complex);
    pub fn LAPACK_zlarnv(idist: *mut c_int, iseed: *mut c_int, n: *mut c_int,
                         x: *mut c_double_complex);
    pub fn LAPACK_sgeqr2(m: *mut c_int, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         tau: *mut c_float, work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dgeqr2(m: *mut c_int, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         tau: *mut c_double, work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_cgeqr2(m: *mut c_int, n: *mut c_int, a: *mut c_float_complex, lda: *mut c_int,
                         tau: *mut c_float_complex, work: *mut c_float_complex, info: *mut c_int);
    pub fn LAPACK_zgeqr2(m: *mut c_int, n: *mut c_int, a: *mut c_double_complex, lda: *mut c_int,
                         tau: *mut c_double_complex, work: *mut c_double_complex,
                         info: *mut c_int);
    pub fn LAPACK_slacn2(n: *mut c_int, v: *mut c_float, x: *mut c_float, isgn: *mut c_int,
                         est: *mut c_float, kase: *mut c_int, isave: *mut c_int);
    pub fn LAPACK_dlacn2(n: *mut c_int, v: *mut c_double, x: *mut c_double, isgn: *mut c_int,
                         est: *mut c_double, kase: *mut c_int, isave: *mut c_int);
    pub fn LAPACK_clacn2(n: *mut c_int, v: *mut c_float_complex, x: *mut c_float_complex,
                         est: *mut c_float, kase: *mut c_int, isave: *mut c_int);
    pub fn LAPACK_zlacn2(n: *mut c_int, v: *mut c_double_complex, x: *mut c_double_complex,
                         est: *mut c_double, kase: *mut c_int, isave: *mut c_int);
    pub fn LAPACK_slacpy(uplo: *mut c_char, m: *mut c_int, n: *mut c_int, a: *const c_float,
                         lda: *mut c_int, b: *mut c_float, ldb: *mut c_int);
    pub fn LAPACK_dlacpy(uplo: *mut c_char, m: *mut c_int, n: *mut c_int, a: *const c_double,
                         lda: *mut c_int, b: *mut c_double, ldb: *mut c_int);
    pub fn LAPACK_clacpy(uplo: *mut c_char, m: *mut c_int, n: *mut c_int,
                         a: *const c_float_complex, lda: *mut c_int, b: *mut c_float_complex,
                         ldb: *mut c_int);
    pub fn LAPACK_zlacpy(uplo: *mut c_char, m: *mut c_int, n: *mut c_int,
                         a: *const c_double_complex, lda: *mut c_int, b: *mut c_double_complex,
                         ldb: *mut c_int);

    pub fn LAPACK_clacp2(uplo: *mut c_char, m: *mut c_int, n: *mut c_int, a: *const c_float,
                         lda: *mut c_int, b: *mut c_float_complex, ldb: *mut c_int);
    pub fn LAPACK_zlacp2(uplo: *mut c_char, m: *mut c_int, n: *mut c_int, a: *const c_double,
                         lda: *mut c_int, b: *mut c_double_complex, ldb: *mut c_int);

    pub fn LAPACK_sgetf2(m: *mut c_int, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         ipiv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgetf2(m: *mut c_int, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         ipiv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgetf2(m: *mut c_int, n: *mut c_int, a: *mut c_float_complex, lda: *mut c_int,
                         ipiv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zgetf2(m: *mut c_int, n: *mut c_int, a: *mut c_double_complex, lda: *mut c_int,
                         ipiv: *mut c_int, info: *mut c_int);
    pub fn LAPACK_slaswp(n: *mut c_int, a: *mut c_float, lda: *mut c_int, k1: *mut c_int,
                         k2: *mut c_int, ipiv: *const c_int, incx: *mut c_int);
    pub fn LAPACK_dlaswp(n: *mut c_int, a: *mut c_double, lda: *mut c_int, k1: *mut c_int,
                         k2: *mut c_int, ipiv: *const c_int, incx: *mut c_int);
    pub fn LAPACK_claswp(n: *mut c_int, a: *mut c_float_complex, lda: *mut c_int, k1: *mut c_int,
                         k2: *mut c_int, ipiv: *const c_int, incx: *mut c_int);
    pub fn LAPACK_zlaswp(n: *mut c_int, a: *mut c_double_complex, lda: *mut c_int, k1: *mut c_int,
                         k2: *mut c_int, ipiv: *const c_int, incx: *mut c_int);
    pub fn LAPACK_slange(norm: *mut c_char, m: *mut c_int, n: *mut c_int, a: *const c_float,
                         lda: *mut c_int, work: *mut c_float)
                         -> c_float;
    pub fn LAPACK_dlange(norm: *mut c_char, m: *mut c_int, n: *mut c_int, a: *const c_double,
                         lda: *mut c_int, work: *mut c_double)
                         -> c_double;
    pub fn LAPACK_clange(norm: *mut c_char, m: *mut c_int, n: *mut c_int,
                         a: *const c_float_complex, lda: *mut c_int, work: *mut c_float)
                         -> c_float;
    pub fn LAPACK_zlange(norm: *mut c_char, m: *mut c_int, n: *mut c_int,
                         a: *const c_double_complex, lda: *mut c_int, work: *mut c_double)
                         -> c_double;
    pub fn LAPACK_clanhe(norm: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         a: *const c_float_complex, lda: *mut c_int, work: *mut c_float)
                         -> c_float;
    pub fn LAPACK_zlanhe(norm: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         a: *const c_double_complex, lda: *mut c_int, work: *mut c_double)
                         -> c_double;
    pub fn LAPACK_slansy(norm: *mut c_char, uplo: *mut c_char, n: *mut c_int, a: *const c_float,
                         lda: *mut c_int, work: *mut c_float)
                         -> c_float;
    pub fn LAPACK_dlansy(norm: *mut c_char, uplo: *mut c_char, n: *mut c_int, a: *const c_double,
                         lda: *mut c_int, work: *mut c_double)
                         -> c_double;
    pub fn LAPACK_clansy(norm: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         a: *const c_float_complex, lda: *mut c_int, work: *mut c_float)
                         -> c_float;
    pub fn LAPACK_zlansy(norm: *mut c_char, uplo: *mut c_char, n: *mut c_int,
                         a: *const c_double_complex, lda: *mut c_int, work: *mut c_double)
                         -> c_double;
    pub fn LAPACK_slantr(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, m: *mut c_int,
                         n: *mut c_int, a: *const c_float, lda: *mut c_int, work: *mut c_float)
                         -> c_float;
    pub fn LAPACK_dlantr(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, m: *mut c_int,
                         n: *mut c_int, a: *const c_double, lda: *mut c_int, work: *mut c_double)
                         -> c_double;
    pub fn LAPACK_clantr(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, m: *mut c_int,
                         n: *mut c_int, a: *const c_float_complex, lda: *mut c_int,
                         work: *mut c_float)
                         -> c_float;
    pub fn LAPACK_zlantr(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, m: *mut c_int,
                         n: *mut c_int, a: *const c_double_complex, lda: *mut c_int,
                         work: *mut c_double)
                         -> c_double;
    pub fn LAPACK_slamch(cmach: *mut c_char) -> c_float;
    pub fn LAPACK_dlamch(cmach: *mut c_char) -> c_double;
    pub fn LAPACK_sgelq2(m: *mut c_int, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         tau: *mut c_float, work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dgelq2(m: *mut c_int, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         tau: *mut c_double, work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_cgelq2(m: *mut c_int, n: *mut c_int, a: *mut c_float_complex, lda: *mut c_int,
                         tau: *mut c_float_complex, work: *mut c_float_complex, info: *mut c_int);
    pub fn LAPACK_zgelq2(m: *mut c_int, n: *mut c_int, a: *mut c_double_complex, lda: *mut c_int,
                         tau: *mut c_double_complex, work: *mut c_double_complex,
                         info: *mut c_int);
    pub fn LAPACK_slarfb(side: *mut c_char, trans: *mut c_char, direct: *mut c_char,
                         storev: *mut c_char, m: *mut c_int, n: *mut c_int, k: *mut c_int,
                         v: *const c_float, ldv: *mut c_int, t: *const c_float, ldt: *mut c_int,
                         c: *mut c_float, ldc: *mut c_int, work: *mut c_float, ldwork: *mut c_int);
    pub fn LAPACK_dlarfb(side: *mut c_char, trans: *mut c_char, direct: *mut c_char,
                         storev: *mut c_char, m: *mut c_int, n: *mut c_int, k: *mut c_int,
                         v: *const c_double, ldv: *mut c_int, t: *const c_double, ldt: *mut c_int,
                         c: *mut c_double, ldc: *mut c_int, work: *mut c_double,
                         ldwork: *mut c_int);
    pub fn LAPACK_clarfb(side: *mut c_char, trans: *mut c_char, direct: *mut c_char,
                         storev: *mut c_char, m: *mut c_int, n: *mut c_int, k: *mut c_int,
                         v: *const c_float_complex, ldv: *mut c_int, t: *const c_float_complex,
                         ldt: *mut c_int, c: *mut c_float_complex, ldc: *mut c_int,
                         work: *mut c_float_complex, ldwork: *mut c_int);
    pub fn LAPACK_zlarfb(side: *mut c_char, trans: *mut c_char, direct: *mut c_char,
                         storev: *mut c_char, m: *mut c_int, n: *mut c_int, k: *mut c_int,
                         v: *const c_double_complex, ldv: *mut c_int, t: *const c_double_complex,
                         ldt: *mut c_int, c: *mut c_double_complex, ldc: *mut c_int,
                         work: *mut c_double_complex, ldwork: *mut c_int);
    pub fn LAPACK_slarfg(n: *mut c_int, alpha: *mut c_float, x: *mut c_float, incx: *mut c_int,
                         tau: *mut c_float);
    pub fn LAPACK_dlarfg(n: *mut c_int, alpha: *mut c_double, x: *mut c_double, incx: *mut c_int,
                         tau: *mut c_double);
    pub fn LAPACK_clarfg(n: *mut c_int, alpha: *mut c_float_complex, x: *mut c_float_complex,
                         incx: *mut c_int, tau: *mut c_float_complex);
    pub fn LAPACK_zlarfg(n: *mut c_int, alpha: *mut c_double_complex, x: *mut c_double_complex,
                         incx: *mut c_int, tau: *mut c_double_complex);
    pub fn LAPACK_slarft(direct: *mut c_char, storev: *mut c_char, n: *mut c_int, k: *mut c_int,
                         v: *const c_float, ldv: *mut c_int, tau: *const c_float, t: *mut c_float,
                         ldt: *mut c_int);
    pub fn LAPACK_dlarft(direct: *mut c_char, storev: *mut c_char, n: *mut c_int, k: *mut c_int,
                         v: *const c_double, ldv: *mut c_int, tau: *const c_double,
                         t: *mut c_double, ldt: *mut c_int);
    pub fn LAPACK_clarft(direct: *mut c_char, storev: *mut c_char, n: *mut c_int, k: *mut c_int,
                         v: *const c_float_complex, ldv: *mut c_int, tau: *const c_float_complex,
                         t: *mut c_float_complex, ldt: *mut c_int);
    pub fn LAPACK_zlarft(direct: *mut c_char, storev: *mut c_char, n: *mut c_int, k: *mut c_int,
                         v: *const c_double_complex, ldv: *mut c_int, tau: *const c_double_complex,
                         t: *mut c_double_complex, ldt: *mut c_int);
    pub fn LAPACK_slarfx(side: *mut c_char, m: *mut c_int, n: *mut c_int, v: *const c_float,
                         tau: *mut c_float, c: *mut c_float, ldc: *mut c_int, work: *mut c_float);
    pub fn LAPACK_dlarfx(side: *mut c_char, m: *mut c_int, n: *mut c_int, v: *const c_double,
                         tau: *mut c_double, c: *mut c_double, ldc: *mut c_int,
                         work: *mut c_double);
    pub fn LAPACK_clarfx(side: *mut c_char, m: *mut c_int, n: *mut c_int,
                         v: *const c_float_complex, tau: *mut c_float_complex,
                         c: *mut c_float_complex, ldc: *mut c_int, work: *mut c_float_complex);
    pub fn LAPACK_zlarfx(side: *mut c_char, m: *mut c_int, n: *mut c_int,
                         v: *const c_double_complex, tau: *mut c_double_complex,
                         c: *mut c_double_complex, ldc: *mut c_int, work: *mut c_double_complex);
    pub fn LAPACK_slatms(m: *mut c_int, n: *mut c_int, dist: *mut c_char, iseed: *mut c_int,
                         sym: *mut c_char, d: *mut c_float, mode: *mut c_int, cond: *mut c_float,
                         dmax: *mut c_float, kl: *mut c_int, ku: *mut c_int, pack: *mut c_char,
                         a: *mut c_float, lda: *mut c_int, work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dlatms(m: *mut c_int, n: *mut c_int, dist: *mut c_char, iseed: *mut c_int,
                         sym: *mut c_char, d: *mut c_double, mode: *mut c_int, cond: *mut c_double,
                         dmax: *mut c_double, kl: *mut c_int, ku: *mut c_int, pack: *mut c_char,
                         a: *mut c_double, lda: *mut c_int, work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_clatms(m: *mut c_int, n: *mut c_int, dist: *mut c_char, iseed: *mut c_int,
                         sym: *mut c_char, d: *mut c_float, mode: *mut c_int, cond: *mut c_float,
                         dmax: *mut c_float, kl: *mut c_int, ku: *mut c_int, pack: *mut c_char,
                         a: *mut c_float_complex, lda: *mut c_int, work: *mut c_float_complex,
                         info: *mut c_int);
    pub fn LAPACK_zlatms(m: *mut c_int, n: *mut c_int, dist: *mut c_char, iseed: *mut c_int,
                         sym: *mut c_char, d: *mut c_double, mode: *mut c_int, cond: *mut c_double,
                         dmax: *mut c_double, kl: *mut c_int, ku: *mut c_int, pack: *mut c_char,
                         a: *mut c_double_complex, lda: *mut c_int, work: *mut c_double_complex,
                         info: *mut c_int);
    pub fn LAPACK_slag2d(m: *mut c_int, n: *mut c_int, sa: *const c_float, ldsa: *mut c_int,
                         a: *mut c_double, lda: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dlag2s(m: *mut c_int, n: *mut c_int, a: *const c_double, lda: *mut c_int,
                         sa: *mut c_float, ldsa: *mut c_int, info: *mut c_int);
    pub fn LAPACK_clag2z(m: *mut c_int, n: *mut c_int, sa: *const c_float_complex,
                         ldsa: *mut c_int, a: *mut c_double_complex, lda: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_zlag2c(m: *mut c_int, n: *mut c_int, a: *const c_double_complex, lda: *mut c_int,
                         sa: *mut c_float_complex, ldsa: *mut c_int, info: *mut c_int);
    pub fn LAPACK_slauum(uplo: *mut c_char, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dlauum(uplo: *mut c_char, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_clauum(uplo: *mut c_char, n: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zlauum(uplo: *mut c_char, n: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, info: *mut c_int);
    pub fn LAPACK_slagge(m: *mut c_int, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                         d: *const c_float, a: *mut c_float, lda: *mut c_int, iseed: *mut c_int,
                         work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dlagge(m: *mut c_int, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                         d: *const c_double, a: *mut c_double, lda: *mut c_int, iseed: *mut c_int,
                         work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_clagge(m: *mut c_int, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                         d: *const c_float, a: *mut c_float_complex, lda: *mut c_int,
                         iseed: *mut c_int, work: *mut c_float_complex, info: *mut c_int);
    pub fn LAPACK_zlagge(m: *mut c_int, n: *mut c_int, kl: *mut c_int, ku: *mut c_int,
                         d: *const c_double, a: *mut c_double_complex, lda: *mut c_int,
                         iseed: *mut c_int, work: *mut c_double_complex, info: *mut c_int);
    pub fn LAPACK_slascl(_type: *mut c_char, kl: *mut c_int, ku: *mut c_int, cfrom: *mut c_float,
                         cto: *mut c_float, m: *mut c_int, n: *mut c_int, a: *mut c_float,
                         lda: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dlascl(_type: *mut c_char, kl: *mut c_int, ku: *mut c_int, cfrom: *mut c_double,
                         cto: *mut c_double, m: *mut c_int, n: *mut c_int, a: *mut c_double,
                         lda: *mut c_int, info: *mut c_int);
    pub fn LAPACK_clascl(_type: *mut c_char, kl: *mut c_int, ku: *mut c_int, cfrom: *mut c_float,
                         cto: *mut c_float, m: *mut c_int, n: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zlascl(_type: *mut c_char, kl: *mut c_int, ku: *mut c_int, cfrom: *mut c_double,
                         cto: *mut c_double, m: *mut c_int, n: *mut c_int,
                         a: *mut c_double_complex, lda: *mut c_int, info: *mut c_int);
    pub fn LAPACK_slaset(uplo: *mut c_char, m: *mut c_int, n: *mut c_int, alpha: *mut c_float,
                         beta: *mut c_float, a: *mut c_float, lda: *mut c_int);
    pub fn LAPACK_dlaset(uplo: *mut c_char, m: *mut c_int, n: *mut c_int, alpha: *mut c_double,
                         beta: *mut c_double, a: *mut c_double, lda: *mut c_int);
    pub fn LAPACK_claset(uplo: *mut c_char, m: *mut c_int, n: *mut c_int,
                         alpha: *mut c_float_complex, beta: *mut c_float_complex,
                         a: *mut c_float_complex, lda: *mut c_int);
    pub fn LAPACK_zlaset(uplo: *mut c_char, m: *mut c_int, n: *mut c_int,
                         alpha: *mut c_double_complex, beta: *mut c_double_complex,
                         a: *mut c_double_complex, lda: *mut c_int);
    pub fn LAPACK_slasrt(id: *mut c_char, n: *mut c_int, d: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dlasrt(id: *mut c_char, n: *mut c_int, d: *mut c_double, info: *mut c_int);
    pub fn LAPACK_claghe(n: *mut c_int, k: *mut c_int, d: *const c_float, a: *mut c_float_complex,
                         lda: *mut c_int, iseed: *mut c_int, work: *mut c_float_complex,
                         info: *mut c_int);
    pub fn LAPACK_zlaghe(n: *mut c_int, k: *mut c_int, d: *const c_double,
                         a: *mut c_double_complex, lda: *mut c_int, iseed: *mut c_int,
                         work: *mut c_double_complex, info: *mut c_int);
    pub fn LAPACK_slagsy(n: *mut c_int, k: *mut c_int, d: *const c_float, a: *mut c_float,
                         lda: *mut c_int, iseed: *mut c_int, work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dlagsy(n: *mut c_int, k: *mut c_int, d: *const c_double, a: *mut c_double,
                         lda: *mut c_int, iseed: *mut c_int, work: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_clagsy(n: *mut c_int, k: *mut c_int, d: *const c_float, a: *mut c_float_complex,
                         lda: *mut c_int, iseed: *mut c_int, work: *mut c_float_complex,
                         info: *mut c_int);
    pub fn LAPACK_zlagsy(n: *mut c_int, k: *mut c_int, d: *const c_double,
                         a: *mut c_double_complex, lda: *mut c_int, iseed: *mut c_int,
                         work: *mut c_double_complex, info: *mut c_int);
    pub fn LAPACK_slapmr(forwrd: *mut c_int, m: *mut c_int, n: *mut c_int, x: *mut c_float,
                         ldx: *mut c_int, k: *mut c_int);
    pub fn LAPACK_dlapmr(forwrd: *mut c_int, m: *mut c_int, n: *mut c_int, x: *mut c_double,
                         ldx: *mut c_int, k: *mut c_int);
    pub fn LAPACK_clapmr(forwrd: *mut c_int, m: *mut c_int, n: *mut c_int, x: *mut c_float_complex,
                         ldx: *mut c_int, k: *mut c_int);
    pub fn LAPACK_zlapmr(forwrd: *mut c_int, m: *mut c_int, n: *mut c_int,
                         x: *mut c_double_complex, ldx: *mut c_int, k: *mut c_int);
    pub fn LAPACK_slapmt(forwrd: *mut c_int, m: *mut c_int, n: *mut c_int, x: *mut c_float,
                         ldx: *mut c_int, k: *mut c_int);
    pub fn LAPACK_dlapmt(forwrd: *mut c_int, m: *mut c_int, n: *mut c_int, x: *mut c_double,
                         ldx: *mut c_int, k: *mut c_int);
    pub fn LAPACK_clapmt(forwrd: *mut c_int, m: *mut c_int, n: *mut c_int, x: *mut c_float_complex,
                         ldx: *mut c_int, k: *mut c_int);
    pub fn LAPACK_zlapmt(forwrd: *mut c_int, m: *mut c_int, n: *mut c_int,
                         x: *mut c_double_complex, ldx: *mut c_int, k: *mut c_int);
    pub fn LAPACK_slapy2(x: *mut c_float, y: *mut c_float) -> c_float;
    pub fn LAPACK_dlapy2(x: *mut c_double, y: *mut c_double) -> c_double;
    pub fn LAPACK_slapy3(x: *mut c_float, y: *mut c_float, z: *mut c_float) -> c_float;
    pub fn LAPACK_dlapy3(x: *mut c_double, y: *mut c_double, z: *mut c_double) -> c_double;
    pub fn LAPACK_slartgp(f: *mut c_float, g: *mut c_float, cs: *mut c_float, sn: *mut c_float,
                          r: *mut c_float);
    pub fn LAPACK_dlartgp(f: *mut c_double, g: *mut c_double, cs: *mut c_double, sn: *mut c_double,
                          r: *mut c_double);
    pub fn LAPACK_slartgs(x: *mut c_float, y: *mut c_float, sigma: *mut c_float, cs: *mut c_float,
                          sn: *mut c_float);
    pub fn LAPACK_dlartgs(x: *mut c_double, y: *mut c_double, sigma: *mut c_double,
                          cs: *mut c_double, sn: *mut c_double);
    // Version 3.3.0
    pub fn LAPACK_cbbcsd(jobu1: *mut c_char, jobu2: *mut c_char, jobv1t: *mut c_char,
                         jobv2t: *mut c_char, trans: *mut c_char, m: *mut c_int, p: *mut c_int,
                         q: *mut c_int, theta: *mut c_float, phi: *mut c_float,
                         u1: *mut c_float_complex, ldu1: *mut c_int, u2: *mut c_float_complex,
                         ldu2: *mut c_int, v1t: *mut c_float_complex, ldv1t: *mut c_int,
                         v2t: *mut c_float_complex, ldv2t: *mut c_int, b11d: *mut c_float,
                         b11e: *mut c_float, b12d: *mut c_float, b12e: *mut c_float,
                         b21d: *mut c_float, b21e: *mut c_float, b22d: *mut c_float,
                         b22e: *mut c_float, rwork: *mut c_float, lrwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_cheswapr(uplo: *mut c_char, n: *mut c_int, a: *mut c_float_complex,
                           i1: *mut c_int, i2: *mut c_int);
    pub fn LAPACK_chetri2(uplo: *mut c_char, n: *mut c_int, a: *mut c_float_complex,
                          lda: *mut c_int, ipiv: *const c_int, work: *mut c_float_complex,
                          lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_chetri2x(uplo: *mut c_char, n: *mut c_int, a: *mut c_float_complex,
                           lda: *mut c_int, ipiv: *const c_int, work: *mut c_float_complex,
                           nb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_chetrs2(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *const c_float_complex, lda: *mut c_int, ipiv: *const c_int,
                          b: *mut c_float_complex, ldb: *mut c_int, work: *mut c_float_complex,
                          info: *mut c_int);
    pub fn LAPACK_csyconv(uplo: *mut c_char, way: *mut c_char, n: *mut c_int,
                          a: *mut c_float_complex, lda: *mut c_int, ipiv: *const c_int,
                          work: *mut c_float_complex, info: *mut c_int);
    pub fn LAPACK_csyswapr(uplo: *mut c_char, n: *mut c_int, a: *mut c_float_complex,
                           i1: *mut c_int, i2: *mut c_int);
    pub fn LAPACK_csytri2(uplo: *mut c_char, n: *mut c_int, a: *mut c_float_complex,
                          lda: *mut c_int, ipiv: *const c_int, work: *mut c_float_complex,
                          lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_csytri2x(uplo: *mut c_char, n: *mut c_int, a: *mut c_float_complex,
                           lda: *mut c_int, ipiv: *const c_int, work: *mut c_float_complex,
                           nb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_csytrs2(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *const c_float_complex, lda: *mut c_int, ipiv: *const c_int,
                          b: *mut c_float_complex, ldb: *mut c_int, work: *mut c_float_complex,
                          info: *mut c_int);
    pub fn LAPACK_cunbdb(trans: *mut c_char, signs: *mut c_char, m: *mut c_int, p: *mut c_int,
                         q: *mut c_int, x11: *mut c_float_complex, ldx11: *mut c_int,
                         x12: *mut c_float_complex, ldx12: *mut c_int, x21: *mut c_float_complex,
                         ldx21: *mut c_int, x22: *mut c_float_complex, ldx22: *mut c_int,
                         theta: *mut c_float, phi: *mut c_float, taup1: *mut c_float_complex,
                         taup2: *mut c_float_complex, tauq1: *mut c_float_complex,
                         tauq2: *mut c_float_complex, work: *mut c_float_complex,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cuncsd(jobu1: *mut c_char, jobu2: *mut c_char, jobv1t: *mut c_char,
                         jobv2t: *mut c_char, trans: *mut c_char, signs: *mut c_char,
                         m: *mut c_int, p: *mut c_int, q: *mut c_int, x11: *mut c_float_complex,
                         ldx11: *mut c_int, x12: *mut c_float_complex, ldx12: *mut c_int,
                         x21: *mut c_float_complex, ldx21: *mut c_int, x22: *mut c_float_complex,
                         ldx22: *mut c_int, theta: *mut c_float, u1: *mut c_float_complex,
                         ldu1: *mut c_int, u2: *mut c_float_complex, ldu2: *mut c_int,
                         v1t: *mut c_float_complex, ldv1t: *mut c_int, v2t: *mut c_float_complex,
                         ldv2t: *mut c_int, work: *mut c_float_complex, lwork: *mut c_int,
                         rwork: *mut c_float, lrwork: *mut c_int, iwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_cuncsd2by1(jobu1: *mut c_char, jobu2: *mut c_char, jobv1t: *mut c_char,
                             m: *mut c_int, p: *mut c_int, q: *mut c_int,
                             x11: *mut c_float_complex, ldx11: *mut c_int,
                             x21: *mut c_float_complex, ldx21: *mut c_int,
                             theta: *mut c_float_complex, u1: *mut c_float_complex,
                             ldu1: *mut c_int, u2: *mut c_float_complex, ldu2: *mut c_int,
                             v1t: *mut c_float_complex, ldv1t: *mut c_int,
                             work: *mut c_float_complex, lwork: *mut c_int, rwork: *mut c_float,
                             lrwork: *mut c_int, iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dbbcsd(jobu1: *mut c_char, jobu2: *mut c_char, jobv1t: *mut c_char,
                         jobv2t: *mut c_char, trans: *mut c_char, m: *mut c_int, p: *mut c_int,
                         q: *mut c_int, theta: *mut c_double, phi: *mut c_double,
                         u1: *mut c_double, ldu1: *mut c_int, u2: *mut c_double, ldu2: *mut c_int,
                         v1t: *mut c_double, ldv1t: *mut c_int, v2t: *mut c_double,
                         ldv2t: *mut c_int, b11d: *mut c_double, b11e: *mut c_double,
                         b12d: *mut c_double, b12e: *mut c_double, b21d: *mut c_double,
                         b21e: *mut c_double, b22d: *mut c_double, b22e: *mut c_double,
                         work: *mut c_double, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dorbdb(trans: *mut c_char, signs: *mut c_char, m: *mut c_int, p: *mut c_int,
                         q: *mut c_int, x11: *mut c_double, ldx11: *mut c_int, x12: *mut c_double,
                         ldx12: *mut c_int, x21: *mut c_double, ldx21: *mut c_int,
                         x22: *mut c_double, ldx22: *mut c_int, theta: *mut c_double,
                         phi: *mut c_double, taup1: *mut c_double, taup2: *mut c_double,
                         tauq1: *mut c_double, tauq2: *mut c_double, work: *mut c_double,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dorcsd(jobu1: *mut c_char, jobu2: *mut c_char, jobv1t: *mut c_char,
                         jobv2t: *mut c_char, trans: *mut c_char, signs: *mut c_char,
                         m: *mut c_int, p: *mut c_int, q: *mut c_int, x11: *mut c_double,
                         ldx11: *mut c_int, x12: *mut c_double, ldx12: *mut c_int,
                         x21: *mut c_double, ldx21: *mut c_int, x22: *mut c_double,
                         ldx22: *mut c_int, theta: *mut c_double, u1: *mut c_double,
                         ldu1: *mut c_int, u2: *mut c_double, ldu2: *mut c_int, v1t: *mut c_double,
                         ldv1t: *mut c_int, v2t: *mut c_double, ldv2t: *mut c_int,
                         work: *mut c_double, lwork: *mut c_int, iwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_dorcsd2by1(jobu1: *mut c_char, jobu2: *mut c_char, jobv1t: *mut c_char,
                             m: *mut c_int, p: *mut c_int, q: *mut c_int, x11: *mut c_double,
                             ldx11: *mut c_int, x21: *mut c_double, ldx21: *mut c_int,
                             theta: *mut c_double, u1: *mut c_double, ldu1: *mut c_int,
                             u2: *mut c_double, ldu2: *mut c_int, v1t: *mut c_double,
                             ldv1t: *mut c_int, work: *mut c_double, lwork: *mut c_int,
                             iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dsyconv(uplo: *mut c_char, way: *mut c_char, n: *mut c_int, a: *mut c_double,
                          lda: *mut c_int, ipiv: *const c_int, work: *mut c_double,
                          info: *mut c_int);
    pub fn LAPACK_dsyswapr(uplo: *mut c_char, n: *mut c_int, a: *mut c_double, i1: *mut c_int,
                           i2: *mut c_int);
    pub fn LAPACK_dsytri2(uplo: *mut c_char, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                          ipiv: *const c_int, work: *mut c_double_complex, lwork: *mut c_int,
                          info: *mut c_int);
    pub fn LAPACK_dsytri2x(uplo: *mut c_char, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                           ipiv: *const c_int, work: *mut c_double, nb: *mut c_int,
                           info: *mut c_int);
    pub fn LAPACK_dsytrs2(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, a: *const c_double,
                          lda: *mut c_int, ipiv: *const c_int, b: *mut c_double, ldb: *mut c_int,
                          work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_sbbcsd(jobu1: *mut c_char, jobu2: *mut c_char, jobv1t: *mut c_char,
                         jobv2t: *mut c_char, trans: *mut c_char, m: *mut c_int, p: *mut c_int,
                         q: *mut c_int, theta: *mut c_float, phi: *mut c_float, u1: *mut c_float,
                         ldu1: *mut c_int, u2: *mut c_float, ldu2: *mut c_int, v1t: *mut c_float,
                         ldv1t: *mut c_int, v2t: *mut c_float, ldv2t: *mut c_int,
                         b11d: *mut c_float, b11e: *mut c_float, b12d: *mut c_float,
                         b12e: *mut c_float, b21d: *mut c_float, b21e: *mut c_float,
                         b22d: *mut c_float, b22e: *mut c_float, work: *mut c_float,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sorbdb(trans: *mut c_char, signs: *mut c_char, m: *mut c_int, p: *mut c_int,
                         q: *mut c_int, x11: *mut c_float, ldx11: *mut c_int, x12: *mut c_float,
                         ldx12: *mut c_int, x21: *mut c_float, ldx21: *mut c_int,
                         x22: *mut c_float, ldx22: *mut c_int, theta: *mut c_float,
                         phi: *mut c_float, taup1: *mut c_float, taup2: *mut c_float,
                         tauq1: *mut c_float, tauq2: *mut c_float, work: *mut c_float,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sorcsd(jobu1: *mut c_char, jobu2: *mut c_char, jobv1t: *mut c_char,
                         jobv2t: *mut c_char, trans: *mut c_char, signs: *mut c_char,
                         m: *mut c_int, p: *mut c_int, q: *mut c_int, x11: *mut c_float,
                         ldx11: *mut c_int, x12: *mut c_float, ldx12: *mut c_int,
                         x21: *mut c_float, ldx21: *mut c_int, x22: *mut c_float,
                         ldx22: *mut c_int, theta: *mut c_float, u1: *mut c_float,
                         ldu1: *mut c_int, u2: *mut c_float, ldu2: *mut c_int, v1t: *mut c_float,
                         ldv1t: *mut c_int, v2t: *mut c_float, ldv2t: *mut c_int,
                         work: *mut c_float, lwork: *mut c_int, iwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_sorcsd2by1(jobu1: *mut c_char, jobu2: *mut c_char, jobv1t: *mut c_char,
                             m: *mut c_int, p: *mut c_int, q: *mut c_int, x11: *mut c_float,
                             ldx11: *mut c_int, x21: *mut c_float, ldx21: *mut c_int,
                             theta: *mut c_float, u1: *mut c_float, ldu1: *mut c_int,
                             u2: *mut c_float, ldu2: *mut c_int, v1t: *mut c_float,
                             ldv1t: *mut c_int, work: *mut c_float, lwork: *mut c_int,
                             iwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ssyconv(uplo: *mut c_char, way: *mut c_char, n: *mut c_int, a: *mut c_float,
                          lda: *mut c_int, ipiv: *const c_int, work: *mut c_float,
                          info: *mut c_int);
    pub fn LAPACK_ssyswapr(uplo: *mut c_char, n: *mut c_int, a: *mut c_float, i1: *mut c_int,
                           i2: *mut c_int);
    pub fn LAPACK_ssytri2(uplo: *mut c_char, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                          ipiv: *const c_int, work: *mut c_float_complex, lwork: *mut c_int,
                          info: *mut c_int);
    pub fn LAPACK_ssytri2x(uplo: *mut c_char, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                           ipiv: *const c_int, work: *mut c_float, nb: *mut c_int,
                           info: *mut c_int);
    pub fn LAPACK_ssytrs2(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, a: *const c_float,
                          lda: *mut c_int, ipiv: *const c_int, b: *mut c_float, ldb: *mut c_int,
                          work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_zbbcsd(jobu1: *mut c_char, jobu2: *mut c_char, jobv1t: *mut c_char,
                         jobv2t: *mut c_char, trans: *mut c_char, m: *mut c_int, p: *mut c_int,
                         q: *mut c_int, theta: *mut c_double, phi: *mut c_double,
                         u1: *mut c_double_complex, ldu1: *mut c_int, u2: *mut c_double_complex,
                         ldu2: *mut c_int, v1t: *mut c_double_complex, ldv1t: *mut c_int,
                         v2t: *mut c_double_complex, ldv2t: *mut c_int, b11d: *mut c_double,
                         b11e: *mut c_double, b12d: *mut c_double, b12e: *mut c_double,
                         b21d: *mut c_double, b21e: *mut c_double, b22d: *mut c_double,
                         b22e: *mut c_double, rwork: *mut c_double, lrwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_zheswapr(uplo: *mut c_char, n: *mut c_int, a: *mut c_double_complex,
                           i1: *mut c_int, i2: *mut c_int);
    pub fn LAPACK_zhetri2(uplo: *mut c_char, n: *mut c_int, a: *mut c_double_complex,
                          lda: *mut c_int, ipiv: *const c_int, work: *mut c_double_complex,
                          lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zhetri2x(uplo: *mut c_char, n: *mut c_int, a: *mut c_double_complex,
                           lda: *mut c_int, ipiv: *const c_int, work: *mut c_double_complex,
                           nb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zhetrs2(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *const c_double_complex, lda: *mut c_int, ipiv: *const c_int,
                          b: *mut c_double_complex, ldb: *mut c_int, work: *mut c_double_complex,
                          info: *mut c_int);
    pub fn LAPACK_zsyconv(uplo: *mut c_char, way: *mut c_char, n: *mut c_int,
                          a: *mut c_double_complex, lda: *mut c_int, ipiv: *const c_int,
                          work: *mut c_double_complex, info: *mut c_int);
    pub fn LAPACK_zsyswapr(uplo: *mut c_char, n: *mut c_int, a: *mut c_double_complex,
                           i1: *mut c_int, i2: *mut c_int);
    pub fn LAPACK_zsytri2(uplo: *mut c_char, n: *mut c_int, a: *mut c_double_complex,
                          lda: *mut c_int, ipiv: *const c_int, work: *mut c_double_complex,
                          lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zsytri2x(uplo: *mut c_char, n: *mut c_int, a: *mut c_double_complex,
                           lda: *mut c_int, ipiv: *const c_int, work: *mut c_double_complex,
                           nb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zsytrs2(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                          a: *const c_double_complex, lda: *mut c_int, ipiv: *const c_int,
                          b: *mut c_double_complex, ldb: *mut c_int, work: *mut c_double_complex,
                          info: *mut c_int);
    pub fn LAPACK_zunbdb(trans: *mut c_char, signs: *mut c_char, m: *mut c_int, p: *mut c_int,
                         q: *mut c_int, x11: *mut c_double_complex, ldx11: *mut c_int,
                         x12: *mut c_double_complex, ldx12: *mut c_int, x21: *mut c_double_complex,
                         ldx21: *mut c_int, x22: *mut c_double_complex, ldx22: *mut c_int,
                         theta: *mut c_double, phi: *mut c_double, taup1: *mut c_double_complex,
                         taup2: *mut c_double_complex, tauq1: *mut c_double_complex,
                         tauq2: *mut c_double_complex, work: *mut c_double_complex,
                         lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zuncsd(jobu1: *mut c_char, jobu2: *mut c_char, jobv1t: *mut c_char,
                         jobv2t: *mut c_char, trans: *mut c_char, signs: *mut c_char,
                         m: *mut c_int, p: *mut c_int, q: *mut c_int, x11: *mut c_double_complex,
                         ldx11: *mut c_int, x12: *mut c_double_complex, ldx12: *mut c_int,
                         x21: *mut c_double_complex, ldx21: *mut c_int, x22: *mut c_double_complex,
                         ldx22: *mut c_int, theta: *mut c_double, u1: *mut c_double_complex,
                         ldu1: *mut c_int, u2: *mut c_double_complex, ldu2: *mut c_int,
                         v1t: *mut c_double_complex, ldv1t: *mut c_int, v2t: *mut c_double_complex,
                         ldv2t: *mut c_int, work: *mut c_double_complex, lwork: *mut c_int,
                         rwork: *mut c_double, lrwork: *mut c_int, iwork: *mut c_int,
                         info: *mut c_int);
    pub fn LAPACK_zuncsd2by1(jobu1: *mut c_char, jobu2: *mut c_char, jobv1t: *mut c_char,
                             m: *mut c_int, p: *mut c_int, q: *mut c_int,
                             x11: *mut c_double_complex, ldx11: *mut c_int,
                             x21: *mut c_double_complex, ldx21: *mut c_int,
                             theta: *mut c_double_complex, u1: *mut c_double_complex,
                             ldu1: *mut c_int, u2: *mut c_double_complex, ldu2: *mut c_int,
                             v1t: *mut c_double_complex, ldv1t: *mut c_int,
                             work: *mut c_double_complex, lwork: *mut c_int, rwork: *mut c_double,
                             lrwork: *mut c_int, iwork: *mut c_int, info: *mut c_int);
    // Version 3.4.0
    pub fn LAPACK_sgemqrt(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                          k: *mut c_int, nb: *mut c_int, v: *const c_float, ldv: *mut c_int,
                          t: *const c_float, ldt: *mut c_int, c: *mut c_float, ldc: *mut c_int,
                          work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dgemqrt(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                          k: *mut c_int, nb: *mut c_int, v: *const c_double, ldv: *mut c_int,
                          t: *const c_double, ldt: *mut c_int, c: *mut c_double, ldc: *mut c_int,
                          work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_cgemqrt(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                          k: *mut c_int, nb: *mut c_int, v: *const c_float_complex,
                          ldv: *mut c_int, t: *const c_float_complex, ldt: *mut c_int,
                          c: *mut c_float_complex, ldc: *mut c_int, work: *mut c_float_complex,
                          info: *mut c_int);
    pub fn LAPACK_zgemqrt(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                          k: *mut c_int, nb: *mut c_int, v: *const c_double_complex,
                          ldv: *mut c_int, t: *const c_double_complex, ldt: *mut c_int,
                          c: *mut c_double_complex, ldc: *mut c_int, work: *mut c_double_complex,
                          info: *mut c_int);
    pub fn LAPACK_sgeqrt(m: *mut c_int, n: *mut c_int, nb: *mut c_int, a: *mut c_float,
                         lda: *mut c_int, t: *mut c_float, ldt: *mut c_int, work: *mut c_float,
                         info: *mut c_int);
    pub fn LAPACK_dgeqrt(m: *mut c_int, n: *mut c_int, nb: *mut c_int, a: *mut c_double,
                         lda: *mut c_int, t: *mut c_double, ldt: *mut c_int, work: *mut c_double,
                         info: *mut c_int);
    pub fn LAPACK_cgeqrt(m: *mut c_int, n: *mut c_int, nb: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, t: *mut c_float_complex, ldt: *mut c_int,
                         work: *mut c_float_complex, info: *mut c_int);
    pub fn LAPACK_zgeqrt(m: *mut c_int, n: *mut c_int, nb: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, t: *mut c_double_complex, ldt: *mut c_int,
                         work: *mut c_double_complex, info: *mut c_int);
    pub fn LAPACK_sgeqrt2(m: *mut c_int, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                          t: *mut c_float, ldt: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgeqrt2(m: *mut c_int, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                          t: *mut c_double, ldt: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgeqrt2(m: *mut c_int, n: *mut c_int, a: *mut c_float_complex, lda: *mut c_int,
                          t: *mut c_float_complex, ldt: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zgeqrt2(m: *mut c_int, n: *mut c_int, a: *mut c_double_complex, lda: *mut c_int,
                          t: *mut c_double_complex, ldt: *mut c_int, info: *mut c_int);
    pub fn LAPACK_sgeqrt3(m: *mut c_int, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                          t: *mut c_float, ldt: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dgeqrt3(m: *mut c_int, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                          t: *mut c_double, ldt: *mut c_int, info: *mut c_int);
    pub fn LAPACK_cgeqrt3(m: *mut c_int, n: *mut c_int, a: *mut c_float_complex, lda: *mut c_int,
                          t: *mut c_float_complex, ldt: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zgeqrt3(m: *mut c_int, n: *mut c_int, a: *mut c_double_complex, lda: *mut c_int,
                          t: *mut c_double_complex, ldt: *mut c_int, info: *mut c_int);
    pub fn LAPACK_stpmqrt(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                          k: *mut c_int, l: *mut c_int, nb: *mut c_int, v: *const c_float,
                          ldv: *mut c_int, t: *const c_float, ldt: *mut c_int, a: *mut c_float,
                          lda: *mut c_int, b: *mut c_float, ldb: *mut c_int, work: *mut c_float,
                          info: *mut c_int);
    pub fn LAPACK_dtpmqrt(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                          k: *mut c_int, l: *mut c_int, nb: *mut c_int, v: *const c_double,
                          ldv: *mut c_int, t: *const c_double, ldt: *mut c_int, a: *mut c_double,
                          lda: *mut c_int, b: *mut c_double, ldb: *mut c_int, work: *mut c_double,
                          info: *mut c_int);
    pub fn LAPACK_ctpmqrt(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                          k: *mut c_int, l: *mut c_int, nb: *mut c_int, v: *const c_float_complex,
                          ldv: *mut c_int, t: *const c_float_complex, ldt: *mut c_int,
                          a: *mut c_float_complex, lda: *mut c_int, b: *mut c_float_complex,
                          ldb: *mut c_int, work: *mut c_float_complex, info: *mut c_int);
    pub fn LAPACK_ztpmqrt(side: *mut c_char, trans: *mut c_char, m: *mut c_int, n: *mut c_int,
                          k: *mut c_int, l: *mut c_int, nb: *mut c_int, v: *const c_double_complex,
                          ldv: *mut c_int, t: *const c_double_complex, ldt: *mut c_int,
                          a: *mut c_double_complex, lda: *mut c_int, b: *mut c_double_complex,
                          ldb: *mut c_int, work: *mut c_double_complex, info: *mut c_int);
    pub fn LAPACK_stpqrt(m: *mut c_int, n: *mut c_int, l: *mut c_int, nb: *mut c_int,
                         a: *mut c_float, lda: *mut c_int, b: *mut c_float, ldb: *mut c_int,
                         t: *mut c_float, ldt: *mut c_int, work: *mut c_float, info: *mut c_int);
    pub fn LAPACK_dtpqrt(m: *mut c_int, n: *mut c_int, l: *mut c_int, nb: *mut c_int,
                         a: *mut c_double, lda: *mut c_int, b: *mut c_double, ldb: *mut c_int,
                         t: *mut c_double, ldt: *mut c_int, work: *mut c_double, info: *mut c_int);
    pub fn LAPACK_ctpqrt(m: *mut c_int, n: *mut c_int, l: *mut c_int, nb: *mut c_int,
                         a: *mut c_float_complex, lda: *mut c_int, b: *mut c_float_complex,
                         ldb: *mut c_int, t: *mut c_float_complex, ldt: *mut c_int,
                         work: *mut c_float_complex, info: *mut c_int);
    pub fn LAPACK_ztpqrt(m: *mut c_int, n: *mut c_int, l: *mut c_int, nb: *mut c_int,
                         a: *mut c_double_complex, lda: *mut c_int, b: *mut c_double_complex,
                         ldb: *mut c_int, t: *mut c_double_complex, ldt: *mut c_int,
                         work: *mut c_double_complex, info: *mut c_int);
    pub fn LAPACK_stpqrt2(m: *mut c_int, n: *mut c_int, l: *mut c_int, a: *mut c_float,
                          lda: *mut c_int, b: *mut c_float, ldb: *mut c_int, t: *mut c_float,
                          ldt: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dtpqrt2(m: *mut c_int, n: *mut c_int, l: *mut c_int, a: *mut c_double,
                          lda: *mut c_int, b: *mut c_double, ldb: *mut c_int, t: *mut c_double,
                          ldt: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ctpqrt2(m: *mut c_int, n: *mut c_int, l: *mut c_int, a: *mut c_float_complex,
                          lda: *mut c_int, b: *mut c_float_complex, ldb: *mut c_int,
                          t: *mut c_float_complex, ldt: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ztpqrt2(m: *mut c_int, n: *mut c_int, l: *mut c_int, a: *mut c_double_complex,
                          lda: *mut c_int, b: *mut c_double_complex, ldb: *mut c_int,
                          t: *mut c_double_complex, ldt: *mut c_int, info: *mut c_int);
    pub fn LAPACK_stprfb(side: *mut c_char, trans: *mut c_char, direct: *mut c_char,
                         storev: *mut c_char, m: *mut c_int, n: *mut c_int, k: *mut c_int,
                         l: *mut c_int, v: *const c_float, ldv: *mut c_int, t: *const c_float,
                         ldt: *mut c_int, a: *mut c_float, lda: *mut c_int, b: *mut c_float,
                         ldb: *mut c_int, work: *const c_float, ldwork: *mut c_int);
    pub fn LAPACK_dtprfb(side: *mut c_char, trans: *mut c_char, direct: *mut c_char,
                         storev: *mut c_char, m: *mut c_int, n: *mut c_int, k: *mut c_int,
                         l: *mut c_int, v: *const c_double, ldv: *mut c_int, t: *const c_double,
                         ldt: *mut c_int, a: *mut c_double, lda: *mut c_int, b: *mut c_double,
                         ldb: *mut c_int, work: *const c_double, ldwork: *mut c_int);
    pub fn LAPACK_ctprfb(side: *mut c_char, trans: *mut c_char, direct: *mut c_char,
                         storev: *mut c_char, m: *mut c_int, n: *mut c_int, k: *mut c_int,
                         l: *mut c_int, v: *const c_float_complex, ldv: *mut c_int,
                         t: *const c_float_complex, ldt: *mut c_int, a: *mut c_float_complex,
                         lda: *mut c_int, b: *mut c_float_complex, ldb: *mut c_int,
                         work: *mut c_float_complex, ldwork: *mut c_int);
    pub fn LAPACK_ztprfb(side: *mut c_char, trans: *mut c_char, direct: *mut c_char,
                         storev: *mut c_char, m: *mut c_int, n: *mut c_int, k: *mut c_int,
                         l: *mut c_int, v: *const c_double_complex, ldv: *mut c_int,
                         t: *const c_double_complex, ldt: *mut c_int, a: *mut c_double_complex,
                         lda: *mut c_int, b: *mut c_double_complex, ldb: *mut c_int,
                         work: *mut c_double_complex, ldwork: *mut c_int);
    // Version 3.5.0
    pub fn LAPACK_ssysv_rook(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, a: *mut c_float,
                             lda: *mut c_int, ipiv: *mut c_int, b: *mut c_float, ldb: *mut c_int,
                             work: *mut c_float, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ssytrf_rook(uplo: *mut c_char, n: *mut c_int, a: *mut c_float, lda: *mut c_int,
                              ipiv: *mut c_int, work: *mut c_float, lwork: *mut c_int,
                              info: *mut c_int);
    pub fn LAPACK_dsysv_rook(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int, a: *mut c_double,
                             lda: *mut c_int, ipiv: *mut c_int, b: *mut c_double, ldb: *mut c_int,
                             work: *mut c_double, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dsytrf_rook(uplo: *mut c_char, n: *mut c_int, a: *mut c_double, lda: *mut c_int,
                              ipiv: *mut c_int, work: *mut c_double, lwork: *mut c_int,
                              info: *mut c_int);
    pub fn LAPACK_csysv_rook(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                             a: *mut c_float_complex, lda: *mut c_int, ipiv: *mut c_int,
                             b: *mut c_float_complex, ldb: *mut c_int, work: *mut c_float_complex,
                             lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_csytrf_rook(uplo: *mut c_char, n: *mut c_int, a: *mut c_float_complex,
                              lda: *mut c_int, ipiv: *mut c_int, work: *mut c_float_complex,
                              lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zsysv_rook(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                             a: *mut c_double_complex, lda: *mut c_int, ipiv: *mut c_int,
                             b: *mut c_double_complex, ldb: *mut c_int,
                             work: *mut c_double_complex, lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zsytrf_rook(uplo: *mut c_char, n: *mut c_int, a: *mut c_double_complex,
                              lda: *mut c_int, ipiv: *mut c_int, work: *mut c_double_complex,
                              lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_ssytrs_rook(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                              a: *const c_float, lda: *mut c_int, ipiv: *const c_int,
                              b: *mut c_float, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_dsytrs_rook(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                              a: *const c_double, lda: *mut c_int, ipiv: *const c_int,
                              b: *mut c_double, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_csytrs_rook(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                              a: *const c_float_complex, lda: *mut c_int, ipiv: *const c_int,
                              b: *mut c_float_complex, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zsytrs_rook(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                              a: *const c_double_complex, lda: *mut c_int, ipiv: *const c_int,
                              b: *mut c_double_complex, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_chetrf_rook(uplo: *mut c_char, n: *mut c_int, a: *mut c_float_complex,
                              lda: *mut c_int, ipiv: *mut c_int, work: *mut c_float_complex,
                              lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zhetrf_rook(uplo: *mut c_char, n: *mut c_int, a: *mut c_double_complex,
                              lda: *mut c_int, ipiv: *mut c_int, work: *mut c_double_complex,
                              lwork: *mut c_int, info: *mut c_int);
    pub fn LAPACK_chetrs_rook(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                              a: *const c_float_complex, lda: *mut c_int, ipiv: *const c_int,
                              b: *mut c_float_complex, ldb: *mut c_int, info: *mut c_int);
    pub fn LAPACK_zhetrs_rook(uplo: *mut c_char, n: *mut c_int, nrhs: *mut c_int,
                              a: *const c_double_complex, lda: *mut c_int, ipiv: *const c_int,
                              b: *mut c_double_complex, ldb: *mut c_int, info: *mut c_int);

    pub fn LAPACK_csyr(uplo: *mut c_char, n: *mut c_int, alpha: *mut c_float_complex,
                       x: *const c_float_complex, incx: *mut c_int, a: *mut c_float_complex,
                       lda: *mut c_int);
    pub fn LAPACK_zsyr(uplo: *mut c_char, n: *mut c_int, alpha: *mut c_double_complex,
                       x: *const c_double_complex, incx: *mut c_int, a: *mut c_double_complex,
                       lda: *mut c_int);
    pub fn LAPACK_ilaver(vers_major: *const c_int, vers_minor: *const c_int,
                         vers_patch: *const c_int);
}
